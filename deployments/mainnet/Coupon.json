{
  "address": "0x8b909aC9F3cba71d7A0B72397Ec82A74D2aC8D0F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cryptorchidsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_VRFCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_LinkToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyhash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LinkToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VRFCoordinator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressEntriesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkEligibility",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "eligibleTokens",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "rebateAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cryptorchidsERC721",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRebate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "drawingEntriesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "promotionEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "promotionOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "promotionStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebatesAvailable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPromotionEnd",
          "type": "uint256"
        }
      ],
      "name": "reset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userProvidedSeed",
          "type": "uint256"
        }
      ],
      "name": "selectWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setCurrentRebate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenRebate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winnerRequested",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawUnclaimed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x457d6f29d2c40d7e4d170a38391b7b7d689fb2da00dec9c39a975e7f2c008cd4",
  "receipt": {
    "to": null,
    "from": "0x0090720FeD7Fed66eD658118b7B3BB0189D3A495",
    "contractAddress": "0x8b909aC9F3cba71d7A0B72397Ec82A74D2aC8D0F",
    "transactionIndex": 169,
    "gasUsed": "2031353",
    "logsBloom": "0x
    "blockHash": "0xf1c46ddb553dbd832c6c3f3654bf1e9c2b518d8baadb67dd26049dc2f88c7c1d",
    "transactionHash": "0x457d6f29d2c40d7e4d170a38391b7b7d689fb2da00dec9c39a975e7f2c008cd4",
    "logs": [
      {
        "transactionIndex": 169,
        "blockNumber": 12473856,
        "transactionHash": "0x457d6f29d2c40d7e4d170a38391b7b7d689fb2da00dec9c39a975e7f2c008cd4",
        "address": "0x8b909aC9F3cba71d7A0B72397Ec82A74D2aC8D0F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495"
        ],
        "data": "0x",
        "logIndex": 293,
        "blockHash": "0xf1c46ddb553dbd832c6c3f3654bf1e9c2b518d8baadb67dd26049dc2f88c7c1d"
      }
    ],
    "blockNumber": 12473856,
    "cumulativeGasUsed": "13618314",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x941ee2e831d278DB802A541d3855A8de749ef635",
    "0xf0d54349aDdcf704F77AE15b96510dEA15cb7952",
    "0x514910771af9ca656af840dff83e8264ecf986ca",
    "0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445"
  ],
  "solcInputHash": "ec417a187af6dc3e6ac68161b2b62088",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cryptorchidsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_VRFCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LinkToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyhash\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LinkToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VRFCoordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressEntriesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkEligibility\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"eligibleTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"rebateAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptorchidsERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRebate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawingEntriesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promotionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promotionOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promotionStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebatesAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPromotionEnd\",\"type\":\"uint256\"}],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userProvidedSeed\",\"type\":\"uint256\"}],\"name\":\"selectWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setCurrentRebate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenRebate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerRequested\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUnclaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{\"checkEligibility()\":{\"details\":\"calls public functions on the CryptOrchids contract to build an array of eligible token IDs and a rebate amount.\",\"returns\":{\"eligibleTokens\":\"uint256[] Uncompacted array of 0s and eligible token IDs\",\"rebateAmount\":\"uint256 Eligible tokens * currentRebate\"}},\"enter()\":{\"details\":\"Adds address to drawingEntries, increments entriesCount, and increases pot for each eligible token, while marking each token redeemed.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"promotionOpen()\":{\"details\":\"@return bool Whether promotion is open for entries.\"},\"redeem()\":{\"details\":\"calls checkEligibility and sets all eligibleTokens as redeemed. Then transfers caller rebateAmount.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCurrentRebate()\":{\"details\":\"calls CryptOrchids.currentPrice and finds difference with MINT_FLOOR to return rebate.\"},\"tokenRebate(uint256)\":{\"details\":\"Copies currentPrice and returns rebate amount for tokenId\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawUnclaimed()\":{\"details\":\"Transfer remaining balance to owner if after promotionEnd.     \"}}},\"userdoc\":{\"methods\":{\"addressEntriesCount()\":{\"notice\":\"Current amount availble for refund or to be staked in raffle.\"},\"checkEligibility()\":{\"notice\":\"Check rebate value and eligible tokens. Tokens are valid if they are planted after this contract is deployed, alive, and not yet redeemed.\"},\"drawingEntriesCount()\":{\"notice\":\"Current amount availble for refund or to be staked in raffle.\"},\"enter()\":{\"notice\":\"Redeem tokens for entries in drawing.\"},\"promotionOpen()\":{\"notice\":\"Public function for whether the promotion is open. The promotion is only open if the contract balance is greater than the currentRebate. Displayed on CryptOrchids nursery for transparency.\"},\"rebatesAvailable()\":{\"notice\":\"Current count of rebates available as determined by safeBalance and currentRebate\"},\"redeem()\":{\"notice\":\"Claim ETH for valid tokens. Check for valid tokens before claming.\"},\"reset(uint256)\":{\"notice\":\"Owner may reset the promotion to run again.     \"},\"setCurrentRebate()\":{\"notice\":\"Current rebate amount for new, mintable token. Based on CryptOrchids current price, the ramping rebate is intended to address the regrettable FOMO ramp pricing. Starts at 0.02ETH, and increases with inverse correlation to price ramp to offer effectively straight 0.04 ETH for seeds.\"},\"tokenRebate(uint256)\":{\"notice\":\"Redeemable rebate amount for existing token. Based on the price the token was sold at, this prevents a seed holder from redeeming a seed for more than it was purchased for.\"},\"withdrawUnclaimed()\":{\"notice\":\"Withdraw ether from this contract once the promotion is over.\"},\"withdrawWinner()\":{\"notice\":\"Winner may withdraw ether from the contract once the promotion is over.     \"}}}},\"settings\":{\"compilationTarget\":{\"contracts/Coupon/Coupon.sol\":\"Coupon\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./vendor/SafeMathChainlink.sol\\\";\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  using SafeMathChainlink for uint256;\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness)\\n    internal virtual;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   * @param _seed seed mixed into the input of the VRF.\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee, uint256 _seed)\\n    internal returns (bytes32 requestId)\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash].add(1);\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) public {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0xbb84a6411e071d5b04b36d7dda59eaf1cb5a28b3b289757a5ac849ddf9befac3\"},\"@chainlink/contracts/src/v0.6/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\\n    address _requester, uint256 _nonce)\\n    internal pure returns (uint256)\\n  {\\n    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x0c3bd40c63dac8398a979b1228c8ecb1c269c157dd16f2dce2086d2270b65b22\"},\"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xe245a7be950c94d87bb775ae9ee9fbd693fbe2987778e6ce0b04605ea44b7b68\"},\"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathChainlink {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0x105f5e9491f3d0bbdd4f1c7627eb839d69b944bfd803028a01cc083597692c1f\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\"},\"contracts/Coupon/Coupon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.6 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol\\\";\\nimport \\\"../Interfaces/ERC721.sol\\\";\\nimport \\\"../Libraries/CurrentTime.sol\\\";\\n\\ncontract Coupon is Ownable, VRFConsumerBase, CurrentTime {\\n    mapping(uint256 => bool) internal redemptions;\\n\\n    uint256 internal constant REBATE_AMOUNT = 20000000000000000;\\n    uint256 internal constant MINT_FLOOR = 40000000000000000;\\n    uint256 public currentRebate;\\n\\n    uint256 public promotionStart;\\n    uint256 public promotionEnd;\\n    address public cryptorchidsERC721;\\n\\n    uint256 public pot;\\n    address[] internal drawingEntries;\\n    bytes32 internal randomWinnerRequestId;\\n    bool public winnerRequested;\\n    address public winner;\\n\\n    bytes32 internal keyHash;\\n    uint256 internal vrfFee;\\n    address public VRFCoordinator;\\n    address public LinkToken;\\n\\n    constructor(\\n        address cryptorchidsAddress,\\n        address _VRFCoordinator,\\n        address _LinkToken,\\n        bytes32 _keyhash\\n    ) public payable VRFConsumerBase(_VRFCoordinator, _LinkToken) {\\n        VRFCoordinator = _VRFCoordinator;\\n        LinkToken = _LinkToken;\\n        keyHash = _keyhash;\\n        vrfFee = 2000000000000000000; // 2 LINK\\n        cryptorchidsERC721 = cryptorchidsAddress;\\n        promotionStart = block.timestamp;\\n        promotionEnd = 1622520000;\\n        currentRebate = REBATE_AMOUNT;\\n    }\\n\\n    /** Public function for whether the promotion is open. The promotion is only\\n     * open if the contract balance is greater than the currentRebate. Displayed\\n     * on CryptOrchids nursery for transparency.\\n     * @dev\\n     * @return bool Whether promotion is open for entries.\\n     */\\n    function promotionOpen() public view returns (bool) {\\n        if (currentTime() > promotionEnd) return false;\\n        uint256 balance = address(this).balance;\\n        if (pot > balance.add(currentRebate)) return false;\\n        if (currentRebate > balance) return false;\\n\\n        return true;\\n    }\\n\\n    /** Check rebate value and eligible tokens. Tokens are valid if they are planted\\n     * after this contract is deployed, alive, and not yet redeemed.\\n     * @dev calls public functions on the CryptOrchids contract to build\\n     * an array of eligible token IDs and a rebate amount.\\n     * @return eligibleTokens uint256[] Uncompacted array of 0s and eligible token IDs\\n     * @return rebateAmount uint256 Eligible tokens * currentRebate\\n     */\\n    function checkEligibility() public view returns (uint256[] memory eligibleTokens, uint256 rebateAmount) {\\n        uint256 tokenCount = ERC721(cryptorchidsERC721).balanceOf(msg.sender);\\n        eligibleTokens = new uint256[](tokenCount);\\n        uint256 safeBal = safeBalance();\\n        for (uint256 index = 0; index < tokenCount; index++) {\\n            uint256 tokenId = ERC721(cryptorchidsERC721).tokenOfOwnerByIndex(msg.sender, index);\\n            if (redemptions[tokenId] == true) continue;\\n            bool flowering = ERC721(cryptorchidsERC721).flowering(tokenId);\\n            if (!flowering) continue;\\n\\n            (, uint256 plantedAt, , ) = ERC721(cryptorchidsERC721).getTokenMetadata(tokenId);\\n            uint256 rebate = tokenRebate(tokenId);\\n\\n            if (plantedAt > promotionStart && rebateAmount + rebate <= safeBal) {\\n                eligibleTokens[index] = tokenId;\\n                rebateAmount += rebate;\\n            }\\n        }\\n\\n        return (eligibleTokens, rebateAmount);\\n    }\\n\\n    /** Claim ETH for valid tokens. Check for valid tokens before claming.\\n     * @dev calls checkEligibility and sets all eligibleTokens as redeemed.\\n     * Then transfers caller rebateAmount.\\n     */\\n    function redeem() public virtual returns (uint256) {\\n        uint256 tokenCount = ERC721(cryptorchidsERC721).balanceOf(msg.sender);\\n        uint256 safeBal = safeBalance();\\n        uint256 rebateAmount = 0;\\n\\n        for (uint256 index = 0; index < tokenCount; index++) {\\n            uint256 tokenId = ERC721(cryptorchidsERC721).tokenOfOwnerByIndex(msg.sender, index);\\n            if (redemptions[tokenId] == true) continue;\\n\\n            uint256 rebate = tokenRebate(tokenId);\\n            if (rebateAmount + rebate > safeBal) break;\\n\\n            bool flowering = ERC721(cryptorchidsERC721).flowering(tokenId);\\n            if (!flowering) continue;\\n\\n            (, uint256 plantedAt, , ) = ERC721(cryptorchidsERC721).getTokenMetadata(tokenId);\\n            if (plantedAt < promotionStart) continue;\\n\\n            rebateAmount += rebate;\\n            redemptions[tokenId] = true;\\n        }\\n\\n        require(rebateAmount > 0, \\\"Unpayable\\\");\\n        payable(msg.sender).transfer(rebateAmount);\\n\\n        return rebateAmount;\\n    }\\n\\n    /** Redeem tokens for entries in drawing.\\n     * @dev Adds address to drawingEntries, increments entriesCount, and\\n     * increases pot for each eligible token, while marking each token redeemed.\\n     */\\n    function enter() public virtual {\\n        uint256 tokenCount = ERC721(cryptorchidsERC721).balanceOf(msg.sender);\\n        uint256 safeBal = safeBalance();\\n        uint256 rebateAmount = 0;\\n\\n        for (uint256 index = 0; index < tokenCount; index++) {\\n            uint256 tokenId = ERC721(cryptorchidsERC721).tokenOfOwnerByIndex(msg.sender, index);\\n            if (redemptions[tokenId] == true) continue;\\n\\n            uint256 rebate = tokenRebate(tokenId);\\n            if (rebateAmount + rebate > safeBal) break;\\n\\n            bool flowering = ERC721(cryptorchidsERC721).flowering(tokenId);\\n            if (!flowering) continue;\\n\\n            (, uint256 plantedAt, , ) = ERC721(cryptorchidsERC721).getTokenMetadata(tokenId);\\n            if (plantedAt < promotionStart) continue;\\n\\n            rebateAmount += rebate;\\n            redemptions[tokenId] = true;\\n            drawingEntries.push(msg.sender);\\n        }\\n\\n        pot += rebateAmount;\\n    }\\n\\n    /** Current rebate amount for new, mintable token. Based on CryptOrchids current price,\\n     * the ramping rebate is intended to address the regrettable FOMO ramp pricing.\\n     * Starts at 0.02ETH, and increases with inverse correlation to price ramp to\\n     * offer effectively straight 0.04 ETH for seeds.\\n     * @dev calls CryptOrchids.currentPrice and finds difference with MINT_FLOOR to return rebate.\\n     */\\n    function setCurrentRebate() public {\\n        uint256 currentPrice = ERC721(cryptorchidsERC721).currentPrice();\\n\\n        if (currentPrice == MINT_FLOOR) {\\n            currentRebate = REBATE_AMOUNT;\\n            return;\\n        }\\n\\n        currentRebate = currentPrice - MINT_FLOOR;\\n    }\\n\\n    /** Redeemable rebate amount for existing token. Based on the price the token was sold at,\\n     * this prevents a seed holder from redeeming a seed for more than it was purchased for.\\n     * @dev Copies currentPrice and returns rebate amount for tokenId\\n     */\\n    function tokenRebate(uint256 tokenId) public pure returns (uint256) {\\n        if (tokenId > 9900) {\\n            return 1000000000000000000 - MINT_FLOOR; // 9900+: 0.960 ETH\\n        } else if (tokenId > 9500) {\\n            return 640000000000000000 - MINT_FLOOR; // 9500-9500:  0.60 ETH\\n        } else if (tokenId > 7500) {\\n            return 320000000000000000 - MINT_FLOOR; // 7500-9500:  0.28 ETH\\n        } else if (tokenId > 3500) {\\n            return 160000000000000000 - MINT_FLOOR; // 3500-7500:  0.12 ETH\\n        } else if (tokenId > 1500) {\\n            return 80000000000000000 - MINT_FLOOR; // 1500-3500:  0.04 ETH\\n        } else if (tokenId > 500) {\\n            return 60000000000000000 - MINT_FLOOR; // 500-1500:   0.02 ETH\\n        } else {\\n            return REBATE_AMOUNT; // 0 - 500     0.02 ETH\\n        }\\n    }\\n\\n    /** Current count of rebates available as determined by safeBalance and currentRebate\\n     */\\n    function rebatesAvailable() public view returns (uint256) {\\n        return SafeMath.div(safeBalance(), currentRebate);\\n    }\\n\\n    /** Current amount availble for refund or to be staked in raffle.\\n     */\\n    function safeBalance() internal view returns (uint256) {\\n        return (address(this).balance).sub(pot);\\n    }\\n\\n    /** Current amount availble for refund or to be staked in raffle.\\n     */\\n    function drawingEntriesCount() public view returns (uint256) {\\n        return drawingEntries.length;\\n    }\\n\\n    /** Current amount availble for refund or to be staked in raffle.\\n     */\\n    function addressEntriesCount() public view returns (uint256) {\\n        uint256 count = 0;\\n        for (uint256 index = 0; index < drawingEntries.length; index++) {\\n            if (drawingEntries[index] == msg.sender) {\\n                count += 1;\\n            }\\n        }\\n        return count;\\n    }\\n\\n    function selectWinner(uint256 userProvidedSeed) public virtual {\\n        require(currentTime() > promotionEnd, \\\"COC:wW:promotion running\\\");\\n        require(randomWinnerRequestId[0] == 0, \\\"COC:wW:winner requested\\\");\\n        require(LINK.balanceOf(address(this)) >= vrfFee, \\\"COC:sW:no LINK\\\");\\n\\n        randomWinnerRequestId = requestRandomness(keyHash, vrfFee, userProvidedSeed);\\n    }\\n\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        require(requestId == randomWinnerRequestId, \\\"COC:fR:invalid request ID\\\");\\n        uint256 winnerIndex = SafeMath.mod(randomness, drawingEntriesCount());\\n        winner = drawingEntries[winnerIndex];\\n    }\\n\\n    /** Winner may withdraw ether from the contract once the promotion is over.\\n     *\\n     */\\n    function withdrawWinner() public {\\n        require(currentTime() > promotionEnd, \\\"COC:wW:promotion running\\\");\\n        require(msg.sender == winner, \\\"COC:wW:not winner\\\");\\n\\n        uint256 winnings = pot;\\n        pot = 0;\\n\\n        payable(winner).transfer(winnings);\\n    }\\n\\n    /** Owner may reset the promotion to run again.\\n     *\\n     */\\n    function reset(uint256 newPromotionEnd) public onlyOwner {\\n        require(currentTime() > promotionEnd, \\\"COC:rst:promotion running\\\");\\n        require(pot == 0, \\\"COC:rst:winnings unclaimed\\\");\\n\\n        delete drawingEntries;\\n\\n        winnerRequested = false;\\n        randomWinnerRequestId = bytes32(0);\\n        winner = address(0);\\n\\n        pot = 0;\\n        promotionEnd = newPromotionEnd;\\n    }\\n\\n    /** Withdraw ether from this contract once the promotion is over.\\n     * @dev Transfer remaining balance to owner if after promotionEnd.\\n     *\\n     */\\n    function withdrawUnclaimed() public onlyOwner {\\n        require(currentTime() > promotionEnd, \\\"COC:wU:promotion running\\\");\\n        require(pot == 0, \\\"COC:wU:winnings unclaimed\\\");\\n\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x9467c75751d95a18f17092ecb442587f0ac8567fd639da1d5d561bb212d5b291\"},\"contracts/Interfaces/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6 <0.9.0;\\n\\ninterface ERC721 {\\n    enum Stage {Unsold, Seed, Flower, Dead}\\n\\n    struct CryptOrchid {\\n        string species;\\n        uint256 plantedAt;\\n        uint256 waterLevel;\\n    }\\n\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\n    ///  may be created and assigned without emitting Transfer. At the time of\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when the approved address for an NFT is changed or\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\n    ///  When a Transfer event emits, this also indicates that the approved\\n    ///  address for that NFT (if any) is reset to none.\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\n    ///  The operator can manage all NFTs of the owner.\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n    /// @notice Count all NFTs assigned to an owner\\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\\n    ///  function throws for queries about the zero address.\\n    /// @param _owner An address for whom to query the balance\\n    /// @return The number of NFTs owned by `_owner`, possibly zero\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Find the owner of an NFT\\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\\n    ///  about them do throw.\\n    /// @param _tokenId The identifier for an NFT\\n    /// @return The address of the owner of the NFT\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n    ///  `onERC721Received` on `_to` and throws if the return value is not\\n    ///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev This works identically to the other function with an extra data parameter,\\n    ///  except this function just sets data to \\\"\\\".\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external payable;\\n\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n    ///  THEY MAY BE PERMANENTLY LOST\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external payable;\\n\\n    /// @notice Change or reaffirm the approved address for an NFT\\n    /// @dev The zero address indicates there is no approved address.\\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\n    ///  operator of the current owner.\\n    /// @param _approved The new approved NFT controller\\n    /// @param _tokenId The NFT to approve\\n    function approve(address _approved, uint256 _tokenId) external payable;\\n\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\n    ///  all of `msg.sender`'s assets\\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\\n    ///  multiple operators per owner.\\n    /// @param _operator Address to add to the set of authorized operators\\n    /// @param _approved True if the operator is approved, false to revoke approval\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /// @notice Get the approved address for a single NFT\\n    /// @dev Throws if `_tokenId` is not a valid NFT.\\n    /// @param _tokenId The NFT to find the approved address for\\n    /// @return The approved address for this NFT, or the zero address if there is none\\n    function getApproved(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Query if an address is an authorized operator for another address\\n    /// @param _owner The address that owns the NFTs\\n    /// @param _operator The address that acts on behalf of the owner\\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n\\n    function flowering(uint256 tokenId) external view returns (bool);\\n\\n    function currentPrice() external view returns (uint256 price);\\n\\n    function getTokenMetadata(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            string memory,\\n            uint256,\\n            uint256,\\n            Stage\\n        );\\n}\\n\",\"keccak256\":\"0x401d250b0c98f4cc3dfdef4d1c3b1f56b5e68143dee5e837d861101b0eb0d332\"},\"contracts/Libraries/CurrentTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.6 <0.9.0;\\n\\ncontract CurrentTime {\\n    function currentTime() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xa9a311d0f67d3d7aabd318210bed7051401151fa5f45e75071d7a52c50214cee\"}},\"version\":1}",
  "bytecode": "0x60c06040526040516121753803806121758339818101604052608081101561002657600080fd5b5080516020820151604083015160609093015191929091828260006100526001600160e01b0361012016565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160601b0319606092831b811660a052911b16608052600d80546001600160a01b039485166001600160a01b031991821617909155600e805493851693821693909317909255600b55671bc16d674ec80000600c5560068054939092169216919091179055426004556360b5b0c060055566470de4df820000600355610124565b3390565b60805160601c60a05160601c61201e61015760003980610f6d5280611bfd525080610cd45280611bce525061201e6000f3fe6080604052600436106101a55760003560e01c806392a9b1fe116100e1578063dd32858e1161008a578063e97dcb6211610064578063e97dcb6214610478578063edf5b9641461048d578063f2fde38b146104a2578063f85f3b88146104d5576101ac565b8063dd32858e14610424578063de4672c214610439578063dfbf53ae14610463576101ac565b8063b8fa4f02116100bb578063b8fa4f02146103e5578063be040fb0146103fa578063dc7aafba1461040f576101ac565b806392a9b1fe1461038b57806394985ddd146103a0578063aec19021146103d0576101ac565b80634ba2363a1161014e57806350653369116101285780635065336914610337578063715018a61461034c578063837971c4146103615780638da5cb5b14610376576101ac565b80634ba2363a146102e35780634c524be4146102f85780634f8e2fdf14610322576101ac565b806333b608631161017f57806333b608631461027457806333fc56d9146102a55780633ca0e52c146102ba576101ac565b8063049e45d7146101b15780632d997fce14610221578063310bd74b14610248576101ac565b366101ac57005b600080fd5b3480156101bd57600080fd5b506101c66104ea565b6040518080602001838152602001828103825284818151815260200191508051906020019060200280838360005b8381101561020c5781810151838201526020016101f4565b50505050905001935050505060405180910390f35b34801561022d57600080fd5b50610236610886565b60408051918252519081900360200190f35b34801561025457600080fd5b506102726004803603602081101561026b57600080fd5b50356108a1565b005b34801561028057600080fd5b50610289610a0d565b604080516001600160a01b039092168252519081900360200190f35b3480156102b157600080fd5b50610272610a1c565b3480156102c657600080fd5b506102cf610b71565b604080519115158252519081900360200190f35b3480156102ef57600080fd5b50610236610bd1565b34801561030457600080fd5b506102726004803603602081101561031b57600080fd5b5035610bd7565b34801561032e57600080fd5b50610289610dae565b34801561034357600080fd5b506102cf610dbd565b34801561035857600080fd5b50610272610dc6565b34801561036d57600080fd5b50610236610e91565b34801561038257600080fd5b50610289610e97565b34801561039757600080fd5b50610272610ea6565b3480156103ac57600080fd5b50610272600480360360408110156103c357600080fd5b5080359060200135610f62565b3480156103dc57600080fd5b50610289610fed565b3480156103f157600080fd5b50610236610ffc565b34801561040657600080fd5b50610236611002565b34801561041b57600080fd5b506102366113e9565b34801561043057600080fd5b506102726113ef565b34801561044557600080fd5b506102366004803603602081101561045c57600080fd5b50356114f9565b34801561046f57600080fd5b5061028961159e565b34801561048457600080fd5b506102726115b2565b34801561049957600080fd5b50610236611966565b3480156104ae57600080fd5b50610272600480360360208110156104c557600080fd5b50356001600160a01b03166119bc565b3480156104e157600080fd5b50610236611add565b600654604080516370a0823160e01b8152336004820152905160609260009283926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561053d57600080fd5b505afa158015610551573d6000803e3d6000fd5b505050506040513d602081101561056757600080fd5b505190508067ffffffffffffffff8111801561058257600080fd5b506040519080825280602002602001820160405280156105ac578160200160208202803683370190505b50925060006105b9611ae3565b905060005b8281101561087f5760065460408051632f745c5960e01b81523360048201526024810184905290516000926001600160a01b031691632f745c59916044808301926020929190829003018186803b15801561061857600080fd5b505afa15801561062c573d6000803e3d6000fd5b505050506040513d602081101561064257600080fd5b505160008181526002602052604090205490915060ff161515600114156106695750610877565b6006546040805163182199cd60e01b81526004810184905290516000926001600160a01b03169163182199cd916024808301926020929190829003018186803b1580156106b557600080fd5b505afa1580156106c9573d6000803e3d6000fd5b505050506040513d60208110156106df57600080fd5b50519050806106ef575050610877565b60065460408051636031680160e01b81526004810185905290516000926001600160a01b03169163603168019160248083019286929190829003018186803b15801561073a57600080fd5b505afa15801561074e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052608081101561077757600080fd5b810190808051604051939291908464010000000082111561079757600080fd5b9083019060208201858111156107ac57600080fd5b82516401000000008111828201881017156107c657600080fd5b82525081516020918201929091019080838360005b838110156107f35781810151838201526020016107db565b50505050905090810190601f1680156108205780820380516001836020036101000a031916815260200191505b506040526020015193506000925061083b91508590506114f9565b90506004548211801561085057508581890111155b15610872578389868151811061086257fe5b6020908102919091010152968701965b505050505b6001016105be565b5050509091565b600061089b610893611ae3565b600354611afa565b90505b90565b6108a9611b61565b6001600160a01b03166108ba610e97565b6001600160a01b031614610915576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600554610920611b65565b11610972576040805162461bcd60e51b815260206004820152601960248201527f434f433a7273743a70726f6d6f74696f6e2072756e6e696e6700000000000000604482015290519081900360640190fd5b600754156109c7576040805162461bcd60e51b815260206004820152601a60248201527f434f433a7273743a77696e6e696e677320756e636c61696d6564000000000000604482015290519081900360640190fd5b6109d360086000611f8b565b600a8054600060098190557fffffffffffffffffffffff000000000000000000000000000000000000000000909116909155600755600555565b600d546001600160a01b031681565b610a24611b61565b6001600160a01b0316610a35610e97565b6001600160a01b031614610a90576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600554610a9b611b65565b11610aed576040805162461bcd60e51b815260206004820152601860248201527f434f433a77553a70726f6d6f74696f6e2072756e6e696e670000000000000000604482015290519081900360640190fd5b60075415610b42576040805162461bcd60e51b815260206004820152601960248201527f434f433a77553a77696e6e696e677320756e636c61696d656400000000000000604482015290519081900360640190fd5b60405133904780156108fc02916000818181858888f19350505050158015610b6e573d6000803e3d6000fd5b50565b6000600554610b7e611b65565b1115610b8c5750600061089e565b6003544790610ba290829063ffffffff611b6916565b6007541115610bb557600091505061089e565b806003541115610bc957600091505061089e565b600191505090565b60075481565b600554610be2611b65565b11610c34576040805162461bcd60e51b815260206004820152601860248201527f434f433a77573a70726f6d6f74696f6e2072756e6e696e670000000000000000604482015290519081900360640190fd5b60095460001a60f81b7fff000000000000000000000000000000000000000000000000000000000000001615610cb1576040805162461bcd60e51b815260206004820152601760248201527f434f433a77573a77696e6e657220726571756573746564000000000000000000604482015290519081900360640190fd5b600c54604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b158015610d1a57600080fd5b505afa158015610d2e573d6000803e3d6000fd5b505050506040513d6020811015610d4457600080fd5b50511015610d99576040805162461bcd60e51b815260206004820152600e60248201527f434f433a73573a6e6f204c494e4b000000000000000000000000000000000000604482015290519081900360640190fd5b610da8600b54600c5483611bca565b60095550565b600e546001600160a01b031681565b600a5460ff1681565b610dce611b61565b6001600160a01b0316610ddf610e97565b6001600160a01b031614610e3a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60055481565b6000546001600160a01b031690565b600654604080517f9d1b464a00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691639d1b464a916004808301926020929190829003018186803b158015610f0457600080fd5b505afa158015610f18573d6000803e3d6000fd5b505050506040513d6020811015610f2e57600080fd5b50519050668e1bc9bf040000811415610f52575066470de4df820000600355610f60565b668e1bc9bf03ffff19016003555b565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610fdf576040805162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604482015290519081900360640190fd5b610fe98282611d8e565b5050565b6006546001600160a01b031681565b60085490565b600654604080516370a0823160e01b8152336004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561105257600080fd5b505afa158015611066573d6000803e3d6000fd5b505050506040513d602081101561107c57600080fd5b50519050600061108a611ae3565b90506000805b8381101561135e5760065460408051632f745c5960e01b81523360048201526024810184905290516000926001600160a01b031691632f745c59916044808301926020929190829003018186803b1580156110ea57600080fd5b505afa1580156110fe573d6000803e3d6000fd5b505050506040513d602081101561111457600080fd5b505160008181526002602052604090205490915060ff1615156001141561113b5750611356565b6000611146826114f9565b905084818501111561115957505061135e565b6006546040805163182199cd60e01b81526004810185905290516000926001600160a01b03169163182199cd916024808301926020929190829003018186803b1580156111a557600080fd5b505afa1580156111b9573d6000803e3d6000fd5b505050506040513d60208110156111cf57600080fd5b50519050806111e057505050611356565b60065460408051636031680160e01b81526004810186905290516000926001600160a01b03169163603168019160248083019286929190829003018186803b15801561122b57600080fd5b505afa15801561123f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052608081101561126857600080fd5b810190808051604051939291908464010000000082111561128857600080fd5b90830190602082018581111561129d57600080fd5b82516401000000008111828201881017156112b757600080fd5b82525081516020918201929091019080838360005b838110156112e45781810151838201526020016112cc565b50505050905090810190601f1680156113115780820380516001836020036101000a031916815260200191505b506040526020015160045490945084101592506113349150505750505050611356565b5050600091825260026020526040909120805460ff1916600117905591909101905b600101611090565b50600081116113b4576040805162461bcd60e51b815260206004820152600960248201527f556e70617961626c650000000000000000000000000000000000000000000000604482015290519081900360640190fd5b604051339082156108fc029083906000818181858888f193505050501580156113e1573d6000803e3d6000fd5b509250505090565b60035481565b6005546113fa611b65565b1161144c576040805162461bcd60e51b815260206004820152601860248201527f434f433a77573a70726f6d6f74696f6e2072756e6e696e670000000000000000604482015290519081900360640190fd5b600a5461010090046001600160a01b031633146114b0576040805162461bcd60e51b815260206004820152601160248201527f434f433a77573a6e6f742077696e6e6572000000000000000000000000000000604482015290519081900360640190fd5b60078054600091829055600a5460405191926101009091046001600160a01b0316916108fc84150291849190818181858888f19350505050158015610fe9573d6000803e3d6000fd5b60006126ac8211156115145750670d529ae9e8600000611599565b61251c82111561152d5750670853a0d2313c0000611599565b611d4c82111561154657506703e2c284391c0000611599565b610dac82111561155f57506701aa535d3d0c0000611599565b6105dc8211156115775750668e1bc9bf040000611599565b6101f482111561158f575066470de4df820000611599565b5066470de4df8200005b919050565b600a5461010090046001600160a01b031681565b600654604080516370a0823160e01b815233600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156115fd57600080fd5b505afa158015611611573d6000803e3d6000fd5b505050506040513d602081101561162757600080fd5b505190506000611635611ae3565b90506000805b838110156119585760065460408051632f745c5960e01b81523360048201526024810184905290516000926001600160a01b031691632f745c59916044808301926020929190829003018186803b15801561169557600080fd5b505afa1580156116a9573d6000803e3d6000fd5b505050506040513d60208110156116bf57600080fd5b505160008181526002602052604090205490915060ff161515600114156116e65750611950565b60006116f1826114f9565b9050848185011115611704575050611958565b6006546040805163182199cd60e01b81526004810185905290516000926001600160a01b03169163182199cd916024808301926020929190829003018186803b15801561175057600080fd5b505afa158015611764573d6000803e3d6000fd5b505050506040513d602081101561177a57600080fd5b505190508061178b57505050611950565b60065460408051636031680160e01b81526004810186905290516000926001600160a01b03169163603168019160248083019286929190829003018186803b1580156117d657600080fd5b505afa1580156117ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052608081101561181357600080fd5b810190808051604051939291908464010000000082111561183357600080fd5b90830190602082018581111561184857600080fd5b825164010000000081118282018810171561186257600080fd5b82525081516020918201929091019080838360005b8381101561188f578181015183820152602001611877565b50505050905090810190601f1680156118bc5780820380516001836020036101000a031916815260200191505b506040526020015160045490945084101592506118df9150505750505050611950565b50506000918252600260205260408220805460ff191660019081179091556008805491820181559092527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3909101805473ffffffffffffffffffffffffffffffffffffffff19163317905591909101905b60010161163b565b506007805490910190555050565b600080805b6008548110156119b657336001600160a01b03166008828154811061198c57fe5b6000918252602090912001546001600160a01b031614156119ae576001820191505b60010161196b565b50905090565b6119c4611b61565b6001600160a01b03166119d5610e97565b6001600160a01b031614611a30576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116611a755760405162461bcd60e51b8152600401808060200182810382526026815260200180611fc36026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60045481565b600061089b60075447611e5490919063ffffffff16565b6000808211611b50576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611b5957fe5b049392505050565b3390565b4290565b600082820183811015611bc3576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f000000000000000000000000000000000000000000000000000000000000000085878660405160200180838152602001828152602001925050506040516020818303038152906040526040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611caf578181015183820152602001611c97565b50505050905090810190601f168015611cdc5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015611cfd57600080fd5b505af1158015611d11573d6000803e3d6000fd5b505050506040513d6020811015611d2757600080fd5b5050600084815260016020526040812054611d4790869085903090611eb1565b600086815260016020819052604090912054919250611d6c919063ffffffff611b6916565b600086815260016020526040902055611d858582611ef8565b95945050505050565b6009548214611de4576040805162461bcd60e51b815260206004820152601960248201527f434f433a66523a696e76616c6964207265717565737420494400000000000000604482015290519081900360640190fd5b6000611df782611df2610ffc565b611f24565b905060088181548110611e0657fe5b600091825260209091200154600a80546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055505050565b600082821115611eab576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60408051602080820196909652808201949094526001600160a01b039290921660608401526080808401919091528151808403909101815260a09092019052805191012090565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6000808211611f7a576040805162461bcd60e51b815260206004820152601860248201527f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000604482015290519081900360640190fd5b818381611f8357fe5b069392505050565b5080546000825590600052602060002090810190610b6e919061089e91905b80821115611fbe5760008155600101611faa565b509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220bef5e7193b2fe9fb7cdb9a37c0b77aa77c5238ef570d0d3770f2fec4183633bf64736f6c63430006060033",
  "deployedBytecode": "0x6080604052600436106101a55760003560e01c806392a9b1fe116100e1578063dd32858e1161008a578063e97dcb6211610064578063e97dcb6214610478578063edf5b9641461048d578063f2fde38b146104a2578063f85f3b88146104d5576101ac565b8063dd32858e14610424578063de4672c214610439578063dfbf53ae14610463576101ac565b8063b8fa4f02116100bb578063b8fa4f02146103e5578063be040fb0146103fa578063dc7aafba1461040f576101ac565b806392a9b1fe1461038b57806394985ddd146103a0578063aec19021146103d0576101ac565b80634ba2363a1161014e57806350653369116101285780635065336914610337578063715018a61461034c578063837971c4146103615780638da5cb5b14610376576101ac565b80634ba2363a146102e35780634c524be4146102f85780634f8e2fdf14610322576101ac565b806333b608631161017f57806333b608631461027457806333fc56d9146102a55780633ca0e52c146102ba576101ac565b8063049e45d7146101b15780632d997fce14610221578063310bd74b14610248576101ac565b366101ac57005b600080fd5b3480156101bd57600080fd5b506101c66104ea565b6040518080602001838152602001828103825284818151815260200191508051906020019060200280838360005b8381101561020c5781810151838201526020016101f4565b50505050905001935050505060405180910390f35b34801561022d57600080fd5b50610236610886565b60408051918252519081900360200190f35b34801561025457600080fd5b506102726004803603602081101561026b57600080fd5b50356108a1565b005b34801561028057600080fd5b50610289610a0d565b604080516001600160a01b039092168252519081900360200190f35b3480156102b157600080fd5b50610272610a1c565b3480156102c657600080fd5b506102cf610b71565b604080519115158252519081900360200190f35b3480156102ef57600080fd5b50610236610bd1565b34801561030457600080fd5b506102726004803603602081101561031b57600080fd5b5035610bd7565b34801561032e57600080fd5b50610289610dae565b34801561034357600080fd5b506102cf610dbd565b34801561035857600080fd5b50610272610dc6565b34801561036d57600080fd5b50610236610e91565b34801561038257600080fd5b50610289610e97565b34801561039757600080fd5b50610272610ea6565b3480156103ac57600080fd5b50610272600480360360408110156103c357600080fd5b5080359060200135610f62565b3480156103dc57600080fd5b50610289610fed565b3480156103f157600080fd5b50610236610ffc565b34801561040657600080fd5b50610236611002565b34801561041b57600080fd5b506102366113e9565b34801561043057600080fd5b506102726113ef565b34801561044557600080fd5b506102366004803603602081101561045c57600080fd5b50356114f9565b34801561046f57600080fd5b5061028961159e565b34801561048457600080fd5b506102726115b2565b34801561049957600080fd5b50610236611966565b3480156104ae57600080fd5b50610272600480360360208110156104c557600080fd5b50356001600160a01b03166119bc565b3480156104e157600080fd5b50610236611add565b600654604080516370a0823160e01b8152336004820152905160609260009283926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561053d57600080fd5b505afa158015610551573d6000803e3d6000fd5b505050506040513d602081101561056757600080fd5b505190508067ffffffffffffffff8111801561058257600080fd5b506040519080825280602002602001820160405280156105ac578160200160208202803683370190505b50925060006105b9611ae3565b905060005b8281101561087f5760065460408051632f745c5960e01b81523360048201526024810184905290516000926001600160a01b031691632f745c59916044808301926020929190829003018186803b15801561061857600080fd5b505afa15801561062c573d6000803e3d6000fd5b505050506040513d602081101561064257600080fd5b505160008181526002602052604090205490915060ff161515600114156106695750610877565b6006546040805163182199cd60e01b81526004810184905290516000926001600160a01b03169163182199cd916024808301926020929190829003018186803b1580156106b557600080fd5b505afa1580156106c9573d6000803e3d6000fd5b505050506040513d60208110156106df57600080fd5b50519050806106ef575050610877565b60065460408051636031680160e01b81526004810185905290516000926001600160a01b03169163603168019160248083019286929190829003018186803b15801561073a57600080fd5b505afa15801561074e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052608081101561077757600080fd5b810190808051604051939291908464010000000082111561079757600080fd5b9083019060208201858111156107ac57600080fd5b82516401000000008111828201881017156107c657600080fd5b82525081516020918201929091019080838360005b838110156107f35781810151838201526020016107db565b50505050905090810190601f1680156108205780820380516001836020036101000a031916815260200191505b506040526020015193506000925061083b91508590506114f9565b90506004548211801561085057508581890111155b15610872578389868151811061086257fe5b6020908102919091010152968701965b505050505b6001016105be565b5050509091565b600061089b610893611ae3565b600354611afa565b90505b90565b6108a9611b61565b6001600160a01b03166108ba610e97565b6001600160a01b031614610915576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600554610920611b65565b11610972576040805162461bcd60e51b815260206004820152601960248201527f434f433a7273743a70726f6d6f74696f6e2072756e6e696e6700000000000000604482015290519081900360640190fd5b600754156109c7576040805162461bcd60e51b815260206004820152601a60248201527f434f433a7273743a77696e6e696e677320756e636c61696d6564000000000000604482015290519081900360640190fd5b6109d360086000611f8b565b600a8054600060098190557fffffffffffffffffffffff000000000000000000000000000000000000000000909116909155600755600555565b600d546001600160a01b031681565b610a24611b61565b6001600160a01b0316610a35610e97565b6001600160a01b031614610a90576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600554610a9b611b65565b11610aed576040805162461bcd60e51b815260206004820152601860248201527f434f433a77553a70726f6d6f74696f6e2072756e6e696e670000000000000000604482015290519081900360640190fd5b60075415610b42576040805162461bcd60e51b815260206004820152601960248201527f434f433a77553a77696e6e696e677320756e636c61696d656400000000000000604482015290519081900360640190fd5b60405133904780156108fc02916000818181858888f19350505050158015610b6e573d6000803e3d6000fd5b50565b6000600554610b7e611b65565b1115610b8c5750600061089e565b6003544790610ba290829063ffffffff611b6916565b6007541115610bb557600091505061089e565b806003541115610bc957600091505061089e565b600191505090565b60075481565b600554610be2611b65565b11610c34576040805162461bcd60e51b815260206004820152601860248201527f434f433a77573a70726f6d6f74696f6e2072756e6e696e670000000000000000604482015290519081900360640190fd5b60095460001a60f81b7fff000000000000000000000000000000000000000000000000000000000000001615610cb1576040805162461bcd60e51b815260206004820152601760248201527f434f433a77573a77696e6e657220726571756573746564000000000000000000604482015290519081900360640190fd5b600c54604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b158015610d1a57600080fd5b505afa158015610d2e573d6000803e3d6000fd5b505050506040513d6020811015610d4457600080fd5b50511015610d99576040805162461bcd60e51b815260206004820152600e60248201527f434f433a73573a6e6f204c494e4b000000000000000000000000000000000000604482015290519081900360640190fd5b610da8600b54600c5483611bca565b60095550565b600e546001600160a01b031681565b600a5460ff1681565b610dce611b61565b6001600160a01b0316610ddf610e97565b6001600160a01b031614610e3a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60055481565b6000546001600160a01b031690565b600654604080517f9d1b464a00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691639d1b464a916004808301926020929190829003018186803b158015610f0457600080fd5b505afa158015610f18573d6000803e3d6000fd5b505050506040513d6020811015610f2e57600080fd5b50519050668e1bc9bf040000811415610f52575066470de4df820000600355610f60565b668e1bc9bf03ffff19016003555b565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610fdf576040805162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604482015290519081900360640190fd5b610fe98282611d8e565b5050565b6006546001600160a01b031681565b60085490565b600654604080516370a0823160e01b8152336004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561105257600080fd5b505afa158015611066573d6000803e3d6000fd5b505050506040513d602081101561107c57600080fd5b50519050600061108a611ae3565b90506000805b8381101561135e5760065460408051632f745c5960e01b81523360048201526024810184905290516000926001600160a01b031691632f745c59916044808301926020929190829003018186803b1580156110ea57600080fd5b505afa1580156110fe573d6000803e3d6000fd5b505050506040513d602081101561111457600080fd5b505160008181526002602052604090205490915060ff1615156001141561113b5750611356565b6000611146826114f9565b905084818501111561115957505061135e565b6006546040805163182199cd60e01b81526004810185905290516000926001600160a01b03169163182199cd916024808301926020929190829003018186803b1580156111a557600080fd5b505afa1580156111b9573d6000803e3d6000fd5b505050506040513d60208110156111cf57600080fd5b50519050806111e057505050611356565b60065460408051636031680160e01b81526004810186905290516000926001600160a01b03169163603168019160248083019286929190829003018186803b15801561122b57600080fd5b505afa15801561123f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052608081101561126857600080fd5b810190808051604051939291908464010000000082111561128857600080fd5b90830190602082018581111561129d57600080fd5b82516401000000008111828201881017156112b757600080fd5b82525081516020918201929091019080838360005b838110156112e45781810151838201526020016112cc565b50505050905090810190601f1680156113115780820380516001836020036101000a031916815260200191505b506040526020015160045490945084101592506113349150505750505050611356565b5050600091825260026020526040909120805460ff1916600117905591909101905b600101611090565b50600081116113b4576040805162461bcd60e51b815260206004820152600960248201527f556e70617961626c650000000000000000000000000000000000000000000000604482015290519081900360640190fd5b604051339082156108fc029083906000818181858888f193505050501580156113e1573d6000803e3d6000fd5b509250505090565b60035481565b6005546113fa611b65565b1161144c576040805162461bcd60e51b815260206004820152601860248201527f434f433a77573a70726f6d6f74696f6e2072756e6e696e670000000000000000604482015290519081900360640190fd5b600a5461010090046001600160a01b031633146114b0576040805162461bcd60e51b815260206004820152601160248201527f434f433a77573a6e6f742077696e6e6572000000000000000000000000000000604482015290519081900360640190fd5b60078054600091829055600a5460405191926101009091046001600160a01b0316916108fc84150291849190818181858888f19350505050158015610fe9573d6000803e3d6000fd5b60006126ac8211156115145750670d529ae9e8600000611599565b61251c82111561152d5750670853a0d2313c0000611599565b611d4c82111561154657506703e2c284391c0000611599565b610dac82111561155f57506701aa535d3d0c0000611599565b6105dc8211156115775750668e1bc9bf040000611599565b6101f482111561158f575066470de4df820000611599565b5066470de4df8200005b919050565b600a5461010090046001600160a01b031681565b600654604080516370a0823160e01b815233600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156115fd57600080fd5b505afa158015611611573d6000803e3d6000fd5b505050506040513d602081101561162757600080fd5b505190506000611635611ae3565b90506000805b838110156119585760065460408051632f745c5960e01b81523360048201526024810184905290516000926001600160a01b031691632f745c59916044808301926020929190829003018186803b15801561169557600080fd5b505afa1580156116a9573d6000803e3d6000fd5b505050506040513d60208110156116bf57600080fd5b505160008181526002602052604090205490915060ff161515600114156116e65750611950565b60006116f1826114f9565b9050848185011115611704575050611958565b6006546040805163182199cd60e01b81526004810185905290516000926001600160a01b03169163182199cd916024808301926020929190829003018186803b15801561175057600080fd5b505afa158015611764573d6000803e3d6000fd5b505050506040513d602081101561177a57600080fd5b505190508061178b57505050611950565b60065460408051636031680160e01b81526004810186905290516000926001600160a01b03169163603168019160248083019286929190829003018186803b1580156117d657600080fd5b505afa1580156117ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052608081101561181357600080fd5b810190808051604051939291908464010000000082111561183357600080fd5b90830190602082018581111561184857600080fd5b825164010000000081118282018810171561186257600080fd5b82525081516020918201929091019080838360005b8381101561188f578181015183820152602001611877565b50505050905090810190601f1680156118bc5780820380516001836020036101000a031916815260200191505b506040526020015160045490945084101592506118df9150505750505050611950565b50506000918252600260205260408220805460ff191660019081179091556008805491820181559092527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3909101805473ffffffffffffffffffffffffffffffffffffffff19163317905591909101905b60010161163b565b506007805490910190555050565b600080805b6008548110156119b657336001600160a01b03166008828154811061198c57fe5b6000918252602090912001546001600160a01b031614156119ae576001820191505b60010161196b565b50905090565b6119c4611b61565b6001600160a01b03166119d5610e97565b6001600160a01b031614611a30576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116611a755760405162461bcd60e51b8152600401808060200182810382526026815260200180611fc36026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60045481565b600061089b60075447611e5490919063ffffffff16565b6000808211611b50576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611b5957fe5b049392505050565b3390565b4290565b600082820183811015611bc3576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f000000000000000000000000000000000000000000000000000000000000000085878660405160200180838152602001828152602001925050506040516020818303038152906040526040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611caf578181015183820152602001611c97565b50505050905090810190601f168015611cdc5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015611cfd57600080fd5b505af1158015611d11573d6000803e3d6000fd5b505050506040513d6020811015611d2757600080fd5b5050600084815260016020526040812054611d4790869085903090611eb1565b600086815260016020819052604090912054919250611d6c919063ffffffff611b6916565b600086815260016020526040902055611d858582611ef8565b95945050505050565b6009548214611de4576040805162461bcd60e51b815260206004820152601960248201527f434f433a66523a696e76616c6964207265717565737420494400000000000000604482015290519081900360640190fd5b6000611df782611df2610ffc565b611f24565b905060088181548110611e0657fe5b600091825260209091200154600a80546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055505050565b600082821115611eab576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60408051602080820196909652808201949094526001600160a01b039290921660608401526080808401919091528151808403909101815260a09092019052805191012090565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6000808211611f7a576040805162461bcd60e51b815260206004820152601860248201527f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000604482015290519081900360640190fd5b818381611f8357fe5b069392505050565b5080546000825590600052602060002090810190610b6e919061089e91905b80821115611fbe5760008155600101611faa565b509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220bef5e7193b2fe9fb7cdb9a37c0b77aa77c5238ef570d0d3770f2fec4183633bf64736f6c63430006060033",
  "devdoc": {
    "methods": {
      "checkEligibility()": {
        "details": "calls public functions on the CryptOrchids contract to build an array of eligible token IDs and a rebate amount.",
        "returns": {
          "eligibleTokens": "uint256[] Uncompacted array of 0s and eligible token IDs",
          "rebateAmount": "uint256 Eligible tokens * currentRebate"
        }
      },
      "enter()": {
        "details": "Adds address to drawingEntries, increments entriesCount, and increases pot for each eligible token, while marking each token redeemed."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "promotionOpen()": {
        "details": "@return bool Whether promotion is open for entries."
      },
      "redeem()": {
        "details": "calls checkEligibility and sets all eligibleTokens as redeemed. Then transfers caller rebateAmount."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCurrentRebate()": {
        "details": "calls CryptOrchids.currentPrice and finds difference with MINT_FLOOR to return rebate."
      },
      "tokenRebate(uint256)": {
        "details": "Copies currentPrice and returns rebate amount for tokenId"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawUnclaimed()": {
        "details": "Transfer remaining balance to owner if after promotionEnd.     "
      }
    }
  },
  "userdoc": {
    "methods": {
      "addressEntriesCount()": {
        "notice": "Current amount availble for refund or to be staked in raffle."
      },
      "checkEligibility()": {
        "notice": "Check rebate value and eligible tokens. Tokens are valid if they are planted after this contract is deployed, alive, and not yet redeemed."
      },
      "drawingEntriesCount()": {
        "notice": "Current amount availble for refund or to be staked in raffle."
      },
      "enter()": {
        "notice": "Redeem tokens for entries in drawing."
      },
      "promotionOpen()": {
        "notice": "Public function for whether the promotion is open. The promotion is only open if the contract balance is greater than the currentRebate. Displayed on CryptOrchids nursery for transparency."
      },
      "rebatesAvailable()": {
        "notice": "Current count of rebates available as determined by safeBalance and currentRebate"
      },
      "redeem()": {
        "notice": "Claim ETH for valid tokens. Check for valid tokens before claming."
      },
      "reset(uint256)": {
        "notice": "Owner may reset the promotion to run again.     "
      },
      "setCurrentRebate()": {
        "notice": "Current rebate amount for new, mintable token. Based on CryptOrchids current price, the ramping rebate is intended to address the regrettable FOMO ramp pricing. Starts at 0.02ETH, and increases with inverse correlation to price ramp to offer effectively straight 0.04 ETH for seeds."
      },
      "tokenRebate(uint256)": {
        "notice": "Redeemable rebate amount for existing token. Based on the price the token was sold at, this prevents a seed holder from redeeming a seed for more than it was purchased for."
      },
      "withdrawUnclaimed()": {
        "notice": "Withdraw ether from this contract once the promotion is over."
      },
      "withdrawWinner()": {
        "notice": "Winner may withdraw ether from the contract once the promotion is over.     "
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 814,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 81,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "nonces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 4893,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "redemptions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 4901,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "currentRebate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4903,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "promotionStart",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4905,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "promotionEnd",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4907,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "cryptorchidsERC721",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4909,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "pot",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4912,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "drawingEntries",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4914,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "randomWinnerRequestId",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes32"
      },
      {
        "astId": 4916,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "winnerRequested",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 4918,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "winner",
        "offset": 1,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 4920,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "keyHash",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 4922,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "vrfFee",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4924,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "VRFCoordinator",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 4926,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "LinkToken",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}