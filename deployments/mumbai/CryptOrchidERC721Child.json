{
  "address": "0xdAa17ECcBdA217DE434fefeB1c4f5a0596d3c39f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "childChainManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxChild",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "relayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "metaData",
          "type": "bytes"
        }
      ],
      "name": "TransferWithMetadata",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "WithdrawnBatch",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BATCH_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC712_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GROWTH_CYCLE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_CRYPTORCHIDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WATERING_WINDOW",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "alive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cryptorchids",
      "outputs": [
        {
          "internalType": "string",
          "name": "species",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "plantedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "waterLevel",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "depositData",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "encodeTokenMetadata",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "executeMetaTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "flowering",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRootTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userProvidedSeed",
          "type": "uint256"
        }
      ],
      "name": "germinate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeperator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum CryptOrchidGoerli.Stage",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "growthStage",
      "outputs": [
        {
          "internalType": "enum CryptOrchidGoerli.Stage",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stateId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rootMessageSender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "processMessageFromRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "sendMessageToRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxRootTunnel",
          "type": "address"
        }
      ],
      "name": "setFxRootTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startGrowing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "water",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "units",
          "type": "uint256"
        }
      ],
      "name": "webMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawWithMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3a89ac2a0757bfaee2c6ae8ff1d46aa87f5f70ba988f8e6eebb63dfa68921ad4",
  "receipt": {
    "to": null,
    "from": "0x0090720FeD7Fed66eD658118b7B3BB0189D3A495",
    "contractAddress": "0xdAa17ECcBdA217DE434fefeB1c4f5a0596d3c39f",
    "transactionIndex": 0,
    "gasUsed": "9350337",
    "logsBloom": "0x00000004000000000000000000000000000000000001000000800000000000040000000000000000800400000000004000008000002001000000000000000000000000000000000000000000000000800001000000000000040100000000000000000000020000000000000000000800000000200000000080000000001002400000000000000000000000000000008010000000000000000000000000000000200000000000000000000000000000000000000000000800001040000000004000000000000000000001000000000002001000100000000100102000000020000000000000002000000000000000000000000400000000000000000000100000",
    "blockHash": "0xc6b50ea64310823b9734204edfe55216774a7641f0ab41cb0d0b2f08956f39b0",
    "transactionHash": "0x3a89ac2a0757bfaee2c6ae8ff1d46aa87f5f70ba988f8e6eebb63dfa68921ad4",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14358898,
        "transactionHash": "0x3a89ac2a0757bfaee2c6ae8ff1d46aa87f5f70ba988f8e6eebb63dfa68921ad4",
        "address": "0xdAa17ECcBdA217DE434fefeB1c4f5a0596d3c39f",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc6b50ea64310823b9734204edfe55216774a7641f0ab41cb0d0b2f08956f39b0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14358898,
        "transactionHash": "0x3a89ac2a0757bfaee2c6ae8ff1d46aa87f5f70ba988f8e6eebb63dfa68921ad4",
        "address": "0xdAa17ECcBdA217DE434fefeB1c4f5a0596d3c39f",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xc6b50ea64310823b9734204edfe55216774a7641f0ab41cb0d0b2f08956f39b0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14358898,
        "transactionHash": "0x3a89ac2a0757bfaee2c6ae8ff1d46aa87f5f70ba988f8e6eebb63dfa68921ad4",
        "address": "0xdAa17ECcBdA217DE434fefeB1c4f5a0596d3c39f",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xc6b50ea64310823b9734204edfe55216774a7641f0ab41cb0d0b2f08956f39b0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14358898,
        "transactionHash": "0x3a89ac2a0757bfaee2c6ae8ff1d46aa87f5f70ba988f8e6eebb63dfa68921ad4",
        "address": "0xdAa17ECcBdA217DE434fefeB1c4f5a0596d3c39f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xc6b50ea64310823b9734204edfe55216774a7641f0ab41cb0d0b2f08956f39b0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14358898,
        "transactionHash": "0x3a89ac2a0757bfaee2c6ae8ff1d46aa87f5f70ba988f8e6eebb63dfa68921ad4",
        "address": "0xdAa17ECcBdA217DE434fefeB1c4f5a0596d3c39f",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a9",
          "0x000000000000000000000000b5505a6d998549090530911180f38ac5130101c6",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xc6b50ea64310823b9734204edfe55216774a7641f0ab41cb0d0b2f08956f39b0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14358898,
        "transactionHash": "0x3a89ac2a0757bfaee2c6ae8ff1d46aa87f5f70ba988f8e6eebb63dfa68921ad4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000014c30d1d226e40000000000000000000000000000000000000000000000000002977e574e4ba60000000000000000000000000000000000000000000000007496925ae5992e7d08000000000000000000000000000000000000000000000000014b4d857c24c20000000000000000000000000000000000000000000000007497de8bb76b556108",
        "logIndex": 5,
        "blockHash": "0xc6b50ea64310823b9734204edfe55216774a7641f0ab41cb0d0b2f08956f39b0"
      }
    ],
    "blockNumber": 14358898,
    "cumulativeGasUsed": "9350337",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb5505a6d998549090530911180f38aC5130101c6",
    "0xCf73231F28B7331BBe3124B907840A94851f9f11"
  ],
  "solcInputHash": "4f9b70493defebe2f15081e93e9ddfbb",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childChainManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxChild\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metaData\",\"type\":\"bytes\"}],\"name\":\"TransferWithMetadata\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"WithdrawnBatch\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BATCH_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GROWTH_CYCLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CRYPTORCHIDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WATERING_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"alive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cryptorchids\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"species\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"plantedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waterLevel\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"encodeTokenMetadata\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flowering\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRootTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userProvidedSeed\",\"type\":\"uint256\"}],\"name\":\"germinate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeperator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum CryptOrchidGoerli.Stage\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"growthStage\",\"outputs\":[{\"internalType\":\"enum CryptOrchidGoerli.Stage\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"sendMessageToRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"setFxRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startGrowing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"water\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"webMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawWithMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"baseURI()\":{\"details\":\"Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}.     * Requirements:     * - The caller must own `tokenId` or be an approved operator.\"},\"deposit(address,bytes)\":{\"details\":\"Should be callable only by ChildChainManager Should handle deposit by minting the required tokenId for user Make sure minting is done only by this function\",\"params\":{\"depositData\":\"abi encoded tokenId\",\"user\":\"user address for whom deposit is being done\"}},\"encodeTokenMetadata(uint256)\":{\"params\":{\"tokenId\":\"Token for which URI to be fetched\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(address)\":{\"details\":\"Creates a new token for `to`. Its token ID will be automatically assigned (and available on the emitted {IERC721-Transfer} event), and the token URI autogenerated based on the base URI passed at construction.     * See {ERC721-_mint}.     * Requirements:     * - the caller must have the `MINTER_ROLE`.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pause()\":{\"details\":\"Pauses all token transfers.     * See {ERC721Pausable} and {Pausable-_pause}.     * Requirements:     * - the caller must have the `PAUSER_ROLE`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpauses all token transfers.     * See {ERC721Pausable} and {Pausable-_unpause}.     * Requirements:     * - the caller must have the `PAUSER_ROLE`.\"},\"withdraw()\":{\"details\":\"Withdraw ether from this contract (Callable by owner only)\"},\"withdraw(uint256)\":{\"details\":\"Should burn user's token. This transaction will be verified when exiting on root chain\",\"params\":{\"tokenId\":\"tokenId to withdraw\"}},\"withdrawBatch(uint256[])\":{\"details\":\"Should burn user's tokens. This transaction will be verified when exiting on root chain\",\"params\":{\"tokenIds\":\"tokenId list to withdraw\"}},\"withdrawWithMetadata(uint256)\":{\"details\":\"Should handle withraw by burning user's token.     * This transaction will be verified when exiting on root chain\",\"params\":{\"tokenId\":\"tokenId to withdraw\"}}}},\"userdoc\":{\"methods\":{\"deposit(address,bytes)\":{\"notice\":\"called when token is deposited on root chain\"},\"encodeTokenMetadata(uint256)\":{\"notice\":\"This method is supposed to be called by client when withdrawing token with metadata and pass return value of this function as second paramter of `withdrawWithMetadata` method     * It can be overridden by clients to encode data in a different form, which needs to be decoded back by them correctly during exiting\"},\"withdraw(uint256)\":{\"notice\":\"called when user wants to withdraw token back to root chain\"},\"withdrawBatch(uint256[])\":{\"notice\":\"called when user wants to withdraw multiple tokens back to root chain\"},\"withdrawWithMetadata(uint256)\":{\"notice\":\"called when user wants to withdraw token back to root chain with arbitrary metadata\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol\":\"CryptOrchidERC721Child\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\"},\"@openzeppelin/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x24141d2f6b98d4cb77a8936eae8cbaad2e261d9062bdc08036096f4550092501\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\"},\"@openzeppelin/contracts/presets/ERC721PresetMinterPauserAutoId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../access/AccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Counters.sol\\\";\\nimport \\\"../token/ERC721/ERC721.sol\\\";\\nimport \\\"../token/ERC721/ERC721Burnable.sol\\\";\\nimport \\\"../token/ERC721/ERC721Pausable.sol\\\";\\n\\n/**\\n * @dev {ERC721} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *  - token ID and URI autogeneration\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract ERC721PresetMinterPauserAutoId is Context, AccessControl, ERC721Burnable, ERC721Pausable {\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    Counters.Counter private _tokenIdTracker;\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\\n     * See {ERC721-tokenURI}.\\n     */\\n    constructor(string memory name, string memory symbol, string memory baseURI) public ERC721(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n\\n        _setBaseURI(baseURI);\\n    }\\n\\n    /**\\n     * @dev Creates a new token for `to`. Its token ID will be automatically\\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\\n     * URI autogenerated based on the base URI passed at construction.\\n     *\\n     * See {ERC721-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have minter role to mint\\\");\\n\\n        // We cannot just use balanceOf to create the new tokenId because tokens\\n        // can be burned (destroyed), so we need a separate counter.\\n        _mint(to, _tokenIdTracker.current());\\n        _tokenIdTracker.increment();\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721, ERC721Pausable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x4b87b14833eeb61239208c31ea10bd73fdcd49a693c87f038b9429871f82a412\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/EnumerableSet.sol\\\";\\nimport \\\"../../utils/EnumerableMap.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId); // internal owner\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x118ed7540f56b21ff92e21ebaa73584048e98d2ac04ca67571329bb8dbd9032f\"},\"@openzeppelin/contracts/token/ERC721/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC721.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x060925a04766df64ac29f56aaa3a38aafd71424ba4d996ca0f14363828b97056\"},\"@openzeppelin/contracts/token/ERC721/ERC721Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"../../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1c31a4c2ad1af9e25cd8f4ea941ebd6a6a932426183ab39c160cb8e51cfc704f\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962\"},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6bd1b1218338b6f9fe17776f48623b4ac3d8a40405f74a44bc23c00abe2ca13\"},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xccb917776f826ac6b68bd5a15a5f711e3967848a52ba11e6104d9a4f593314a7\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x52146049d6709c870e8ddcd988b5155cb6c5d640cfcd8978aee52bc1ba2ec4eb\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\",\"keccak256\":\"0x21662e4254ce4ac8570b30cc7ab31435966b3cb778a56ba4d09276881cfb2437\"},\"@openzeppelin/contracts/utils/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x4b087f06b6670a131a5a14e53b1d2a5ef19c034cc5ec42eeebcf9554325744ad\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xa1e12f97981f1d0964b1c048978606a57127c56c438bab61cdfe269cad859a74\"},\"contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.6 <0.9.0;\\n\\nimport {CryptOrchidGoerli} from \\\"../CryptOrchidGoerli/CryptOrchidGoerli.sol\\\";\\nimport {AccessControlMixin} from \\\"../Libraries/matic/common/AccessControlMixin.sol\\\";\\nimport {IChildToken} from \\\"../Libraries/matic/child/ChildToken/IChildToken.sol\\\";\\nimport {NativeMetaTransaction} from \\\"../Libraries/matic/common/NativeMetaTransaction.sol\\\";\\nimport {ContextMixin} from \\\"../Libraries/matic/common/ContextMixin.sol\\\";\\nimport {FxBaseChildTunnel} from \\\"../Libraries/tunnel/FxBaseChildTunnel.sol\\\";\\n\\ncontract CryptOrchidERC721Child is\\n    CryptOrchidGoerli,\\n    IChildToken,\\n    AccessControlMixin,\\n    NativeMetaTransaction,\\n    ContextMixin,\\n    FxBaseChildTunnel\\n{\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\n\\n    // limit batching of tokens due to gas limit restrictions\\n    uint256 public constant BATCH_LIMIT = 20;\\n\\n    event WithdrawnBatch(address indexed user, uint256[] tokenIds);\\n    event TransferWithMetadata(address indexed from, address indexed to, uint256 indexed tokenId, bytes metaData);\\n\\n    constructor(address childChainManager, address _fxChild) public CryptOrchidGoerli() FxBaseChildTunnel(_fxChild) {\\n        _setupContractId(\\\"CryptOrchidERC721Child\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(DEPOSITOR_ROLE, childChainManager);\\n        _initializeEIP712(\\\"CryptOrchids\\\");\\n    }\\n\\n    // This is to support Native meta transactions\\n    // never use msg.sender directly, use _msgSender() instead\\n    function _msgSender() internal view override returns (address payable sender) {\\n        return ContextMixin.msgSender();\\n    }\\n\\n    /**\\n     * @notice called when token is deposited on root chain\\n     * @dev Should be callable only by ChildChainManager\\n     * Should handle deposit by minting the required tokenId for user\\n     * Make sure minting is done only by this function\\n     * @param user user address for whom deposit is being done\\n     * @param depositData abi encoded tokenId\\n     */\\n    function deposit(address user, bytes calldata depositData) external override only(DEPOSITOR_ROLE) {\\n        // deposit single\\n        if (depositData.length == 32) {\\n            uint256 tokenId = abi.decode(depositData, (uint256));\\n            _mint(user, tokenId);\\n\\n            // deposit batch\\n        } else {\\n            uint256[] memory tokenIds = abi.decode(depositData, (uint256[]));\\n            uint256 length = tokenIds.length;\\n            for (uint256 i; i < length; i++) {\\n                _mint(user, tokenIds[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice called when user wants to withdraw token back to root chain\\n     * @dev Should burn user's token. This transaction will be verified when exiting on root chain\\n     * @param tokenId tokenId to withdraw\\n     */\\n    function withdraw(uint256 tokenId) external {\\n        require(_msgSender() == ownerOf(tokenId), \\\"ChildERC721: INVALID_TOKEN_OWNER\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @notice called when user wants to withdraw multiple tokens back to root chain\\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\n     * @param tokenIds tokenId list to withdraw\\n     */\\n    function withdrawBatch(uint256[] calldata tokenIds) external {\\n        uint256 length = tokenIds.length;\\n        require(length <= BATCH_LIMIT, \\\"ChildERC721: EXCEEDS_BATCH_LIMIT\\\");\\n        for (uint256 i; i < length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            require(\\n                _msgSender() == ownerOf(tokenId),\\n                string(abi.encodePacked(\\\"ChildERC721: INVALID_TOKEN_OWNER \\\", tokenId))\\n            );\\n            _burn(tokenId);\\n        }\\n        emit WithdrawnBatch(_msgSender(), tokenIds);\\n    }\\n\\n    /**\\n     * @notice called when user wants to withdraw token back to root chain with arbitrary metadata\\n     * @dev Should handle withraw by burning user's token.\\n     *\\n     * This transaction will be verified when exiting on root chain\\n     *\\n     * @param tokenId tokenId to withdraw\\n     */\\n    function withdrawWithMetadata(uint256 tokenId) external {\\n        require(_msgSender() == ownerOf(tokenId), \\\"ChildERC721: INVALID_TOKEN_OWNER\\\");\\n\\n        // Encoding metadata associated with tokenId & emitting event\\n        emit TransferWithMetadata(_msgSender(), address(0), tokenId, this.encodeTokenMetadata(tokenId));\\n\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @notice This method is supposed to be called by client when withdrawing token with metadata\\n     * and pass return value of this function as second paramter of `withdrawWithMetadata` method\\n     *\\n     * It can be overridden by clients to encode data in a different form, which needs to\\n     * be decoded back by them correctly during exiting\\n     *\\n     * @param tokenId Token for which URI to be fetched\\n     */\\n    function encodeTokenMetadata(uint256 tokenId) external view virtual returns (bytes memory) {\\n        // You're always free to change this default implementation\\n        // and pack more data in byte array which can be decoded back\\n        // in L1\\n        return abi.encode(tokenURI(tokenId));\\n    }\\n\\n    function _processMessageFromRoot(\\n        uint256 stateId,\\n        address sender,\\n        bytes memory data\\n    ) internal override validateSender(sender) {\\n        (string memory species, uint256 plantedAt, uint256 waterLevel, uint256 tokenId) = abi.decode(\\n            data,\\n            (string, uint256, uint256, uint256)\\n        );\\n        cryptorchids[tokenId] = CryptOrchid({species: species, plantedAt: plantedAt, waterLevel: waterLevel});\\n    }\\n\\n    function sendMessageToRoot(bytes memory message) public {\\n        _sendMessageToRoot(message);\\n    }\\n}\\n\",\"keccak256\":\"0xa6717dcc09c48c93ec0650e8e2a9588653a4967624e2828c282117d56f2e1128\"},\"contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// NB: this is only meant to deploy to goerli, where chainlink VRF is unavailable.\\n// goerli connects to polygon mumbai, which is what we need to test PoS bridging.\\n// Deploy scripts prevent other contracts from goerli deploy, and this contract from\\n// anything other than goerlui\\npragma solidity >=0.6.6 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/presets/ERC721PresetMinterPauserAutoId.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"../Libraries/CurrentTime.sol\\\";\\n\\ncontract CryptOrchidGoerli is ERC721PresetMinterPauserAutoId, Ownable, CurrentTime {\\n    using SafeMath for uint256;\\n    using Strings for string;\\n    using Counters for Counters.Counter;\\n\\n    struct CryptOrchid {\\n        string species;\\n        uint256 plantedAt;\\n        uint256 waterLevel;\\n    }\\n    mapping(uint256 => CryptOrchid) public cryptorchids;\\n\\n    enum Stage {Unsold, Seed, Flower, Dead}\\n\\n    bool internal saleStarted = false;\\n    bool internal growingStarted = false;\\n\\n    uint256 public constant MAX_CRYPTORCHIDS = 10000;\\n    uint256 public constant GROWTH_CYCLE = 604800; // 7 days\\n    uint256 public constant WATERING_WINDOW = 10800; // 3 hours\\n    uint256 internal constant MAX_TIMESTAMP = 2**256 - 1;\\n    string internal constant GRANUM_IPFS = \\\"QmWd1mn7DuGyx9ByfNeqCsgdSUsJZ1cragitgaygsqDvEm\\\";\\n\\n    uint16[10] private limits = [0, 3074, 6074, 8074, 9074, 9574, 9824, 9924, 9974, 9999];\\n    string[10] private genum = [\\n        \\\"shenzhenica orchidaceae\\\",\\n        \\\"phalaenopsis micholitzii\\\",\\n        \\\"guarianthe aurantiaca\\\",\\n        \\\"vanda coerulea\\\",\\n        \\\"cypripedium calceolus\\\",\\n        \\\"paphiopedilum vietnamense\\\",\\n        \\\"miltonia kayasimae\\\",\\n        \\\"platanthera azorica\\\",\\n        \\\"dendrophylax lindenii\\\",\\n        \\\"paphiopedilum rothschildianum\\\"\\n    ];\\n\\n    string[10] private speciesIPFSConstant = [\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/shenzhenica-orchidaceae.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/phalaenopsis-micholitzii.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/guarianthe-aurantiaca.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/vanda-coerulea.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/cypripedium-calceolus.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/paphiopedilum-vietnamense.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/miltonia-kayasimae.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/platanthera-azorica.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/dendrophylax-lindenii.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/paphiopedilum-rothschildianum.json\\\"\\n    ];\\n\\n    string[10] private deadSpeciesIPFSConstant = [\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/shenzhenica-orchidaceae.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/phalaenopsis-micholitzii.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/guarianthe-aurantiaca.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/vanda-coerulea.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/cypripedium-calceolus.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/paphiopedilum-vietnamense.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/miltonia-kayasimae.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/platanthera-azorica.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/dendrophylax-lindenii.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/paphiopedilum-rothschildianum.json\\\"\\n    ];\\n\\n    Counters.Counter private _tokenIds;\\n\\n    mapping(bytes32 => uint256) public requestToToken;\\n    mapping(bytes32 => string) private speciesIPFS;\\n    mapping(bytes32 => string) private deadSpeciesIPFS;\\n\\n    constructor() public payable ERC721PresetMinterPauserAutoId(\\\"CryptOrchids\\\", \\\"ORCHD\\\", \\\"ipfs://\\\") {\\n        for (uint256 index = 0; index < genum.length; index++) {\\n            speciesIPFS[keccak256(abi.encode(genum[index]))] = speciesIPFSConstant[index];\\n            deadSpeciesIPFS[keccak256(abi.encode(genum[index]))] = deadSpeciesIPFSConstant[index];\\n        }\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        (string memory species, , , ) = getTokenMetadata(tokenId);\\n\\n        if (growthStage(tokenId) == Stage.Seed) {\\n            return string(abi.encodePacked(baseURI(), GRANUM_IPFS));\\n        }\\n\\n        if (growthStage(tokenId) == Stage.Flower) {\\n            return string(abi.encodePacked(baseURI(), speciesIPFS[keccak256(abi.encode(species))]));\\n        }\\n\\n        return string(abi.encodePacked(baseURI(), deadSpeciesIPFS[keccak256(abi.encode(species))]));\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        require(address(0) == to || alive(tokenId), \\\"Dead CryptOrchids cannot be transferred\\\");\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function currentPrice() public view returns (uint256 price) {\\n        uint256 currentSupply = totalSupply();\\n        if (currentSupply >= 9900) {\\n            return 1000000000000000000; // 9900+: 1.00 ETH\\n        } else if (currentSupply >= 9500) {\\n            return 640000000000000000; // 9500-9500:  0.64 ETH\\n        } else if (currentSupply >= 7500) {\\n            return 320000000000000000; // 7500-9500:  0.32 ETH\\n        } else if (currentSupply >= 3500) {\\n            return 160000000000000000; // 3500-7500:  0.16 ETH\\n        } else if (currentSupply >= 1500) {\\n            return 80000000000000000; // 1500-3500:  0.08 ETH\\n        } else if (currentSupply >= 500) {\\n            return 60000000000000000; // 500-1500:   0.06 ETH\\n        } else {\\n            return 40000000000000000; // 0 - 500     0.04 ETH\\n        }\\n    }\\n\\n    function startSale() public onlyOwner {\\n        saleStarted = true;\\n    }\\n\\n    function startGrowing() public onlyOwner {\\n        growingStarted = true;\\n    }\\n\\n    /**\\n     * @dev Withdraw ether from this contract (Callable by owner only)\\n     */\\n    function withdraw() public onlyOwner {\\n        uint256 balance = address(this).balance;\\n        msg.sender.transfer(balance);\\n    }\\n\\n    receive() external payable {}\\n\\n    function webMint(uint256 units) public payable {\\n        require(saleStarted, \\\"The Nursery is closed\\\");\\n        require(units <= MAX_CRYPTORCHIDS - totalSupply(), \\\"Not enough bulbs left\\\");\\n        require(totalSupply() < MAX_CRYPTORCHIDS, \\\"Sale has already ended\\\");\\n        require(units > 0 && units <= 20, \\\"You can plant minimum 1, maximum 20 CryptOrchids\\\");\\n        require(SafeMath.add(totalSupply(), units) <= MAX_CRYPTORCHIDS, \\\"Exceeds MAX_CRYPTORCHIDS\\\");\\n        require(msg.value >= SafeMath.mul(currentPrice(), units), \\\"Ether value sent is below the price\\\");\\n\\n        for (uint256 i = 0; i < units; i++) {\\n            _tokenIds.increment();\\n            uint256 newItemId = _tokenIds.current();\\n            cryptorchids[newItemId] = CryptOrchid({species: \\\"granum\\\", plantedAt: MAX_TIMESTAMP, waterLevel: 0});\\n            _safeMint(msg.sender, newItemId);\\n        }\\n    }\\n\\n    function germinate(uint256 tokenId, uint256 userProvidedSeed) public {\\n        require(growingStarted, \\\"Germination starts 2021-04-12T16:00:00Z\\\");\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Only the Owner can germinate a CryptOrchid.\\\");\\n        _requestRandom(tokenId, userProvidedSeed);\\n    }\\n\\n    function _requestRandom(uint256 tokenId, uint256 userProvidedSeed) internal returns (bytes32 requestId) {\\n        uint256 pseudoRand = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, userProvidedSeed)));\\n        fulfillRandomness(tokenId, pseudoRand);\\n    }\\n\\n    function fulfillRandomness(uint256 tokenId, uint256 randomness) internal {\\n        CryptOrchid storage orchid = cryptorchids[tokenId];\\n        string memory species = pickSpecies(SafeMath.mod(randomness, 10000));\\n        orchid.species = species;\\n        orchid.plantedAt = currentTime();\\n        address tokenOwner = ownerOf(tokenId);\\n    }\\n\\n    function alive(uint256 tokenId) public view returns (bool) {\\n        return growthStage(tokenId) != Stage.Dead;\\n    }\\n\\n    function flowering(uint256 tokenId) public view returns (bool) {\\n        return growthStage(tokenId) == Stage.Flower;\\n    }\\n\\n    function growthStage(uint256 tokenId) public view returns (Stage) {\\n        CryptOrchid memory orchid = cryptorchids[tokenId];\\n        if (orchid.plantedAt == 0) return Stage.Unsold;\\n        if (orchid.plantedAt == MAX_TIMESTAMP) return Stage.Seed;\\n        uint256 currentWaterLevel = orchid.waterLevel;\\n        uint256 elapsed = currentTime() - orchid.plantedAt;\\n        uint256 fullCycles = SafeMath.div(uint256(elapsed), GROWTH_CYCLE);\\n        uint256 modulo = SafeMath.mod(elapsed, GROWTH_CYCLE);\\n\\n        if (currentWaterLevel == fullCycles) {\\n            return Stage.Flower;\\n        }\\n\\n        if (SafeMath.add(currentWaterLevel, 1) == fullCycles && modulo < WATERING_WINDOW) {\\n            return Stage.Flower;\\n        }\\n\\n        return Stage.Dead;\\n    }\\n\\n    function water(uint256 tokenId) public {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Only the Owner can water a CryptOrchid.\\\");\\n\\n        if (!alive(tokenId)) {\\n            return;\\n        }\\n\\n        CryptOrchid storage orchid = cryptorchids[tokenId];\\n\\n        uint256 wateringLevel = orchid.waterLevel;\\n        uint256 elapsed = currentTime() - orchid.plantedAt;\\n        uint256 fullCycles = SafeMath.div(uint256(elapsed), GROWTH_CYCLE);\\n\\n        if (wateringLevel > fullCycles) {\\n            return;\\n        }\\n\\n        uint256 newWaterLevel = SafeMath.add(wateringLevel, 1);\\n        orchid.waterLevel = newWaterLevel;\\n    }\\n\\n    function getTokenMetadata(uint256 tokenId)\\n        public\\n        view\\n        returns (\\n            string memory,\\n            uint256,\\n            uint256,\\n            Stage\\n        )\\n    {\\n        return (\\n            cryptorchids[tokenId].species,\\n            cryptorchids[tokenId].plantedAt,\\n            cryptorchids[tokenId].waterLevel,\\n            growthStage(tokenId)\\n        );\\n    }\\n\\n    /**\\n     * @notice Pick species for random number index\\n     * @param randomIndex uint256\\n     * @return species string\\n     */\\n    function pickSpecies(uint256 randomIndex) private view returns (string memory) {\\n        for (uint256 i = 0; i < 10; i++) {\\n            if (randomIndex <= limits[i]) {\\n                return genum[i];\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b1f3e914311c7a69ad3795e877e316b1740b2f4da01bf1bb3a1100f83af446\"},\"contracts/Libraries/CurrentTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.6 <0.9.0;\\n\\ncontract CurrentTime {\\n    function currentTime() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xa9a311d0f67d3d7aabd318210bed7051401151fa5f45e75071d7a52c50214cee\"},\"contracts/Libraries/matic/child/ChildToken/IChildToken.sol\":{\"content\":\"pragma solidity 0.6.6;\\n\\ninterface IChildToken {\\n    function deposit(address user, bytes calldata depositData) external;\\n}\\n\",\"keccak256\":\"0x0daa27038b5143761eff366e3f795295f20eb46cc6092617fcecb94a9694636a\"},\"contracts/Libraries/matic/common/AccessControlMixin.sol\":{\"content\":\"pragma solidity 0.6.6;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract AccessControlMixin is AccessControl {\\n    string private _revertMsg;\\n    function _setupContractId(string memory contractId) internal {\\n        _revertMsg = string(abi.encodePacked(contractId, \\\": INSUFFICIENT_PERMISSIONS\\\"));\\n    }\\n\\n    modifier only(bytes32 role) {\\n        require(\\n            hasRole(role, _msgSender()),\\n            _revertMsg\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x27a3479070b6d90caaf333a46690021569e6bc555e2f5a1e40fedab3b7688c28\"},\"contracts/Libraries/matic/common/ContextMixin.sol\":{\"content\":\"pragma solidity 0.6.6;\\n\\nabstract contract ContextMixin {\\n    function msgSender()\\n        internal\\n        view\\n        returns (address payable sender)\\n    {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n        return sender;\\n    }\\n}\\n\",\"keccak256\":\"0xb9c8d90444f3cb8aeadd6c400d42c777068be5d46cb74f28313508284b224b34\"},\"contracts/Libraries/matic/common/EIP712Base.sol\":{\"content\":\"pragma solidity 0.6.6;\\n\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\ncontract EIP712Base is Initializable {\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    string constant public ERC712_VERSION = \\\"1\\\";\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"\\n        )\\n    );\\n    bytes32 internal domainSeperator;\\n\\n    // supposed to be called once while initializing.\\n    // one of the contractsa that inherits this contract follows proxy pattern\\n    // so it is not possible to do this in a constructor\\n    function _initializeEIP712(\\n        string memory name\\n    )\\n        internal\\n        initializer\\n    {\\n        _setDomainSeperator(name);\\n    }\\n\\n    function _setDomainSeperator(string memory name) internal {\\n        domainSeperator = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(ERC712_VERSION)),\\n                address(this),\\n                bytes32(getChainId())\\n            )\\n        );\\n    }\\n\\n    function getDomainSeperator() public view returns (bytes32) {\\n        return domainSeperator;\\n    }\\n\\n    function getChainId() public pure returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /**\\n     * Accept message hash and returns hash message in EIP712 compatible form\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n     * https://eips.ethereum.org/EIPS/eip-712\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n     */\\n    function toTypedMessageHash(bytes32 messageHash)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeperator(), messageHash)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x8388a5fa3ddc45ec21c8b24b09d511539af270ae5b0d62ba363da40fd5bb9b65\"},\"contracts/Libraries/matic/common/Initializable.sol\":{\"content\":\"pragma solidity 0.6.6;\\n\\ncontract Initializable {\\n    bool inited = false;\\n\\n    modifier initializer() {\\n        require(!inited, \\\"already inited\\\");\\n        _;\\n        inited = true;\\n    }\\n}\\n\",\"keccak256\":\"0xa21250206c1423c08d7cf64f3f7213570b1d64ee262e9444e02aca7194182505\"},\"contracts/Libraries/matic/common/NativeMetaTransaction.sol\":{\"content\":\"pragma solidity 0.6.6;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {EIP712Base} from \\\"./EIP712Base.sol\\\";\\n\\ncontract NativeMetaTransaction is EIP712Base {\\n    using SafeMath for uint256;\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\n        )\\n    );\\n    event MetaTransactionExecuted(\\n        address userAddress,\\n        address payable relayerAddress,\\n        bytes functionSignature\\n    );\\n    mapping(address => uint256) nonces;\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) public payable returns (bytes memory) {\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: nonces[userAddress],\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n\\n        require(\\n            verify(userAddress, metaTx, sigR, sigS, sigV),\\n            \\\"Signer and signature do not match\\\"\\n        );\\n\\n        // increase nonce for user (to avoid re-use)\\n        nonces[userAddress] = nonces[userAddress].add(1);\\n\\n        emit MetaTransactionExecuted(\\n            userAddress,\\n            msg.sender,\\n            functionSignature\\n        );\\n\\n        // Append userAddress and relayer address at the end to extract it from calling context\\n        (bool success, bytes memory returnData) = address(this).call(\\n            abi.encodePacked(functionSignature, userAddress)\\n        );\\n        require(success, \\\"Function call not successful\\\");\\n\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    META_TRANSACTION_TYPEHASH,\\n                    metaTx.nonce,\\n                    metaTx.from,\\n                    keccak256(metaTx.functionSignature)\\n                )\\n            );\\n    }\\n\\n    function getNonce(address user) public view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(\\n        address signer,\\n        MetaTransaction memory metaTx,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) internal view returns (bool) {\\n        require(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\n        return\\n            signer ==\\n            ecrecover(\\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\\n                sigV,\\n                sigR,\\n                sigS\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x3b03c8bbb1c01c3da7cec46e8904efd5a183778f7d1682b4271c2b27cc79ffe9\"},\"contracts/Libraries/tunnel/FxBaseChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6 <0.9.0;\\n\\n// IFxMessageProcessor represents interface to process message\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/**\\n * @notice Mock child tunnel contract to receive and send message from L2\\n */\\nabstract contract FxBaseChildTunnel is IFxMessageProcessor {\\n    // MessageTunnel on L1 will get data from this event\\n    event MessageSent(bytes message);\\n\\n    // fx child\\n    address public fxChild;\\n\\n    // fx root tunnel\\n    address public fxRootTunnel;\\n\\n    constructor(address _fxChild) internal {\\n        fxChild = _fxChild;\\n    }\\n\\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\\n    modifier validateSender(address sender) {\\n        require(sender == fxRootTunnel, \\\"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\\\");\\n        _;\\n    }\\n\\n    // set fxRootTunnel if not set already\\n    function setFxRootTunnel(address _fxRootTunnel) public {\\n        require(fxRootTunnel == address(0x0), \\\"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\\\");\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes memory data\\n    ) public override {\\n        require(msg.sender == fxChild, \\\"FxBaseChildTunnel: INVALID_SENDER\\\");\\n        _processMessageFromRoot(stateId, rootMessageSender, data);\\n    }\\n\\n    /**\\n     * @notice Emit message that can be received on Root Tunnel\\n     * @dev Call the internal function when need to emit message\\n     * @param message bytes message that will be sent to Root Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToRoot(bytes memory message) internal {\\n        emit MessageSent(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Root Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param stateId unique state id\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(\\n        uint256 stateId,\\n        address sender,\\n        bytes memory message\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x2647c2b78752eb7614409270c147e39319e1d74dd67261e4883c29abaaf49094\"}},\"version\":1}",
  "bytecode": "0x600f805461ffff191690556101c060405260006080908152610c0260a0526117ba60c052611f8a60e0526123726101005261256661012052612660610140526126c4610160526126f66101805261270f6101a0526200006390601090600a62000e8d565b506040805161018081018252601761014082019081527f7368656e7a68656e696361206f72636869646163656165000000000000000000610160830152815281518083018352601881527f7068616c61656e6f70736973206d6963686f6c69747a69690000000000000000602082810191909152808301919091528251808401845260158082527f6775617269616e74686520617572616e74696163610000000000000000000000828401528385019190915283518085018552600e81526d76616e646120636f6572756c656160901b818401526060840152835180850185528181527f637970726970656469756d2063616c63656f6c7573000000000000000000000081840152608084015283518085018552601981527f70617068696f706564696c756d20766965746e616d656e7365000000000000008184015260a08401528351808501855260128152716d696c746f6e6961206b61796173696d616560701b8184015260c084015283518085018552601381527f706c6174616e746865726120617a6f72696361000000000000000000000000008184015260e0840152835180850185529081527f64656e64726f7068796c6178206c696e64656e69690000000000000000000000818301526101008301528251808401909352601d83527f70617068696f706564696c756d20726f7468736368696c6469616e756d000000908301526101208101919091526200028390601190600a62000f2a565b50604080516101c08101909152604b6101408201818152829162006a9e61016084013981526020016040518060800160405280604c815260200162006934604c9139815260200160405180608001604052806049815260200162006bc260499139815260200160405180608001604052806042815260200162006b2f604291398152602001604051806080016040528060498152602001620068eb6049913981526020016040518060800160405280604d815260200162006a08604d9139815260200160405180608001604052806046815260200162006ae960469139815260200160405180608001604052806047815260200162006d3860479139815260200160405180608001604052806049815260200162006c5860499139815260200160405180608001604052806051815260200162006804605191399052620003cf90601b90600a62000f2a565b50604080516101c08101909152604b6101408201818152829162006ced61016084013981526020016040518060800160405280604c815260200162006ca1604c9139815260200160405180608001604052806049815260200162006a5560499139815260200160405180608001604052806042815260200162006980604291398152602001604051806080016040528060498152602001620067726049913981526020016040518060800160405280604d815260200162006c0b604d91398152602001604051806080016040528060468152602001620069c260469139815260200160405180608001604052806047815260200162006855604791398152602001604051806080016040528060498152602001620067bb60499139815260200160405180608001604052806051815260200162006b716051913990526200051b90602590600a62000f2a565b506034805460ff191690553480156200053357600080fd5b5060405162006d7f38038062006d7f833981810160405260408110156200055957600080fd5b508051602091820151604080518082018252600c81526b43727970744f72636869647360a01b8186015281518083018352600581526413d490d21160da1b8187015282518084019093526007835266697066733a2f2f60c81b9583019590955292939192839290918282620005de6301ffc9a760e01b6001600160e01b0362000a6416565b8151620005f390600790602085019062000f7d565b5080516200060990600890602084019062000f7d565b50620006256380ac58cd60e01b6001600160e01b0362000a6416565b62000640635b5e139f60e01b6001600160e01b0362000a6416565b6200065b63780e9d6360e01b6001600160e01b0362000a6416565b5050600b805460ff191690556200068f6000620006806001600160e01b0362000aec16565b6001600160e01b0362000b0916565b604080516a4d494e5445525f524f4c4560a81b8152905190819003600b019020620006c790620006806001600160e01b0362000aec16565b604080516a5041555345525f524f4c4560a81b8152905190819003600b019020620006ff90620006806001600160e01b0362000aec16565b62000713816001600160e01b0362000b2216565b50505060006200072862000aec60201b60201c565b600d80546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060005b600a8110156200097457601b81600a81106200079157fe5b0160316000601184600a8110620007a457fe5b60408051602080820190815292909301805460026001821615610100026000190190911604918401829052928291606090910190849080156200082b5780601f10620007ff576101008083540402835291602001916200082b565b820191906000526020600020905b8154815290600101906020018083116200080d57829003601f168201915b50509250505060405160208183030381529060405280519060200120815260200190815260200160002090805460018160011615610100020316600290046200087692919062000ffe565b50602581600a81106200088557fe5b0160326000601184600a81106200089857fe5b60408051602080820190815292909301805460026001821615610100026000190190911604918401829052928291606090910190849080156200091f5780601f10620008f3576101008083540402835291602001916200091f565b820191906000526020600020905b8154815290600101906020018083116200090157829003601f168201915b50509250505060405160208183030381529060405280519060200120815260200190815260200160002090805460018160011615610100020316600290046200096a92919062000ffe565b5060010162000779565b50603780546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152601681527f43727970744f72636869644552433732314368696c64000000000000000000006020820152620009d49062000b37565b620009ed6000620006806001600160e01b0362000aec16565b604080516d4445504f5349544f525f524f4c4560901b8152905190819003600e01902062000a2590836001600160e01b0362000b0916565b60408051808201909152600c81526b43727970744f72636869647360a01b602082015262000a5c906001600160e01b0362000bd916565b50506200112a565b6001600160e01b0319808216141562000ac4576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b600062000b0362000c4760201b620043381760201c565b90505b90565b62000b1e82826001600160e01b0362000ca616565b5050565b805162000b1e90600a90602084019062000f7d565b806040516020018082805190602001908083835b6020831062000b6c5780518252601f19909201916020918201910162000b4b565b51815160209384036101000a60001901801990921691161790527f3a20494e53554646494349454e545f5045524d495353494f4e530000000000009190930190815260408051808303600519018152601a9092019052805162000b1e955060339450920191905062000f7d565b60345460ff161562000c23576040805162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481a5b9a5d195960921b604482015290519081900360640190fd5b62000c37816001600160e01b0362000d2816565b506034805460ff19166001179055565b60003330141562000ca15760606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b0316915062000b069050565b503390565b60008281526020818152604090912062000ccb9183906200450762000df0821b17901c565b1562000b1e5762000ce46001600160e01b0362000aec16565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6040518060800160405280604f81526020016200689c604f913980516020918201208251838301206040805180820190915260018152603160f81b930192909252907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc63062000d9f6001600160e01b0362000e1916565b604080516020808201979097528082019590955260608501939093526001600160a01b03909116608084015260a0808401919091528151808403909101815260c09092019052805191012060355550565b600062000e10836001600160a01b0384166001600160e01b0362000e1d16565b90505b92915050565b4690565b600062000e3483836001600160e01b0362000e7516565b62000e6c5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000e13565b50600062000e13565b60009081526001919091016020526040902054151590565b60018301918390821562000f185791602002820160005b8382111562000ee657835183826101000a81548161ffff021916908361ffff160217905550926020019260020160208160010104928301926001030262000ea4565b801562000f165782816101000a81549061ffff021916905560020160208160010104928301926001030262000ee6565b505b5062000f2692915062001078565b5090565b82600a810192821562000f6f579160200282015b8281111562000f6f578251805162000f5e91849160209091019062000f7d565b509160200191906001019062000f3e565b5062000f269291506200109a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000fc057805160ff191683800117855562000ff0565b8280016001018555821562000ff0579182015b8281111562000ff057825182559160200191906001019062000fd3565b5062000f26929150620010c2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062001039578054855562000ff0565b8280016001018555821562000ff057600052602060002091601f016020900482015b8281111562000ff05782548255916001019190600101906200105b565b62000b0691905b8082111562000f2657805461ffff191681556001016200107f565b62000b0691905b8082111562000f26576000620010b88282620010df565b50600101620010a1565b62000b0691905b8082111562000f265760008155600101620010c9565b50805460018160011615610100020316600290046000825580601f1062001107575062001127565b601f016020900490600052602060002090810190620011279190620010c2565b50565b615638806200113a6000396000f3fe6080604052600436106103f35760003560e01c806370a0823111610208578063a22cb46511610118578063ca15c873116100ab578063d547741f1161007a578063d547741f1461122a578063e63ab1e914611263578063e985e9c514611278578063f2fde38b146112b3578063ffee200c146112e6576103fa565b8063ca15c873146110b0578063cac21c8f146110da578063cf2c52cb1461118a578063d539139314611215576103fa565b8063b66a0e5d116100e7578063b66a0e5d14610f52578063b7aaba2014610f67578063b88d4fde14610fb5578063c87b56dd14611086576103fa565b8063a22cb46514610eae578063a3b0b5a314610ee9578063a5e584dc14610efe578063a7eec44b14610f28576103fa565b806391d148541161019b5780639a113ee21161016a5780639a113ee214610c925780639a7c4b7114610d435780639c8d415614610e095780639d1b464a14610e84578063a217fddf14610e99576103fa565b806391d1485414610c125780639559c0bd14610c4b57806395d89b4114610c605780639981d4a114610c75576103fa565b80638456cb59116101d75780638456cb5914610b855780638883709414610b9a5780638da5cb5b14610bcd5780639010d07c14610be2576103fa565b806370a0823114610af8578063715018a614610b2b5780637f1e9cb014610b405780637fd8d95314610b55576103fa565b80632f745c59116103035780634f6ccce7116102965780636352211e116102655780636352211e14610a475780636573c78714610a715780636a62784214610a9b5780636b0c004d14610ace5780636c0360eb14610ae3576103fa565b80634f6ccce7146109195780635c975abb14610943578063603168011461095857806362ff09d614610a1d576103fa565b80633f4ba83a116102d25780633f4ba83a1461088257806342842e0e1461089757806342966c68146108da578063450d11f014610904576103fa565b80632f745c59146107e65780633408e4701461081f57806336568abe146108345780633ccfd60b1461086d576103fa565b806318160ddd11610386578063248a9ca311610355578063248a9ca314610711578063277dec921461073b5780632d0335ab146107505780632e1a7d4d146107835780632f2ff15d146107ad576103fa565b806318160ddd1461067a578063182199cd1461068f57806320379ee5146106b957806323b872dd146106ce576103fa565b80630c53c51c116103c25780630c53c51c146105525780630f7e5970146106145780631653c39a14610629578063179f0b0a14610653576103fa565b806301ffc9a7146103ff57806306fdde0314610447578063081812fc146104d1578063095ea7b314610517576103fa565b366103fa57005b600080fd5b34801561040b57600080fd5b506104336004803603602081101561042257600080fd5b50356001600160e01b0319166112fb565b604080519115158252519081900360200190f35b34801561045357600080fd5b5061045c61131e565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561049657818101518382015260200161047e565b50505050905090810190601f1680156104c35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104dd57600080fd5b506104fb600480360360208110156104f457600080fd5b50356113b5565b604080516001600160a01b039092168252519081900360200190f35b34801561052357600080fd5b506105506004803603604081101561053a57600080fd5b506001600160a01b038135169060200135611417565b005b61045c600480360360a081101561056857600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561059257600080fd5b8201836020820111156105a457600080fd5b803590602001918460018302840111600160201b831117156105c557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050506020810135906040013560ff166114f2565b34801561062057600080fd5b5061045c6117f5565b34801561063557600080fd5b5061045c6004803603602081101561064c57600080fd5b5035611812565b34801561065f57600080fd5b506106686118a4565b60408051918252519081900360200190f35b34801561068657600080fd5b506106686118ab565b34801561069b57600080fd5b50610433600480360360208110156106b257600080fd5b50356118bc565b3480156106c557600080fd5b506106686118db565b3480156106da57600080fd5b50610550600480360360608110156106f157600080fd5b506001600160a01b038135811691602081013590911690604001356118e1565b34801561071d57600080fd5b506106686004803603602081101561073457600080fd5b5035611938565b34801561074757600080fd5b5061055061194d565b34801561075c57600080fd5b506106686004803603602081101561077357600080fd5b50356001600160a01b03166119c0565b34801561078f57600080fd5b50610550600480360360208110156107a657600080fd5b50356119db565b3480156107b957600080fd5b50610550600480360360408110156107d057600080fd5b50803590602001356001600160a01b0316611a5c565b3480156107f257600080fd5b506106686004803603604081101561080957600080fd5b506001600160a01b038135169060200135611ac8565b34801561082b57600080fd5b50610668611af9565b34801561084057600080fd5b506105506004803603604081101561085757600080fd5b50803590602001356001600160a01b0316611afd565b34801561087957600080fd5b50610550611b5e565b34801561088e57600080fd5b50610550611bef565b3480156108a357600080fd5b50610550600480360360608110156108ba57600080fd5b506001600160a01b03813581169160208101359091169060400135611c60565b3480156108e657600080fd5b50610550600480360360208110156108fd57600080fd5b5035611c7b565b34801561091057600080fd5b506104fb611cc1565b34801561092557600080fd5b506106686004803603602081101561093c57600080fd5b5035611cd0565b34801561094f57600080fd5b50610433611cec565b34801561096457600080fd5b506109826004803603602081101561097b57600080fd5b5035611cf5565b60405180806020018581526020018481526020018360038111156109a257fe5b60ff168152602001828103825286818151815260200191508051906020019080838360005b838110156109df5781810151838201526020016109c7565b50505050905090810190601f168015610a0c5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b348015610a2957600080fd5b5061066860048036036020811015610a4057600080fd5b5035611dba565b348015610a5357600080fd5b506104fb60048036036020811015610a6a57600080fd5b5035611dcc565b348015610a7d57600080fd5b5061043360048036036020811015610a9457600080fd5b5035611dfa565b348015610aa757600080fd5b5061055060048036036020811015610abe57600080fd5b50356001600160a01b0316611e1a565b348015610ada57600080fd5b50610668611e9e565b348015610aef57600080fd5b5061045c611ea4565b348015610b0457600080fd5b5061066860048036036020811015610b1b57600080fd5b50356001600160a01b0316611f05565b348015610b3757600080fd5b50610550611f6d565b348015610b4c57600080fd5b506104fb612019565b348015610b6157600080fd5b5061055060048036036040811015610b7857600080fd5b5080359060200135612028565b348015610b9157600080fd5b506105506120c4565b348015610ba657600080fd5b5061055060048036036020811015610bbd57600080fd5b50356001600160a01b0316612133565b348015610bd957600080fd5b506104fb61219d565b348015610bee57600080fd5b506104fb60048036036040811015610c0557600080fd5b50803590602001356121ac565b348015610c1e57600080fd5b5061043360048036036040811015610c3557600080fd5b50803590602001356001600160a01b03166121ca565b348015610c5757600080fd5b506106686121e8565b348015610c6c57600080fd5b5061045c6121ed565b61055060048036036020811015610c8b57600080fd5b503561224e565b348015610c9e57600080fd5b5061055060048036036020811015610cb557600080fd5b810190602081018135600160201b811115610ccf57600080fd5b820183602082011115610ce157600080fd5b803590602001918460018302840111600160201b83111715610d0257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506124f4945050505050565b348015610d4f57600080fd5b5061055060048036036060811015610d6657600080fd5b8135916001600160a01b0360208201351691810190606081016040820135600160201b811115610d9557600080fd5b820183602082011115610da757600080fd5b803590602001918460018302840111600160201b83111715610dc857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506124fd945050505050565b348015610e1557600080fd5b5061055060048036036020811015610e2c57600080fd5b810190602081018135600160201b811115610e4657600080fd5b820183602082011115610e5857600080fd5b803590602001918460208302840111600160201b83111715610e7957600080fd5b509092509050612551565b348015610e9057600080fd5b5061066861272f565b348015610ea557600080fd5b506106686127eb565b348015610eba57600080fd5b5061055060048036036040811015610ed157600080fd5b506001600160a01b03813516906020013515156127f0565b348015610ef557600080fd5b506106686128f5565b348015610f0a57600080fd5b5061055060048036036020811015610f2157600080fd5b503561291b565b348015610f3457600080fd5b5061055060048036036020811015610f4b57600080fd5b5035612b6f565b348015610f5e57600080fd5b50610550612c2d565b348015610f7357600080fd5b50610f9160048036036020811015610f8a57600080fd5b5035612c9e565b60405180826003811115610fa157fe5b60ff16815260200191505060405180910390f35b348015610fc157600080fd5b5061055060048036036080811015610fd857600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561101257600080fd5b82018360208201111561102457600080fd5b803590602001918460018302840111600160201b8311171561104557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612e1e945050505050565b34801561109257600080fd5b5061045c600480360360208110156110a957600080fd5b5035612e76565b3480156110bc57600080fd5b50610668600480360360208110156110d357600080fd5b5035613274565b3480156110e657600080fd5b50611104600480360360208110156110fd57600080fd5b503561328b565b6040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b8381101561114d578181015183820152602001611135565b50505050905090810190601f16801561117a5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561119657600080fd5b50610550600480360360408110156111ad57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156111d757600080fd5b8201836020820111156111e957600080fd5b803590602001918460018302840111600160201b8311171561120a57600080fd5b509092509050613338565b34801561122157600080fd5b5061066861350b565b34801561123657600080fd5b506105506004803603604081101561124d57600080fd5b50803590602001356001600160a01b031661352e565b34801561126f57600080fd5b50610668613587565b34801561128457600080fd5b506104336004803603604081101561129b57600080fd5b506001600160a01b03813581169160200135166135aa565b3480156112bf57600080fd5b50610550600480360360208110156112d657600080fd5b50356001600160a01b03166135d8565b3480156112f257600080fd5b506106686136db565b6001600160e01b0319811660009081526001602052604090205460ff165b919050565b60078054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156113aa5780601f1061137f576101008083540402835291602001916113aa565b820191906000526020600020905b81548152906001019060200180831161138d57829003601f168201915b505050505090505b90565b60006113c0826136e1565b6113fb5760405162461bcd60e51b815260040180806020018281038252602c815260200180615393602c913960400191505060405180910390fd5b506000908152600560205260409020546001600160a01b031690565b600061142282611dcc565b9050806001600160a01b0316836001600160a01b031614156114755760405162461bcd60e51b81526004018080602001828103825260218152602001806154596021913960400191505060405180910390fd5b806001600160a01b03166114876136f4565b6001600160a01b031614806114a857506114a8816114a36136f4565b6135aa565b6114e35760405162461bcd60e51b81526004018080602001828103825260388152602001806152a26038913960400191505060405180910390fd5b6114ed83836136fe565b505050565b60606114fc614e79565b50604080516060810182526001600160a01b0388166000818152603660209081529084902054835282015290810186905261153a878287878761376c565b6115755760405162461bcd60e51b81526004018080602001828103825260218152602001806154086021913960400191505060405180910390fd5b6001600160a01b03871660009081526036602052604090205461159f90600163ffffffff61384916565b6001600160a01b03881660008181526036602090815260408083209490945583519283523383820181905260609484018581528b51958501959095528a517f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b958d9592948d94919260808501928601918190849084905b8381101561162e578181015183820152602001611616565b50505050905090810190601f16801561165b5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160006060306001600160a01b0316888a6040516020018083805190602001908083835b602083106116ac5780518252601f19909201916020918201910161168d565b6001836020036101000a038019825116818451168082178552505050505050905001826001600160a01b03166001600160a01b031660601b8152601401925050506040516020818303038152906040526040518082805190602001908083835b6020831061172b5780518252601f19909201916020918201910161170c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461178d576040519150601f19603f3d011682016040523d82523d6000602084013e611792565b606091505b5091509150816117e9576040805162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000604482015290519081900360640190fd5b98975050505050505050565b604051806040016040528060018152602001603160f81b81525081565b606061181d82612e76565b6040516020018080602001828103825283818151815260200191508051906020019080838360005b8381101561185d578181015183820152602001611845565b50505050905090810190601f16801561188a5780820380516001836020036101000a031916815260200191505b5060408051601f1981840301815291905295945050505050565b62093a8081565b60006118b760036138a3565b905090565b600060026118c983612c9e565b60038111156118d457fe5b1492915050565b60355490565b6118f26118ec6136f4565b826138ae565b61192d5760405162461bcd60e51b81526004018080602001828103825260318152602001806154a16031913960400191505060405180910390fd5b6114ed838383613952565b60009081526020819052604090206002015490565b6119556136f4565b6001600160a01b031661196661219d565b6001600160a01b0316146119af576040805162461bcd60e51b815260206004820181905260248201526000805160206153bf833981519152604482015290519081900360640190fd5b600f805461ff001916610100179055565b6001600160a01b031660009081526036602052604090205490565b6119e481611dcc565b6001600160a01b03166119f56136f4565b6001600160a01b031614611a50576040805162461bcd60e51b815260206004820181905260248201527f4368696c644552433732313a20494e56414c49445f544f4b454e5f4f574e4552604482015290519081900360640190fd5b611a5981613ab0565b50565b600082815260208190526040902060020154611a7f90611a7a6136f4565b6121ca565b611aba5760405162461bcd60e51b815260040180806020018281038252602f815260200180615007602f913960400191505060405180910390fd5b611ac48282613b89565b5050565b6001600160a01b0382166000908152600260205260408120611af0908363ffffffff613bf816565b90505b92915050565b4690565b611b056136f4565b6001600160a01b0316816001600160a01b031614611b545760405162461bcd60e51b815260040180806020018281038252602f8152602001806155d4602f913960400191505060405180910390fd5b611ac48282613c04565b611b666136f4565b6001600160a01b0316611b7761219d565b6001600160a01b031614611bc0576040805162461bcd60e51b815260206004820181905260248201526000805160206153bf833981519152604482015290519081900360640190fd5b6040514790339082156108fc029083906000818181858888f19350505050158015611ac4573d6000803e3d6000fd5b604080516a5041555345525f524f4c4560a81b8152905190819003600b019020611c1b90611a7a6136f4565b611c565760405162461bcd60e51b815260040180806020018281038252604081526020018061556a6040913960400191505060405180910390fd5b611c5e613c73565b565b6114ed83838360405180602001604052806000815250612e1e565b611c866118ec6136f4565b611a505760405162461bcd60e51b815260040180806020018281038252603081526020018061553a6030913960400191505060405180910390fd5b6037546001600160a01b031681565b600080611ce460038463ffffffff613d1316565b509392505050565b600b5460ff1690565b6000818152600e60205260408120600181015460028201546060939283928392611d1e88612c9e565b8354604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152918691830182828015611da45780601f10611d7957610100808354040283529160200191611da4565b820191906000526020600020905b815481529060010190602001808311611d8757829003601f168201915b5050505050935093509350935093509193509193565b60306020526000908152604090205481565b6000611af382604051806060016040528060298152602001615304602991396003919063ffffffff613d2f16565b60006003611e0783612c9e565b6003811115611e1257fe5b141592915050565b604080516a4d494e5445525f524f4c4560a81b8152905190819003600b019020611e4690611a7a6136f4565b611e815760405162461bcd60e51b815260040180806020018281038252603d8152602001806154fd603d913960400191505060405180910390fd5b611e9481611e8f600c613d46565b613d4a565b611a59600c613e84565b61271081565b600a8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156113aa5780601f1061137f576101008083540402835291602001916113aa565b60006001600160a01b038216611f4c5760405162461bcd60e51b815260040180806020018281038252602a8152602001806152da602a913960400191505060405180910390fd5b6001600160a01b0382166000908152600260205260409020611af3906138a3565b611f756136f4565b6001600160a01b0316611f8661219d565b6001600160a01b031614611fcf576040805162461bcd60e51b815260206004820181905260248201526000805160206153bf833981519152604482015290519081900360640190fd5b600d546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600d80546001600160a01b0319169055565b6038546001600160a01b031681565b600f54610100900460ff1661206e5760405162461bcd60e51b815260040180806020018281038252602781526020018061512a6027913960400191505060405180910390fd5b61207f6120796136f4565b836138ae565b6120ba5760405162461bcd60e51b815260040180806020018281038252602b8152602001806154d2602b913960400191505060405180910390fd5b6114ed8282613e8d565b604080516a5041555345525f524f4c4560a81b8152905190819003600b0190206120f090611a7a6136f4565b61212b5760405162461bcd60e51b815260040180806020018281038252603e815260200180615151603e913960400191505060405180910390fd5b611c5e613ed3565b6038546001600160a01b03161561217b5760405162461bcd60e51b815260040180806020018281038252602a8152602001806155aa602a913960400191505060405180910390fd5b603880546001600160a01b0319166001600160a01b0392909216919091179055565b600d546001600160a01b031690565b6000828152602081905260408120611af0908363ffffffff613bf816565b6000828152602081905260408120611af0908363ffffffff613f5616565b601481565b60088054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156113aa5780601f1061137f576101008083540402835291602001916113aa565b600f5460ff1661229d576040805162461bcd60e51b8152602060048201526015602482015274151a1948139d5c9cd95c9e481a5cc818db1bdcd959605a1b604482015290519081900360640190fd5b6122a56118ab565b612710038111156122f5576040805162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da08189d5b189cc81b19599d605a1b604482015290519081900360640190fd5b6127106123006118ab565b1061234b576040805162461bcd60e51b815260206004820152601660248201527514d85b19481a185cc8185b1c9958591e48195b99195960521b604482015290519081900360640190fd5b60008111801561235c575060148111155b6123975760405162461bcd60e51b81526004018080602001828103825260308152602001806154296030913960400191505060405180910390fd5b6127106123ab6123a56118ab565b83613849565b11156123fe576040805162461bcd60e51b815260206004820152601860248201527f45786365656473204d41585f43525950544f5243484944530000000000000000604482015290519081900360640190fd5b61240f61240961272f565b82613f6b565b34101561244d5760405162461bcd60e51b815260040180806020018281038252602381526020018061532d6023913960400191505060405180910390fd5b60005b81811015611ac457612462602f613e84565b600061246e602f613d46565b6040805160a081018252600660608201908152656772616e756d60d01b608083015281526000196020808301919091526000828401819052848152600e82529290922081518051949550919390926124ca928492910190614ea3565b50602082015160018201556040909101516002909101556124eb3382613fc4565b50600101612450565b611a5981613fde565b6037546001600160a01b031633146125465760405162461bcd60e51b8152600401808060200182810382526021815260200180614f996021913960400191505060405180910390fd5b6114ed83838361407a565b8060148111156125a8576040805162461bcd60e51b815260206004820181905260248201527f4368696c644552433732313a20455843454544535f42415443485f4c494d4954604482015290519081900360640190fd5b60005b818110156126b55760008484838181106125c157fe5b9050602002013590506125d381611dcc565b6001600160a01b03166125e46136f4565b6001600160a01b03161481604051602001808061525c60219139602101828152602001915050604051602081830303815290604052906126a25760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561266757818101518382015260200161264f565b50505050905090810190601f1680156126945780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506126ac81613ab0565b506001016125ab565b506126be6136f4565b6001600160a01b03167ff871896b17e9cb7a64941c62c188a4f5c621b86800e3d15452ece01ce56073df848460405180806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f19169092018290039550909350505050a2505050565b60008061273a6118ab565b90506126ac811061275657670de0b6b3a76400009150506113b2565b61251c8110612770576708e1bc9bf04000009150506113b2565b611d4c811061278a57670470de4df82000009150506113b2565b610dac81106127a4576702386f26fc1000009150506113b2565b6105dc81106127be5767011c37937e0800009150506113b2565b6101f481106127d75766d529ae9e8600009150506113b2565b668e1bc9bf0400009150506113b2565b5090565b600081565b6127f86136f4565b6001600160a01b0316826001600160a01b0316141561285e576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b806006600061286b6136f4565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556128af6136f4565b60408051841515815290516001600160a01b0392909216917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319181900360200190a35050565b604080516d4445504f5349544f525f524f4c4560901b8152905190819003600e01902081565b61292481611dcc565b6001600160a01b03166129356136f4565b6001600160a01b031614612990576040805162461bcd60e51b815260206004820181905260248201527f4368696c644552433732313a20494e56414c49445f544f4b454e5f4f574e4552604482015290519081900360640190fd5b80600061299b6136f4565b6001600160a01b03167ff94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a14306001600160a01b0316631653c39a866040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b158015612a0957600080fd5b505afa158015612a1d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612a4657600080fd5b8101908080516040519392919084600160201b821115612a6557600080fd5b908301906020820185811115612a7a57600080fd5b8251600160201b811182820188101715612a9357600080fd5b82525081516020918201929091019080838360005b83811015612ac0578181015183820152602001612aa8565b50505050905090810190601f168015612aed5780820380516001836020036101000a031916815260200191505b50604081815260208083528651818401528651929550859450908401925085019080838360005b83811015612b2c578181015183820152602001612b14565b50505050905090810190601f168015612b595780820380516001836020036101000a031916815260200191505b509250505060405180910390a4611a5981613ab0565b612b7a6118ec6136f4565b612bb55760405162461bcd60e51b81526004018080602001828103825260278152602001806151d96027913960400191505060405180910390fd5b612bbe81611dfa565b612bc757611a59565b6000818152600e602052604081206002810154600182015491929091612beb614208565b0390506000612bfd8262093a8061420c565b905080831115612c105750505050611a59565b6000612c1d846001613849565b6002909501949094555050505050565b612c356136f4565b6001600160a01b0316612c4661219d565b6001600160a01b031614612c8f576040805162461bcd60e51b815260206004820181905260248201526000805160206153bf833981519152604482015290519081900360640190fd5b600f805460ff19166001179055565b6000612ca8614f1d565b6000838152600e60209081526040918290208251815460026001821615610100026000190190911604601f81018490049093028101608090810190945260608101838152909391928492849190840182828015612d465780601f10612d1b57610100808354040283529160200191612d46565b820191906000526020600020905b815481529060010190602001808311612d2957829003601f168201915b50505050508152602001600182015481526020016002820154815250509050806020015160001415612d7c576000915050611319565b60001981602001511415612d94576001915050611319565b60408101516020820151600090612da9614208565b0390506000612dbb8262093a8061420c565b90506000612dcc8362093a80614273565b905081841415612de457600295505050505050611319565b81612df0856001613849565b148015612dfe5750612a3081105b15612e1157600295505050505050611319565b5060039695505050505050565b612e296120796136f4565b612e645760405162461bcd60e51b81526004018080602001828103825260318152602001806154a16031913960400191505060405180910390fd5b612e70848484846142da565b50505050565b606080612e8283611cf5565b5091925060019150612e919050565b612e9a84612c9e565b6003811115612ea557fe5b1415612f8357612eb3611ea4565b6040518060600160405280602e81526020016150fc602e91396040516020018083805190602001908083835b60208310612efe5780518252601f199092019160209182019101612edf565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310612f465780518252601f199092019160209182019101612f27565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050611319565b6002612f8e84612c9e565b6003811115612f9957fe5b141561310a57612fa7611ea4565b60316000836040516020018080602001828103825283818151815260200191508051906020019080838360005b83811015612fec578181015183820152602001612fd4565b50505050905090810190601f1680156130195780820380516001836020036101000a031916815260200191505b50925050506040516020818303038152906040528051906020012081526020019081526020016000206040516020018083805190602001908083835b602083106130745780518252601f199092019160209182019101613055565b6001836020036101000a038019825116818451168082178552505050505050905001828054600181600116156101000203166002900480156130ed5780601f106130cb5761010080835404028352918201916130ed565b820191906000526020600020905b8154815290600101906020018083116130d9575b505092505050604051602081830303815290604052915050611319565b613112611ea4565b60326000836040516020018080602001828103825283818151815260200191508051906020019080838360005b8381101561315757818101518382015260200161313f565b50505050905090810190601f1680156131845780820380516001836020036101000a031916815260200191505b50925050506040516020818303038152906040528051906020012081526020019081526020016000206040516020018083805190602001908083835b602083106131df5780518252601f1990920191602091820191016131c0565b6001836020036101000a038019825116818451168082178552505050505050905001828054600181600116156101000203166002900480156132585780601f10613236576101008083540402835291820191613258565b820191906000526020600020905b815481529060010190602001808311613244575b505060408051601f198184030181529190529695505050505050565b6000818152602081905260408120611af3906138a3565b600e6020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529092918391908301828280156133225780601f106132f757610100808354040283529160200191613322565b820191906000526020600020905b81548152906001019060200180831161330557829003601f168201915b5050505050908060010154908060020154905083565b604080516d4445504f5349544f525f524f4c4560901b8152905190819003600e01902061336781611a7a6136f4565b6033906134075760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156133f85780601f106133cd576101008083540402835291602001916133f8565b820191906000526020600020905b8154815290600101906020018083116133db57829003601f168201915b50509250505060405180910390fd5b5060208214156134375760008383602081101561342357600080fd5b503590506134318582613d4a565b50612e70565b60608383602081101561344957600080fd5b810190602081018135600160201b81111561346357600080fd5b82018360208201111561347557600080fd5b803590602001918460208302840111600160201b8311171561349657600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201829052508451949850939650929450505050505b81811015613502576134fa878483815181106134ed57fe5b6020026020010151613d4a565b6001016134d5565b50505050505050565b604080516a4d494e5445525f524f4c4560a81b8152905190819003600b01902081565b60008281526020819052604090206002015461354c90611a7a6136f4565b611b545760405162461bcd60e51b815260040180806020018281038252603081526020018061522c6030913960400191505060405180910390fd5b604080516a5041555345525f524f4c4560a81b8152905190819003600b01902081565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6135e06136f4565b6001600160a01b03166135f161219d565b6001600160a01b03161461363a576040805162461bcd60e51b815260206004820181905260248201526000805160206153bf833981519152604482015290519081900360640190fd5b6001600160a01b03811661367f5760405162461bcd60e51b81526004018080602001828103825260268152602001806150d66026913960400191505060405180910390fd5b600d546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600d80546001600160a01b0319166001600160a01b0392909216919091179055565b612a3081565b6000611af360038363ffffffff61432c16565b60006118b7614338565b600081815260056020526040902080546001600160a01b0319166001600160a01b038416908117909155819061373382611dcc565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006001600160a01b0386166137b35760405162461bcd60e51b815260040180806020018281038252602581526020018061527d6025913960400191505060405180910390fd5b60016137c66137c187614395565b614421565b83868660405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015613820573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b031614905095945050505050565b600082820183811015611af0576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000611af382613d46565b60006138b9826136e1565b6138f45760405162461bcd60e51b815260040180806020018281038252602c815260200180615200602c913960400191505060405180910390fd5b60006138ff83611dcc565b9050806001600160a01b0316846001600160a01b0316148061393a5750836001600160a01b031661392f846113b5565b6001600160a01b0316145b8061394a575061394a81856135aa565b949350505050565b826001600160a01b031661396582611dcc565b6001600160a01b0316146139aa5760405162461bcd60e51b81526004018080602001828103825260298152602001806153df6029913960400191505060405180910390fd5b6001600160a01b0382166139ef5760405162461bcd60e51b815260040180806020018281038252602481526020018061518f6024913960400191505060405180910390fd5b6139fa83838361446d565b613a056000826136fe565b6001600160a01b0383166000908152600260205260409020613a2d908263ffffffff6144cd16565b506001600160a01b0382166000908152600260205260409020613a56908263ffffffff6144d916565b50613a696003828463ffffffff6144e516565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000613abb82611dcc565b9050613ac98160008461446d565b613ad46000836136fe565b6000828152600960205260409020546002600019610100600184161502019091160415613b12576000828152600960205260408120613b1291614f3e565b6001600160a01b0381166000908152600260205260409020613b3a908363ffffffff6144cd16565b50613b4c60038363ffffffff6144fb16565b5060405182906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000828152602081905260409020613ba7908263ffffffff61450716565b15611ac457613bb46136f4565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611af0838361451c565b6000828152602081905260409020613c22908263ffffffff61458016565b15611ac457613c2f6136f4565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b613c7b611cec565b613cc3576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b600b805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa613cf66136f4565b604080516001600160a01b039092168252519081900360200190a1565b6000808080613d228686614595565b9097909650945050505050565b6000613d3c848484614610565b90505b9392505050565b5490565b6001600160a01b038216613da5576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b613dae816136e1565b15613e00576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b613e0c6000838361446d565b6001600160a01b0382166000908152600260205260409020613e34908263ffffffff6144d916565b50613e476003828463ffffffff6144e516565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80546001019055565b6040805142602080830191909152448284015260608083018590528351808403909101815260809092019092528051910120600090613ecc848261469d565b5092915050565b613edb611cec565b15613f20576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b600b805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613cf66136f4565b6000611af0836001600160a01b0384166146f7565b600082613f7a57506000611af3565b82820282848281613f8757fe5b0414611af05760405162461bcd60e51b81526004018080602001828103825260218152602001806153726021913960400191505060405180910390fd5b611ac482826040518060200160405280600081525061470f565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036816040518080602001828103825283818151815260200191508051906020019080838360005b8381101561403d578181015183820152602001614025565b50505050905090810190601f16801561406a5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b60385482906001600160a01b038083169116146140c85760405162461bcd60e51b815260040180806020018281038252602b815260200180615036602b913960400191505060405180910390fd5b606060008060008580602001905160808110156140e457600080fd5b8101908080516040519392919084600160201b82111561410357600080fd5b90830190602082018581111561411857600080fd5b8251600160201b81118282018810171561413157600080fd5b82525081516020918201929091019080838360005b8381101561415e578181015183820152602001614146565b50505050905090810190601f16801561418b5780820380516001836020036101000a031916815260200191505b5060408181526020838101518483015160609586015195850184528885528285018290528484018190526000868152600e84529390932084518051999d50919b5092995093975091959094506141e79350849290910190614ea3565b50602082015160018201556040909101516002909101555050505050505050565b4290565b6000808211614262576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161426b57fe5b049392505050565b60008082116142c9576040805162461bcd60e51b815260206004820152601860248201527f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000604482015290519081900360640190fd5b8183816142d257fe5b069392505050565b6142e5848484613952565b6142f184848484614761565b612e705760405162461bcd60e51b81526004018080602001828103825260328152602001806150616032913960400191505060405180910390fd5b6000611af083836146f7565b6000333014156143905760606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031691506113b29050565b503390565b600060405180608001604052806043815260200161509360439139805190602001208260000151836020015184604001518051906020012060405160200180858152602001848152602001836001600160a01b03166001600160a01b03168152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b600061442b6118db565b82604051602001808061190160f01b81525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b6001600160a01b0382161580614487575061448781611dfa565b6144c25760405162461bcd60e51b815260040180806020018281038252602781526020018061547a6027913960400191505060405180910390fd5b6114ed8383836148e1565b6000611af083836148ec565b6000611af083836149b2565b6000613d3c84846001600160a01b0385166149fc565b6000611af08383614a93565b6000611af0836001600160a01b0384166149b2565b8154600090821061455e5760405162461bcd60e51b8152600401808060200182810382526022815260200180614fba6022913960400191505060405180910390fd5b82600001828154811061456d57fe5b9060005260206000200154905092915050565b6000611af0836001600160a01b0384166148ec565b8154600090819083106145d95760405162461bcd60e51b81526004018080602001828103825260228152602001806153506022913960400191505060405180910390fd5b60008460000184815481106145ea57fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b6000828152600184016020526040812054828161466e5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561266757818101518382015260200161264f565b5084600001600182038154811061468157fe5b9060005260206000209060020201600101549150509392505050565b6000828152600e6020526040902060606146c16146bc84612710614273565b614b67565b80519091506146d69083906020840190614ea3565b506146df614208565b600183015560006146ef85611dcc565b505050505050565b60009081526001919091016020526040902054151590565b6147198383613d4a565b6147266000848484614761565b6114ed5760405162461bcd60e51b81526004018080602001828103825260328152602001806150616032913960400191505060405180910390fd5b6000614775846001600160a01b0316614c53565b6147815750600161394a565b60606148a7630a85bd0160e11b6147966136f4565b88878760405160240180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561480f5781810151838201526020016147f7565b50505050905090810190601f16801561483c5780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001615061603291396001600160a01b038816919063ffffffff614c5916565b905060008180602001905160208110156148c057600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b6114ed838383614c68565b600081815260018301602052604081205480156149a8578354600019808301919081019060009087908390811061491f57fe5b906000526020600020015490508087600001848154811061493c57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061496c57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611af3565b6000915050611af3565b60006149be83836146f7565b6149f457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611af3565b506000611af3565b600082815260018401602052604081205480614a61575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055613d3f565b82856000016001830381548110614a7457fe5b9060005260206000209060020201600101819055506000915050613d3f565b600081815260018301602052604081205480156149a85783546000198083019190810190600090879083908110614ac657fe5b9060005260206000209060020201905080876000018481548110614ae657fe5b600091825260208083208454600290930201918255600193840154918401919091558354825289830190526040902090840190558654879080614b2557fe5b6000828152602080822060026000199094019384020182815560019081018390559290935588815289820190925260408220919091559450611af39350505050565b606060005b600a811015614c4d57601081600a8110614b8257fe5b601091828204019190066002029054906101000a900461ffff1661ffff168311614c4557601181600a8110614bb357fe5b01805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015614c385780601f10614c0d57610100808354040283529160200191614c38565b820191906000526020600020905b815481529060010190602001808311614c1b57829003601f168201915b5050505050915050611319565b600101614b6c565b50919050565b3b151590565b6060613d3c8484600085614cb7565b614c738383836114ed565b614c7b611cec565b156114ed5760405162461bcd60e51b815260040180806020018281038252602b815260200180614fdc602b913960400191505060405180910390fd5b606082471015614cf85760405162461bcd60e51b81526004018080602001828103825260268152602001806151b36026913960400191505060405180910390fd5b614d0185614c53565b614d52576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310614d915780518252601f199092019160209182019101614d72565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614df3576040519150601f19603f3d011682016040523d82523d6000602084013e614df8565b606091505b5091509150614e08828286614e13565b979650505050505050565b60608315614e22575081613d3f565b825115614e325782518084602001fd5b60405162461bcd60e51b815260206004820181815284516024840152845185939192839260440191908501908083836000831561266757818101518382015260200161264f565b60405180606001604052806000815260200160006001600160a01b03168152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614ee457805160ff1916838001178555614f11565b82800160010185558215614f11579182015b82811115614f11578251825591602001919060010190614ef6565b506127e7929150614f7e565b60405180606001604052806060815260200160008152602001600081525090565b50805460018160011615610100020316600290046000825580601f10614f645750611a59565b601f016020900490600052602060002090810190611a5991905b6113b291905b808211156127e75760008155600101614f8456fe4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444552456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732315061757361626c653a20746f6b656e207472616e73666572207768696c6520706175736564416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e744678426173654368696c6454756e6e656c3a20494e56414c49445f53454e4445525f46524f4d5f524f4f544552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e6174757265294f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373516d5764316d6e374475477978394279664e6571437367645355734a5a316372616769746761796773714476456d4765726d696e6174696f6e2073746172747320323032312d30342d31325431363a30303a30305a4552433732315072657365744d696e7465725061757365724175746f49643a206d75737420686176652070617573657220726f6c6520746f2070617573654552433732313a207472616e7366657220746f20746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4f6e6c7920746865204f776e65722063616e20776174657220612043727970744f72636869642e4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b654368696c644552433732313a20494e56414c49445f544f4b454e5f4f574e4552204e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5349474e45524552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e45746865722076616c75652073656e742069732062656c6f7720746865207072696365456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e6473536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e5369676e657220616e64207369676e617475726520646f206e6f74206d61746368596f752063616e20706c616e74206d696e696d756d20312c206d6178696d756d2032302043727970744f7263686964734552433732313a20617070726f76616c20746f2063757272656e74206f776e6572446561642043727970744f7263686964732063616e6e6f74206265207472616e736665727265644552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644f6e6c7920746865204f776e65722063616e206765726d696e61746520612043727970744f72636869642e4552433732315072657365744d696e7465725061757365724175746f49643a206d7573742068617665206d696e74657220726f6c6520746f206d696e744552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644552433732315072657365744d696e7465725061757365724175746f49643a206d75737420686176652070617573657220726f6c6520746f20756e70617573654678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f414c52454144595f534554416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220e290e661f06b099131748d4903ab89ac02e7e4c155b3877ae9cfb4be903ad42964736f6c63430006060033516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f637970726970656469756d2d63616c63656f6c75732e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f64656e64726f7068796c61782d6c696e64656e69692e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f70617068696f706564696c756d2d726f7468736368696c6469616e756d2e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f706c6174616e74686572612d617a6f726963612e6a736f6e454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f637970726970656469756d2d63616c63656f6c75732e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f7068616c61656e6f707369732d6d6963686f6c69747a69692e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f76616e64612d636f6572756c65612e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f6d696c746f6e69612d6b61796173696d61652e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f70617068696f706564696c756d2d766965746e616d656e73652e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f6775617269616e7468652d617572616e74696163612e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f7368656e7a68656e6963612d6f726368696461636561652e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f6d696c746f6e69612d6b61796173696d61652e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f76616e64612d636f6572756c65612e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f70617068696f706564696c756d2d726f7468736368696c6469616e756d2e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f6775617269616e7468652d617572616e74696163612e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f70617068696f706564696c756d2d766965746e616d656e73652e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f64656e64726f7068796c61782d6c696e64656e69692e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f7068616c61656e6f707369732d6d6963686f6c69747a69692e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f7368656e7a68656e6963612d6f726368696461636561652e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f706c6174616e74686572612d617a6f726963612e6a736f6e",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "baseURI()": {
        "details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}.     * Requirements:     * - The caller must own `tokenId` or be an approved operator."
      },
      "deposit(address,bytes)": {
        "details": "Should be callable only by ChildChainManager Should handle deposit by minting the required tokenId for user Make sure minting is done only by this function",
        "params": {
          "depositData": "abi encoded tokenId",
          "user": "user address for whom deposit is being done"
        }
      },
      "encodeTokenMetadata(uint256)": {
        "params": {
          "tokenId": "Token for which URI to be fetched"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(address)": {
        "details": "Creates a new token for `to`. Its token ID will be automatically assigned (and available on the emitted {IERC721-Transfer} event), and the token URI autogenerated based on the base URI passed at construction.     * See {ERC721-_mint}.     * Requirements:     * - the caller must have the `MINTER_ROLE`."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pause()": {
        "details": "Pauses all token transfers.     * See {ERC721Pausable} and {Pausable-_pause}.     * Requirements:     * - the caller must have the `PAUSER_ROLE`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpauses all token transfers.     * See {ERC721Pausable} and {Pausable-_unpause}.     * Requirements:     * - the caller must have the `PAUSER_ROLE`."
      },
      "withdraw()": {
        "details": "Withdraw ether from this contract (Callable by owner only)"
      },
      "withdraw(uint256)": {
        "details": "Should burn user's token. This transaction will be verified when exiting on root chain",
        "params": {
          "tokenId": "tokenId to withdraw"
        }
      },
      "withdrawBatch(uint256[])": {
        "details": "Should burn user's tokens. This transaction will be verified when exiting on root chain",
        "params": {
          "tokenIds": "tokenId list to withdraw"
        }
      },
      "withdrawWithMetadata(uint256)": {
        "details": "Should handle withraw by burning user's token.     * This transaction will be verified when exiting on root chain",
        "params": {
          "tokenId": "tokenId to withdraw"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "deposit(address,bytes)": {
        "notice": "called when token is deposited on root chain"
      },
      "encodeTokenMetadata(uint256)": {
        "notice": "This method is supposed to be called by client when withdrawing token with metadata and pass return value of this function as second paramter of `withdrawWithMetadata` method     * It can be overridden by clients to encode data in a different form, which needs to be decoded back by them correctly during exiting"
      },
      "withdraw(uint256)": {
        "notice": "called when user wants to withdraw token back to root chain"
      },
      "withdrawBatch(uint256[])": {
        "notice": "called when user wants to withdraw multiple tokens back to root chain"
      },
      "withdrawWithMetadata(uint256)": {
        "notice": "called when user wants to withdraw token back to root chain with arbitrary metadata"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 549,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)545_storage)"
      },
      {
        "astId": 932,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 3555,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "_holderTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(UintSet)6038_storage)"
      },
      {
        "astId": 3557,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "_tokenOwners",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(UintToAddressMap)5415_storage"
      },
      {
        "astId": 3561,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3567,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3569,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "_name",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 3571,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "_symbol",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 3575,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3577,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "_baseURI",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 6151,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "_paused",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 1374,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "_tokenIdTracker",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)5041_storage"
      },
      {
        "astId": 817,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "_owner",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 8425,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "cryptorchids",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(CryptOrchid)8421_storage)"
      },
      {
        "astId": 8433,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "saleStarted",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 8436,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "growingStarted",
        "offset": 1,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 8470,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "limits",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_uint16)10_storage"
      },
      {
        "astId": 8485,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "genum",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_string_storage)10_storage"
      },
      {
        "astId": 8500,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "speciesIPFSConstant",
        "offset": 0,
        "slot": "27",
        "type": "t_array(t_string_storage)10_storage"
      },
      {
        "astId": 8515,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "deadSpeciesIPFSConstant",
        "offset": 0,
        "slot": "37",
        "type": "t_array(t_string_storage)10_storage"
      },
      {
        "astId": 8517,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "47",
        "type": "t_struct(Counter)5041_storage"
      },
      {
        "astId": 8521,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "requestToToken",
        "offset": 0,
        "slot": "48",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 8525,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "speciesIPFS",
        "offset": 0,
        "slot": "49",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 8529,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "deadSpeciesIPFS",
        "offset": 0,
        "slot": "50",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 11967,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "_revertMsg",
        "offset": 0,
        "slot": "51",
        "type": "t_string_storage"
      },
      {
        "astId": 12159,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "inited",
        "offset": 0,
        "slot": "52",
        "type": "t_bool"
      },
      {
        "astId": 12066,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "domainSeperator",
        "offset": 0,
        "slot": "53",
        "type": "t_bytes32"
      },
      {
        "astId": 12205,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "nonces",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 19156,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "fxChild",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 19158,
        "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
        "label": "fxRootTunnel",
        "offset": 0,
        "slot": "56",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)10_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[10]",
        "numberOfBytes": "320"
      },
      "t_array(t_struct(MapEntry)5089_storage)dyn_storage": {
        "base": "t_struct(MapEntry)5089_storage",
        "encoding": "dynamic_array",
        "label": "struct EnumerableMap.MapEntry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint16)10_storage": {
        "base": "t_uint16",
        "encoding": "inplace",
        "label": "uint16[10]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(UintSet)6038_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)6038_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)545_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)545_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(CryptOrchid)8421_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CryptOrchidGoerli.CryptOrchid)",
        "numberOfBytes": "32",
        "value": "t_struct(CryptOrchid)8421_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)5917_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5916,
            "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5652_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)5041_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 5040,
            "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(CryptOrchid)8421_storage": {
        "encoding": "inplace",
        "label": "struct CryptOrchidGoerli.CryptOrchid",
        "members": [
          {
            "astId": 8416,
            "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
            "label": "species",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 8418,
            "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
            "label": "plantedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8420,
            "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
            "label": "waterLevel",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Map)5097_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Map",
        "members": [
          {
            "astId": 5092,
            "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
            "label": "_entries",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(MapEntry)5089_storage)dyn_storage"
          },
          {
            "astId": 5096,
            "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MapEntry)5089_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.MapEntry",
        "members": [
          {
            "astId": 5086,
            "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
            "label": "_key",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 5088,
            "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
            "label": "_value",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)545_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 542,
            "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)5917_storage"
          },
          {
            "astId": 544,
            "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)5652_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5647,
            "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5651,
            "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)6038_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 6037,
            "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5652_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintToAddressMap)5415_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.UintToAddressMap",
        "members": [
          {
            "astId": 5414,
            "contract": "contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol:CryptOrchidERC721Child",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)5097_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}