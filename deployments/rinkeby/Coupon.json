{
  "address": "0xa54678327bf5f00f855ee141D6798A70F7899f2E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cryptorchidsAddress",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PROMOTION_END",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressEntriesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkEligibility",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "eligibleTokens",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "rebateAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cryptorchidsERC721",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRebate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "drawingEntriesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "promotionOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "promotionStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebatesAvailable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawUnclaimed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcf8931f24adf30c7cce2fb32534712e01e93d1046c658b41b3a974abf85b1b49",
  "receipt": {
    "to": null,
    "from": "0x0090720FeD7Fed66eD658118b7B3BB0189D3A495",
    "contractAddress": "0xa54678327bf5f00f855ee141D6798A70F7899f2E",
    "transactionIndex": 11,
    "gasUsed": "1011567",
    "logsBloom": "0x
    "blockHash": "0x4b1ae603c20e8ebdad76280831784f08bbfe99cabbea9e51d123246a5402fa9f",
    "transactionHash": "0xcf8931f24adf30c7cce2fb32534712e01e93d1046c658b41b3a974abf85b1b49",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 8562291,
        "transactionHash": "0xcf8931f24adf30c7cce2fb32534712e01e93d1046c658b41b3a974abf85b1b49",
        "address": "0xa54678327bf5f00f855ee141D6798A70F7899f2E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x4b1ae603c20e8ebdad76280831784f08bbfe99cabbea9e51d123246a5402fa9f"
      }
    ],
    "blockNumber": 8562291,
    "cumulativeGasUsed": "1658412",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x010D59DC989f6cFdDBb0d0E5A9c9Be0c1CF9840F"
  ],
  "solcInputHash": "a7a2b6e02acb2a93abbf8f6e817ddffa",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cryptorchidsAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PROMOTION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressEntriesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkEligibility\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"eligibleTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"rebateAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptorchidsERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRebate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawingEntriesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promotionOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promotionStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebatesAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUnclaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{\"checkEligibility()\":{\"details\":\"calls public functions on the CryptOrchids contract to build an array of eligible token IDs and a rebate amount.\",\"returns\":{\"eligibleTokens\":\"uint256[] Uncompacted array of 0s and eligible token IDs\",\"rebateAmount\":\"uint256 Eligible tokens * currentRebate\"}},\"currentRebate()\":{\"details\":\"calls CryptOrchids.currentPrice and finds difference to . Then transfers caller rebateAmount.\"},\"enter()\":{\"details\":\"Adds address to drawingEntries, increments entriesCount, and increases pot for each eligible token, while marking each token redeemed.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"promotionOpen()\":{\"details\":\"@return bool Whether promotion is open for entries.\"},\"redeem()\":{\"details\":\"calls checkEligibility and sets all eligibleTokens as redeemed. Then transfers caller rebateAmount.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawUnclaimed()\":{\"details\":\"Transfer remaining balance to owner if after PROMOTION_END.     \"}}},\"userdoc\":{\"methods\":{\"checkEligibility()\":{\"notice\":\"Check rebate value and eligible tokens. Tokens are valid if they are planted after this contract is deployed, alive, and not yet redeemed.\"},\"currentRebate()\":{\"notice\":\"Current rebate amount for eligible token. Based on CryptOrchids current price, the ramping rebate is intended to address the regrettable FOMO ramp pricing. Starts at 0.02ETH, and increases with inverse correlation to price ramp to offer effectively straight 0.04 ETH for seeds.\"},\"enter()\":{\"notice\":\"Redeem tokens for entries in drawing.\"},\"promotionOpen()\":{\"notice\":\"Public function for whether the promotion is open. The promotion is only open if the contract balance is greater than the currentRebate. Displayed on CryptOrchids nursery for transparency.\"},\"rebatesAvailable()\":{\"notice\":\"Current count of rebates available as determined by safeBalance and currentRebate\"},\"redeem()\":{\"notice\":\"Claim ETH for valid tokens. Check for valid tokens before claming.\"},\"withdrawUnclaimed()\":{\"notice\":\"Withdraw ether from this contract once the promotion is over.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/Coupon/Coupon.sol\":\"Coupon\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\"},\"contracts/Coupon/Coupon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.6 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../Interfaces/ERC721.sol\\\";\\n\\ncontract Coupon is Ownable {\\n    using SafeMath for uint256;\\n    mapping(uint256 => bool) internal redemptions;\\n    mapping(address => uint256) public addressEntriesCount;\\n\\n    uint256 public constant PROMOTION_END = 1622520000;\\n    uint256 internal constant REBATE_AMOUNT = 20000000000000000;\\n    uint256 internal constant MINT_FLOOR = 40000000000000000;\\n\\n    uint256 public promotionStart;\\n    address public cryptorchidsERC721;\\n\\n    uint256 public drawingEntriesCount;\\n    uint256 public pot;\\n    address[] internal drawingEntries;\\n\\n    constructor(address cryptorchidsAddress) public payable {\\n        cryptorchidsERC721 = cryptorchidsAddress;\\n        promotionStart = block.timestamp;\\n    }\\n\\n    /** Public function for whether the promotion is open. The promotion is only\\n     * open if the contract balance is greater than the currentRebate. Displayed\\n     * on CryptOrchids nursery for transparency.\\n     * @dev\\n     * @return bool Whether promotion is open for entries.\\n     */\\n    function promotionOpen() public view returns (bool) {\\n        if (block.timestamp > PROMOTION_END) return false;\\n        if (pot > address(this).balance + currentRebate()) return false;\\n        if (currentRebate() > address(this).balance) return false;\\n\\n        return true;\\n    }\\n\\n    /** Check rebate value and eligible tokens. Tokens are valid if they are planted\\n     * after this contract is deployed, alive, and not yet redeemed.\\n     * @dev calls public functions on the CryptOrchids contract to build\\n     * an array of eligible token IDs and a rebate amount.\\n     * @return eligibleTokens uint256[] Uncompacted array of 0s and eligible token IDs\\n     * @return rebateAmount uint256 Eligible tokens * currentRebate\\n     */\\n    function checkEligibility()\\n        public\\n        view\\n        returns (\\n            uint256[] memory eligibleTokens,\\n            uint256 rebateAmount,\\n            uint256 count\\n        )\\n    {\\n        require(promotionOpen(), \\\"Promotion over\\\");\\n\\n        uint256 _rebateAmount = 0;\\n        uint256 tokenCount = ERC721(cryptorchidsERC721).balanceOf(msg.sender);\\n        uint256[] memory _eligibleTokens = new uint256[](tokenCount);\\n\\n        for (uint256 index = 0; index < tokenCount - 1; index++) {\\n            uint256 tokenId = ERC721(cryptorchidsERC721).tokenOfOwnerByIndex(msg.sender, index);\\n            bool flowering = ERC721(cryptorchidsERC721).flowering(tokenId);\\n            (, uint256 plantedAt, , ) = ERC721(cryptorchidsERC721).getTokenMetadata(tokenId);\\n\\n            if (redemptions[tokenId] != true && flowering && plantedAt > promotionStart) {\\n                _eligibleTokens[index] = tokenId;\\n                _rebateAmount += currentRebate();\\n                count += 1;\\n            }\\n        }\\n\\n        return (_eligibleTokens, _rebateAmount, count);\\n    }\\n\\n    /** Claim ETH for valid tokens. Check for valid tokens before claming.\\n     * @dev calls checkEligibility and sets all eligibleTokens as redeemed.\\n     * Then transfers caller rebateAmount.\\n     */\\n    function redeem() public virtual returns (uint256) {\\n        require(block.timestamp < PROMOTION_END, \\\"Promotion over\\\");\\n        (uint256[] memory redeeming, uint256 rebateAmount, ) = checkEligibility();\\n        require(safeBalance() >= rebateAmount, \\\"COC:rdm:paused\\\");\\n\\n        for (uint256 index = 0; index < redeeming.length - 1; index++) {\\n            uint256 tokenId = redeeming[index];\\n            if (tokenId > 0) redemptions[tokenId] = true;\\n        }\\n\\n        payable(msg.sender).transfer(rebateAmount);\\n\\n        return rebateAmount;\\n    }\\n\\n    /** Redeem tokens for entries in drawing.\\n     * @dev Adds address to drawingEntries, increments entriesCount, and\\n     * increases pot for each eligible token, while marking each token redeemed.\\n     */\\n    function enter() public virtual {\\n        require(block.timestamp < PROMOTION_END, \\\"Promotion over\\\");\\n        (uint256[] memory redeeming, , uint256 count) = checkEligibility();\\n        require(safeBalance() >= currentRebate().mul(count), \\\"COC:enr:paused\\\");\\n\\n        for (uint256 index = 0; index < redeeming.length - 1; index++) {\\n            uint256 tokenId = redeeming[index];\\n            if (tokenId > 0) {\\n                redemptions[tokenId] = true;\\n                drawingEntriesCount += 1;\\n                addressEntriesCount[msg.sender] += 1;\\n                drawingEntries.push(address(msg.sender));\\n                pot += currentRebate();\\n            }\\n        }\\n    }\\n\\n    /** Current rebate amount for eligible token. Based on CryptOrchids current price,\\n     * the ramping rebate is intended to address the regrettable FOMO ramp pricing.\\n     * Starts at 0.02ETH, and increases with inverse correlation to price ramp to\\n     * offer effectively straight 0.04 ETH for seeds.\\n     * @dev calls CryptOrchids.currentPrice and finds difference to .\\n     * Then transfers caller rebateAmount.\\n     */\\n    function currentRebate() public view returns (uint256) {\\n        if (drawingEntriesCount <= 100) return REBATE_AMOUNT;\\n        uint256 currentPrice = ERC721(cryptorchidsERC721).currentPrice();\\n\\n        if (currentPrice == MINT_FLOOR) return REBATE_AMOUNT;\\n\\n        return currentPrice - MINT_FLOOR;\\n    }\\n\\n    /** Current count of rebates available as determined by safeBalance and currentRebate\\n     */\\n    function rebatesAvailable() public view returns (uint256) {\\n        return safeBalance().div(currentRebate());\\n    }\\n\\n    /** Current rebate amount for eligible token. Based on CryptOrchids current price,\\n     * the ramping rebate is intended to address the regrettable FOMO ramp pricing.\\n     * Starts at 0.02ETH,\\n     * @dev calls CryptOrchids.currentPrice and finds difference to .\\n     * Then transfers caller rebateAmount.\\n     */\\n    function safeBalance() internal view returns (uint256) {\\n        return address(this).balance - pot;\\n    }\\n\\n    /** Withdraw ether from this contract once the promotion is over.\\n     * @dev Transfer remaining balance to owner if after PROMOTION_END.\\n     *\\n     */\\n    function withdrawUnclaimed() public onlyOwner {\\n        require(block.timestamp > PROMOTION_END, \\\"X\\\");\\n        uint256 balance = address(this).balance;\\n        payable(msg.sender).transfer(balance);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xbaad834a55748b0a70a659c0556b69d4f79ed5fe9a45b1d83e0590636f516f7e\"},\"contracts/Interfaces/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6 <0.9.0;\\n\\ninterface ERC721 {\\n    enum Stage {Unsold, Seed, Flower, Dead}\\n\\n    struct CryptOrchid {\\n        string species;\\n        uint256 plantedAt;\\n        uint256 waterLevel;\\n    }\\n\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\n    ///  may be created and assigned without emitting Transfer. At the time of\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when the approved address for an NFT is changed or\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\n    ///  When a Transfer event emits, this also indicates that the approved\\n    ///  address for that NFT (if any) is reset to none.\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\n    ///  The operator can manage all NFTs of the owner.\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n    /// @notice Count all NFTs assigned to an owner\\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\\n    ///  function throws for queries about the zero address.\\n    /// @param _owner An address for whom to query the balance\\n    /// @return The number of NFTs owned by `_owner`, possibly zero\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Find the owner of an NFT\\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\\n    ///  about them do throw.\\n    /// @param _tokenId The identifier for an NFT\\n    /// @return The address of the owner of the NFT\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n    ///  `onERC721Received` on `_to` and throws if the return value is not\\n    ///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev This works identically to the other function with an extra data parameter,\\n    ///  except this function just sets data to \\\"\\\".\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external payable;\\n\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n    ///  THEY MAY BE PERMANENTLY LOST\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external payable;\\n\\n    /// @notice Change or reaffirm the approved address for an NFT\\n    /// @dev The zero address indicates there is no approved address.\\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\n    ///  operator of the current owner.\\n    /// @param _approved The new approved NFT controller\\n    /// @param _tokenId The NFT to approve\\n    function approve(address _approved, uint256 _tokenId) external payable;\\n\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\n    ///  all of `msg.sender`'s assets\\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\\n    ///  multiple operators per owner.\\n    /// @param _operator Address to add to the set of authorized operators\\n    /// @param _approved True if the operator is approved, false to revoke approval\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /// @notice Get the approved address for a single NFT\\n    /// @dev Throws if `_tokenId` is not a valid NFT.\\n    /// @param _tokenId The NFT to find the approved address for\\n    /// @return The approved address for this NFT, or the zero address if there is none\\n    function getApproved(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Query if an address is an authorized operator for another address\\n    /// @param _owner The address that owns the NFTs\\n    /// @param _operator The address that acts on behalf of the owner\\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n\\n    function flowering(uint256 tokenId) external view returns (bool);\\n\\n    function currentPrice() external view returns (uint256 price);\\n\\n    function getTokenMetadata(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            string memory,\\n            uint256,\\n            uint256,\\n            Stage\\n        );\\n}\\n\",\"keccak256\":\"0x401d250b0c98f4cc3dfdef4d1c3b1f56b5e68143dee5e837d861101b0eb0d332\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {
      "checkEligibility()": {
        "details": "calls public functions on the CryptOrchids contract to build an array of eligible token IDs and a rebate amount.",
        "returns": {
          "eligibleTokens": "uint256[] Uncompacted array of 0s and eligible token IDs",
          "rebateAmount": "uint256 Eligible tokens * currentRebate"
        }
      },
      "currentRebate()": {
        "details": "calls CryptOrchids.currentPrice and finds difference to . Then transfers caller rebateAmount."
      },
      "enter()": {
        "details": "Adds address to drawingEntries, increments entriesCount, and increases pot for each eligible token, while marking each token redeemed."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "promotionOpen()": {
        "details": "@return bool Whether promotion is open for entries."
      },
      "redeem()": {
        "details": "calls checkEligibility and sets all eligibleTokens as redeemed. Then transfers caller rebateAmount."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawUnclaimed()": {
        "details": "Transfer remaining balance to owner if after PROMOTION_END.     "
      }
    }
  },
  "userdoc": {
    "methods": {
      "checkEligibility()": {
        "notice": "Check rebate value and eligible tokens. Tokens are valid if they are planted after this contract is deployed, alive, and not yet redeemed."
      },
      "currentRebate()": {
        "notice": "Current rebate amount for eligible token. Based on CryptOrchids current price, the ramping rebate is intended to address the regrettable FOMO ramp pricing. Starts at 0.02ETH, and increases with inverse correlation to price ramp to offer effectively straight 0.04 ETH for seeds."
      },
      "enter()": {
        "notice": "Redeem tokens for entries in drawing."
      },
      "promotionOpen()": {
        "notice": "Public function for whether the promotion is open. The promotion is only open if the contract balance is greater than the currentRebate. Displayed on CryptOrchids nursery for transparency."
      },
      "rebatesAvailable()": {
        "notice": "Current count of rebates available as determined by safeBalance and currentRebate"
      },
      "redeem()": {
        "notice": "Claim ETH for valid tokens. Check for valid tokens before claming."
      },
      "withdrawUnclaimed()": {
        "notice": "Withdraw ether from this contract once the promotion is over."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 814,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4890,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "redemptions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 4894,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "addressEntriesCount",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4905,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "promotionStart",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4907,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "cryptorchidsERC721",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4909,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "drawingEntriesCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4911,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "pot",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4914,
        "contract": "contracts/Coupon/Coupon.sol:Coupon",
        "label": "drawingEntries",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}