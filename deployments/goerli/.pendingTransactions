{
  "0x672ca51797c5781ac3c933f16b056bb1b500d77b0d0e08d4946f4cb88c480a09": {
    "name": "CryptOrchidGoerli",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "CryptOrchidGoerli",
      "sourceName": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol",
      "abi": [
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "ApprovalForAll",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Paused",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "previousAdminRole",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "newAdminRole",
              "type": "bytes32"
            }
          ],
          "name": "RoleAdminChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "name": "RoleGranted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "name": "RoleRevoked",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Unpaused",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "DEFAULT_ADMIN_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "GROWTH_CYCLE",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MAX_CRYPTORCHIDS",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MINTER_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "PAUSER_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "WATERING_WINDOW",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "alive",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "approve",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "baseURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "burn",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "cryptorchids",
          "outputs": [
            {
              "internalType": "string",
              "name": "species",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "plantedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "waterLevel",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "currentPrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "flowering",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "userProvidedSeed",
              "type": "uint256"
            }
          ],
          "name": "germinate",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            }
          ],
          "name": "getRoleAdmin",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "name": "getRoleMember",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            }
          ],
          "name": "getRoleMemberCount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "getTokenMetadata",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "enum CryptOrchidGoerli.Stage",
              "name": "",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "grantRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "growthStage",
          "outputs": [
            {
              "internalType": "enum CryptOrchidGoerli.Stage",
              "name": "",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "hasRole",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "name": "mint",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "pause",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "paused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "renounceRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "name": "requestToToken",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "revokeRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "safeTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "name": "safeTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "setApprovalForAll",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "startGrowing",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "startSale",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "name": "tokenByIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "name": "tokenOfOwnerByIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "transferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "unpause",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "water",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "units",
              "type": "uint256"
            }
          ],
          "name": "webMint",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "withdraw",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "bytecode": "0x600f805461ffff191690556101c060405260006080908152610c0260a0526117ba60c052611f8a60e0526123726101005261256661012052612660610140526126c4610160526126f66101805261270f6101a0526200006390601090600a62000b0c565b506040805161018081018252601761014082019081527f7368656e7a68656e696361206f72636869646163656165000000000000000000610160830152815281518083018352601881527f7068616c61656e6f70736973206d6963686f6c69747a69690000000000000000602082810191909152808301919091528251808401845260158082527f6775617269616e74686520617572616e74696163610000000000000000000000828401528385019190915283518085018552600e81526d76616e646120636f6572756c656160901b818401526060840152835180850185528181527f637970726970656469756d2063616c63656f6c7573000000000000000000000081840152608084015283518085018552601981527f70617068696f706564696c756d20766965746e616d656e7365000000000000008184015260a08401528351808501855260128152716d696c746f6e6961206b61796173696d616560701b8184015260c084015283518085018552601381527f706c6174616e746865726120617a6f72696361000000000000000000000000008184015260e0840152835180850185529081527f64656e64726f7068796c6178206c696e64656e69690000000000000000000000818301526101008301528251808401909352601d83527f70617068696f706564696c756d20726f7468736368696c6469616e756d000000908301526101208101919091526200028390601190600a62000ba9565b50604080516101c08101909152604b610140820181815282916200505f61016084013981526020016040518060800160405280604c815260200162004ef5604c9139815260200160405180608001604052806049815260200162005183604991398152602001604051806080016040528060428152602001620050f060429139815260200160405180608001604052806049815260200162004eac6049913981526020016040518060800160405280604d815260200162004fc9604d91398152602001604051806080016040528060468152602001620050aa604691398152602001604051806080016040528060478152602001620052f96047913981526020016040518060800160405280604981526020016200521960499139815260200160405180608001604052806051815260200162004e14605191399052620003cf90601b90600a62000ba9565b50604080516101c08101909152604b61014082018181528291620052ae61016084013981526020016040518060800160405280604c815260200162005262604c913981526020016040518060800160405280604981526020016200501660499139815260200160405180608001604052806042815260200162004f4160429139815260200160405180608001604052806049815260200162004d826049913981526020016040518060800160405280604d8152602001620051cc604d9139815260200160405180608001604052806046815260200162004f8360469139815260200160405180608001604052806047815260200162004e6560479139815260200160405180608001604052806049815260200162004dcb604991398152602001604051806080016040528060518152602001620051326051913990526200051b90602590600a62000ba9565b506040518060400160405280600c81526020016b43727970744f72636869647360a01b8152506040518060400160405280600581526020016413d490d21160da1b81525060405180604001604052806007815260200166697066733a2f2f60c81b8152508282620005996301ffc9a760e01b6200093660201b60201c565b8151620005ae90600790602085019062000bfc565b508051620005c490600890602084019062000bfc565b50620005e06380ac58cd60e01b6001600160e01b036200093616565b620005fb635b5e139f60e01b6001600160e01b036200093616565b6200061663780e9d6360e01b6001600160e01b036200093616565b5050600b805460ff191690556200064a60006200063b6001600160e01b03620009be16565b6001600160e01b03620009c316565b604080516a4d494e5445525f524f4c4560a81b8152905190819003600b01902062000682906200063b6001600160e01b03620009be16565b604080516a5041555345525f524f4c4560a81b8152905190819003600b019020620006ba906200063b6001600160e01b03620009be16565b620006ce816001600160e01b03620009dc16565b5050506000620006e3620009be60201b60201c565b600d80546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060005b600a8110156200092f57601b81600a81106200074c57fe5b0160316000601184600a81106200075f57fe5b6040805160208082019081529290930180546002600182161561010002600019019091160491840182905292829160609091019084908015620007e65780601f10620007ba57610100808354040283529160200191620007e6565b820191906000526020600020905b815481529060010190602001808311620007c857829003601f168201915b50509250505060405160208183030381529060405280519060200120815260200190815260200160002090805460018160011615610100020316600290046200083192919062000c7d565b50602581600a81106200084057fe5b0160326000601184600a81106200085357fe5b6040805160208082019081529290930180546002600182161561010002600019019091160491840182905292829160609091019084908015620008da5780601f10620008ae57610100808354040283529160200191620008da565b820191906000526020600020905b815481529060010190602001808311620008bc57829003601f168201915b50509250505060405160208183030381529060405280519060200120815260200190815260200160002090805460018160011615610100020316600290046200092592919062000c7d565b5060010162000734565b5062000da9565b6001600160e01b0319808216141562000996576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b335b90565b620009d882826001600160e01b03620009f116565b5050565b8051620009d890600a90602084019062000bfc565b60008281526020818152604090912062000a1691839062002f9962000a73821b17901c565b15620009d85762000a2f6001600160e01b03620009be16565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000a93836001600160a01b0384166001600160e01b0362000a9c16565b90505b92915050565b600062000ab383836001600160e01b0362000af416565b62000aeb5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000a96565b50600062000a96565b60009081526001919091016020526040902054151590565b60018301918390821562000b975791602002820160005b8382111562000b6557835183826101000a81548161ffff021916908361ffff160217905550926020019260020160208160010104928301926001030262000b23565b801562000b955782816101000a81549061ffff021916905560020160208160010104928301926001030262000b65565b505b5062000ba592915062000cf7565b5090565b82600a810192821562000bee579160200282015b8281111562000bee578251805162000bdd91849160209091019062000bfc565b509160200191906001019062000bbd565b5062000ba592915062000d19565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000c3f57805160ff191683800117855562000c6f565b8280016001018555821562000c6f579182015b8281111562000c6f57825182559160200191906001019062000c52565b5062000ba592915062000d41565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000cb8578054855562000c6f565b8280016001018555821562000c6f57600052602060002091601f016020900482015b8281111562000c6f57825482559160010191906001019062000cda565b620009c091905b8082111562000ba557805461ffff1916815560010162000cfe565b620009c091905b8082111562000ba557600062000d37828262000d5e565b5060010162000d20565b620009c091905b8082111562000ba5576000815560010162000d48565b50805460018160011615610100020316600290046000825580601f1062000d86575062000da6565b601f01602090049060005260206000209081019062000da6919062000d41565b50565b613fc98062000db96000396000f3fe6080604052600436106102e85760003560e01c80636c0360eb11610190578063a7eec44b116100dc578063cac21c8f11610095578063e63ab1e91161006f578063e63ab1e914610ca4578063e985e9c514610cb9578063f2fde38b14610cf4578063ffee200c14610d27576102ef565b8063cac21c8f14610ba6578063d539139314610c56578063d547741f14610c6b576102ef565b8063a7eec44b146109f2578063b66a0e5d14610a1c578063b7aaba2014610a31578063b88d4fde14610a7f578063c87b56dd14610b52578063ca15c87314610b7c576102ef565b80639010d07c116101495780639981d4a1116101235780639981d4a1146109705780639d1b464a1461098d578063a217fddf146109a2578063a22cb465146109b7576102ef565b80639010d07c146108f257806391d148541461092257806395d89b411461095b576102ef565b80636c0360eb1461083b57806370a0823114610850578063715018a6146108835780637fd8d953146108985780638456cb59146108c85780638da5cb5b146108dd576102ef565b806336568abe1161024f5780635c975abb116102085780636352211e116101e25780636352211e1461079f5780636573c787146107c95780636a627842146107f35780636b0c004d14610826576102ef565b80635c975abb1461069b57806360316801146106b057806362ff09d614610775576102ef565b806336568abe146105a15780633ccfd60b146105da5780633f4ba83a146105ef57806342842e0e1461060457806342966c68146106475780634f6ccce714610671576102ef565b8063182199cd116102a1578063182199cd1461048357806323b872dd146104ad578063248a9ca3146104f0578063277dec921461051a5780632f2ff15d1461052f5780632f745c5914610568576102ef565b806301ffc9a7146102f457806306fdde031461033c578063081812fc146103c6578063095ea7b31461040c578063179f0b0a1461044757806318160ddd1461046e576102ef565b366102ef57005b600080fd5b34801561030057600080fd5b506103286004803603602081101561031757600080fd5b50356001600160e01b031916610d3c565b604080519115158252519081900360200190f35b34801561034857600080fd5b50610351610d5f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561038b578181015183820152602001610373565b50505050905090810190601f1680156103b85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103d257600080fd5b506103f0600480360360208110156103e957600080fd5b5035610df6565b604080516001600160a01b039092168252519081900360200190f35b34801561041857600080fd5b506104456004803603604081101561042f57600080fd5b506001600160a01b038135169060200135610e58565b005b34801561045357600080fd5b5061045c610f33565b60408051918252519081900360200190f35b34801561047a57600080fd5b5061045c610f3a565b34801561048f57600080fd5b50610328600480360360208110156104a657600080fd5b5035610f4b565b3480156104b957600080fd5b50610445600480360360608110156104d057600080fd5b506001600160a01b03813581169160208101359091169060400135610f6a565b3480156104fc57600080fd5b5061045c6004803603602081101561051357600080fd5b5035610fc1565b34801561052657600080fd5b50610445610fd6565b34801561053b57600080fd5b506104456004803603604081101561055257600080fd5b50803590602001356001600160a01b0316611049565b34801561057457600080fd5b5061045c6004803603604081101561058b57600080fd5b506001600160a01b0381351690602001356110b5565b3480156105ad57600080fd5b50610445600480360360408110156105c457600080fd5b50803590602001356001600160a01b03166110e6565b3480156105e657600080fd5b50610445611147565b3480156105fb57600080fd5b506104456111d8565b34801561061057600080fd5b506104456004803603606081101561062757600080fd5b506001600160a01b03813581169160208101359091169060400135611249565b34801561065357600080fd5b506104456004803603602081101561066a57600080fd5b5035611264565b34801561067d57600080fd5b5061045c6004803603602081101561069457600080fd5b50356112b6565b3480156106a757600080fd5b506103286112d2565b3480156106bc57600080fd5b506106da600480360360208110156106d357600080fd5b50356112db565b60405180806020018581526020018481526020018360038111156106fa57fe5b60ff168152602001828103825286818151815260200191508051906020019080838360005b8381101561073757818101518382015260200161071f565b50505050905090810190601f1680156107645780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561078157600080fd5b5061045c6004803603602081101561079857600080fd5b50356113a0565b3480156107ab57600080fd5b506103f0600480360360208110156107c257600080fd5b50356113b2565b3480156107d557600080fd5b50610328600480360360208110156107ec57600080fd5b50356113e0565b3480156107ff57600080fd5b506104456004803603602081101561081657600080fd5b50356001600160a01b0316611400565b34801561083257600080fd5b5061045c611484565b34801561084757600080fd5b5061035161148a565b34801561085c57600080fd5b5061045c6004803603602081101561087357600080fd5b50356001600160a01b03166114eb565b34801561088f57600080fd5b50610445611553565b3480156108a457600080fd5b50610445600480360360408110156108bb57600080fd5b50803590602001356115ff565b3480156108d457600080fd5b5061044561169b565b3480156108e957600080fd5b506103f061170a565b3480156108fe57600080fd5b506103f06004803603604081101561091557600080fd5b5080359060200135611719565b34801561092e57600080fd5b506103286004803603604081101561094557600080fd5b50803590602001356001600160a01b0316611737565b34801561096757600080fd5b50610351611755565b6104456004803603602081101561098657600080fd5b50356117b6565b34801561099957600080fd5b5061045c611a5c565b3480156109ae57600080fd5b5061045c611b18565b3480156109c357600080fd5b50610445600480360360408110156109da57600080fd5b506001600160a01b0381351690602001351515611b1d565b3480156109fe57600080fd5b5061044560048036036020811015610a1557600080fd5b5035611c22565b348015610a2857600080fd5b50610445611ce0565b348015610a3d57600080fd5b50610a5b60048036036020811015610a5457600080fd5b5035611d51565b60405180826003811115610a6b57fe5b60ff16815260200191505060405180910390f35b348015610a8b57600080fd5b5061044560048036036080811015610aa257600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135640100000000811115610add57600080fd5b820183602082011115610aef57600080fd5b80359060200191846001830284011164010000000083111715610b1157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611ed1945050505050565b348015610b5e57600080fd5b5061035160048036036020811015610b7557600080fd5b5035611f29565b348015610b8857600080fd5b5061045c60048036036020811015610b9f57600080fd5b5035612327565b348015610bb257600080fd5b50610bd060048036036020811015610bc957600080fd5b503561233e565b6040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610c19578181015183820152602001610c01565b50505050905090810190601f168015610c465780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b348015610c6257600080fd5b5061045c6123eb565b348015610c7757600080fd5b5061044560048036036040811015610c8e57600080fd5b50803590602001356001600160a01b031661240e565b348015610cb057600080fd5b5061045c612467565b348015610cc557600080fd5b5061032860048036036040811015610cdc57600080fd5b506001600160a01b038135811691602001351661248a565b348015610d0057600080fd5b5061044560048036036020811015610d1757600080fd5b50356001600160a01b03166124b8565b348015610d3357600080fd5b5061045c6125bb565b6001600160e01b0319811660009081526001602052604090205460ff165b919050565b60078054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610deb5780601f10610dc057610100808354040283529160200191610deb565b820191906000526020600020905b815481529060010190602001808311610dce57829003601f168201915b505050505090505b90565b6000610e01826125c1565b610e3c5760405162461bcd60e51b815260040180806020018281038252602c815260200180613d6f602c913960400191505060405180910390fd5b506000908152600560205260409020546001600160a01b031690565b6000610e63826113b2565b9050806001600160a01b0316836001600160a01b03161415610eb65760405162461bcd60e51b8152600401808060200182810382526021815260200180613e146021913960400191505060405180910390fd5b806001600160a01b0316610ec86125d4565b6001600160a01b03161480610ee95750610ee981610ee46125d4565b61248a565b610f245760405162461bcd60e51b8152600401808060200182810382526038815260200180613c7e6038913960400191505060405180910390fd5b610f2e83836125d8565b505050565b62093a8081565b6000610f466003612646565b905090565b60006002610f5883611d51565b6003811115610f6357fe5b1492915050565b610f7b610f756125d4565b82612651565b610fb65760405162461bcd60e51b8152600401808060200182810382526031815260200180613e5c6031913960400191505060405180910390fd5b610f2e8383836126f5565b60009081526020819052604090206002015490565b610fde6125d4565b6001600160a01b0316610fef61170a565b6001600160a01b031614611038576040805162461bcd60e51b81526020600482018190526024820152600080516020613d9b833981519152604482015290519081900360640190fd5b600f805461ff001916610100179055565b60008281526020819052604090206002015461106c906110676125d4565b611737565b6110a75760405162461bcd60e51b815260040180806020018281038252602f815260200180613a97602f913960400191505060405180910390fd5b6110b18282612853565b5050565b6001600160a01b03821660009081526002602052604081206110dd908363ffffffff6128c216565b90505b92915050565b6110ee6125d4565b6001600160a01b0316816001600160a01b03161461113d5760405162461bcd60e51b815260040180806020018281038252602f815260200180613f65602f913960400191505060405180910390fd5b6110b182826128ce565b61114f6125d4565b6001600160a01b031661116061170a565b6001600160a01b0316146111a9576040805162461bcd60e51b81526020600482018190526024820152600080516020613d9b833981519152604482015290519081900360640190fd5b6040514790339082156108fc029083906000818181858888f193505050501580156110b1573d6000803e3d6000fd5b604080516a5041555345525f524f4c4560a81b8152905190819003600b019020611204906110676125d4565b61123f5760405162461bcd60e51b8152600401808060200182810382526040815260200180613f256040913960400191505060405180910390fd5b61124761293d565b565b610f2e83838360405180602001604052806000815250611ed1565b61126f610f756125d4565b6112aa5760405162461bcd60e51b8152600401808060200182810382526030815260200180613ef56030913960400191505060405180910390fd5b6112b3816129dd565b50565b6000806112ca60038463ffffffff612ab616565b509392505050565b600b5460ff1690565b6000818152600e6020526040812060018101546002820154606093928392839261130488611d51565b8354604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815291869183018282801561138a5780601f1061135f5761010080835404028352916020019161138a565b820191906000526020600020905b81548152906001019060200180831161136d57829003601f168201915b5050505050935093509350935093509193509193565b60306020526000908152604090205481565b60006110e082604051806060016040528060298152602001613ce0602991396003919063ffffffff612ad216565b600060036113ed83611d51565b60038111156113f857fe5b141592915050565b604080516a4d494e5445525f524f4c4560a81b8152905190819003600b01902061142c906110676125d4565b6114675760405162461bcd60e51b815260040180806020018281038252603d815260200180613eb8603d913960400191505060405180910390fd5b61147a81611475600c612ae9565b612aed565b6112b3600c612c27565b61271081565b600a8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610deb5780601f10610dc057610100808354040283529160200191610deb565b60006001600160a01b0382166115325760405162461bcd60e51b815260040180806020018281038252602a815260200180613cb6602a913960400191505060405180910390fd5b6001600160a01b03821660009081526002602052604090206110e090612646565b61155b6125d4565b6001600160a01b031661156c61170a565b6001600160a01b0316146115b5576040805162461bcd60e51b81526020600482018190526024820152600080516020613d9b833981519152604482015290519081900360640190fd5b600d546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600d80546001600160a01b0319169055565b600f54610100900460ff166116455760405162461bcd60e51b8152600401808060200182810382526027815260200180613b4c6027913960400191505060405180910390fd5b6116566116506125d4565b83612651565b6116915760405162461bcd60e51b815260040180806020018281038252602b815260200180613e8d602b913960400191505060405180910390fd5b610f2e8282612c30565b604080516a5041555345525f524f4c4560a81b8152905190819003600b0190206116c7906110676125d4565b6117025760405162461bcd60e51b815260040180806020018281038252603e815260200180613b73603e913960400191505060405180910390fd5b611247612c76565b600d546001600160a01b031690565b60008281526020819052604081206110dd908363ffffffff6128c216565b60008281526020819052604081206110dd908363ffffffff612cf916565b60088054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610deb5780601f10610dc057610100808354040283529160200191610deb565b600f5460ff16611805576040805162461bcd60e51b8152602060048201526015602482015274151a1948139d5c9cd95c9e481a5cc818db1bdcd959605a1b604482015290519081900360640190fd5b61180d610f3a565b6127100381111561185d576040805162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da08189d5b189cc81b19599d605a1b604482015290519081900360640190fd5b612710611868610f3a565b106118b3576040805162461bcd60e51b815260206004820152601660248201527514d85b19481a185cc8185b1c9958591e48195b99195960521b604482015290519081900360640190fd5b6000811180156118c4575060148111155b6118ff5760405162461bcd60e51b8152600401808060200182810382526030815260200180613de46030913960400191505060405180910390fd5b61271061191361190d610f3a565b83612d0e565b1115611966576040805162461bcd60e51b815260206004820152601860248201527f45786365656473204d41585f43525950544f5243484944530000000000000000604482015290519081900360640190fd5b611977611971611a5c565b82612d68565b3410156119b55760405162461bcd60e51b8152600401808060200182810382526023815260200180613d096023913960400191505060405180910390fd5b60005b818110156110b1576119ca602f612c27565b60006119d6602f612ae9565b6040805160a081018252600660608201908152656772616e756d60d01b608083015281526000196020808301919091526000828401819052848152600e8252929092208151805194955091939092611a32928492910190613954565b5060208201516001820155604090910151600290910155611a533382612dc1565b506001016119b8565b600080611a67610f3a565b90506126ac8110611a8357670de0b6b3a7640000915050610df3565b61251c8110611a9d576708e1bc9bf0400000915050610df3565b611d4c8110611ab757670470de4df8200000915050610df3565b610dac8110611ad1576702386f26fc100000915050610df3565b6105dc8110611aeb5767011c37937e080000915050610df3565b6101f48110611b045766d529ae9e860000915050610df3565b668e1bc9bf040000915050610df3565b5090565b600081565b611b256125d4565b6001600160a01b0316826001600160a01b03161415611b8b576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b8060066000611b986125d4565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611bdc6125d4565b60408051841515815290516001600160a01b0392909216917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319181900360200190a35050565b611c2d610f756125d4565b611c685760405162461bcd60e51b8152600401808060200182810382526027815260200180613bfb6027913960400191505060405180910390fd5b611c71816113e0565b611c7a576112b3565b6000818152600e602052604081206002810154600182015491929091611c9e612ddb565b0390506000611cb08262093a80612ddf565b905080831115611cc357505050506112b3565b6000611cd0846001612d0e565b6002909501949094555050505050565b611ce86125d4565b6001600160a01b0316611cf961170a565b6001600160a01b031614611d42576040805162461bcd60e51b81526020600482018190526024820152600080516020613d9b833981519152604482015290519081900360640190fd5b600f805460ff19166001179055565b6000611d5b6139ce565b6000838152600e60209081526040918290208251815460026001821615610100026000190190911604601f81018490049093028101608090810190945260608101838152909391928492849190840182828015611df95780601f10611dce57610100808354040283529160200191611df9565b820191906000526020600020905b815481529060010190602001808311611ddc57829003601f168201915b50505050508152602001600182015481526020016002820154815250509050806020015160001415611e2f576000915050610d5a565b60001981602001511415611e47576001915050610d5a565b60408101516020820151600090611e5c612ddb565b0390506000611e6e8262093a80612ddf565b90506000611e7f8362093a80612e46565b905081841415611e9757600295505050505050610d5a565b81611ea3856001612d0e565b148015611eb15750612a3081105b15611ec457600295505050505050610d5a565b5060039695505050505050565b611edc6116506125d4565b611f175760405162461bcd60e51b8152600401808060200182810382526031815260200180613e5c6031913960400191505060405180910390fd5b611f2384848484612ead565b50505050565b606080611f35836112db565b5091925060019150611f449050565b611f4d84611d51565b6003811115611f5857fe5b141561203657611f6661148a565b6040518060600160405280602e8152602001613b1e602e91396040516020018083805190602001908083835b60208310611fb15780518252601f199092019160209182019101611f92565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310611ff95780518252601f199092019160209182019101611fda565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050610d5a565b600261204184611d51565b600381111561204c57fe5b14156121bd5761205a61148a565b60316000836040516020018080602001828103825283818151815260200191508051906020019080838360005b8381101561209f578181015183820152602001612087565b50505050905090810190601f1680156120cc5780820380516001836020036101000a031916815260200191505b50925050506040516020818303038152906040528051906020012081526020019081526020016000206040516020018083805190602001908083835b602083106121275780518252601f199092019160209182019101612108565b6001836020036101000a038019825116818451168082178552505050505050905001828054600181600116156101000203166002900480156121a05780601f1061217e5761010080835404028352918201916121a0565b820191906000526020600020905b81548152906001019060200180831161218c575b505092505050604051602081830303815290604052915050610d5a565b6121c561148a565b60326000836040516020018080602001828103825283818151815260200191508051906020019080838360005b8381101561220a5781810151838201526020016121f2565b50505050905090810190601f1680156122375780820380516001836020036101000a031916815260200191505b50925050506040516020818303038152906040528051906020012081526020019081526020016000206040516020018083805190602001908083835b602083106122925780518252601f199092019160209182019101612273565b6001836020036101000a0380198251168184511680821785525050505050509050018280546001816001161561010002031660029004801561230b5780601f106122e957610100808354040283529182019161230b565b820191906000526020600020905b8154815290600101906020018083116122f7575b505060408051601f198184030181529190529695505050505050565b60008181526020819052604081206110e090612646565b600e6020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529092918391908301828280156123d55780601f106123aa576101008083540402835291602001916123d5565b820191906000526020600020905b8154815290600101906020018083116123b857829003601f168201915b5050505050908060010154908060020154905083565b604080516a4d494e5445525f524f4c4560a81b8152905190819003600b01902081565b60008281526020819052604090206002015461242c906110676125d4565b61113d5760405162461bcd60e51b8152600401808060200182810382526030815260200180613c4e6030913960400191505060405180910390fd5b604080516a5041555345525f524f4c4560a81b8152905190819003600b01902081565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6124c06125d4565b6001600160a01b03166124d161170a565b6001600160a01b03161461251a576040805162461bcd60e51b81526020600482018190526024820152600080516020613d9b833981519152604482015290519081900360640190fd5b6001600160a01b03811661255f5760405162461bcd60e51b8152600401808060200182810382526026815260200180613af86026913960400191505060405180910390fd5b600d546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600d80546001600160a01b0319166001600160a01b0392909216919091179055565b612a3081565b60006110e060038363ffffffff612eff16565b3390565b600081815260056020526040902080546001600160a01b0319166001600160a01b038416908117909155819061260d826113b2565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006110e082612ae9565b600061265c826125c1565b6126975760405162461bcd60e51b815260040180806020018281038252602c815260200180613c22602c913960400191505060405180910390fd5b60006126a2836113b2565b9050806001600160a01b0316846001600160a01b031614806126dd5750836001600160a01b03166126d284610df6565b6001600160a01b0316145b806126ed57506126ed818561248a565b949350505050565b826001600160a01b0316612708826113b2565b6001600160a01b03161461274d5760405162461bcd60e51b8152600401808060200182810382526029815260200180613dbb6029913960400191505060405180910390fd5b6001600160a01b0382166127925760405162461bcd60e51b8152600401808060200182810382526024815260200180613bb16024913960400191505060405180910390fd5b61279d838383612f0b565b6127a86000826125d8565b6001600160a01b03831660009081526002602052604090206127d0908263ffffffff612f6b16565b506001600160a01b03821660009081526002602052604090206127f9908263ffffffff612f7716565b5061280c6003828463ffffffff612f8316565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000828152602081905260409020612871908263ffffffff612f9916565b156110b15761287e6125d4565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006110dd8383612fae565b60008281526020819052604090206128ec908263ffffffff61301216565b156110b1576128f96125d4565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6129456112d2565b61298d576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b600b805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6129c06125d4565b604080516001600160a01b039092168252519081900360200190a1565b60006129e8826113b2565b90506129f681600084612f0b565b612a016000836125d8565b6000828152600960205260409020546002600019610100600184161502019091160415612a3f576000828152600960205260408120612a3f916139ef565b6001600160a01b0381166000908152600260205260409020612a67908363ffffffff612f6b16565b50612a7960038363ffffffff61302716565b5060405182906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000808080612ac58686613033565b9097909650945050505050565b6000612adf8484846130ae565b90505b9392505050565b5490565b6001600160a01b038216612b48576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b612b51816125c1565b15612ba3576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b612baf60008383612f0b565b6001600160a01b0382166000908152600260205260409020612bd7908263ffffffff612f7716565b50612bea6003828463ffffffff612f8316565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80546001019055565b6040805142602080830191909152448284015260608083018590528351808403909101815260809092019092528051910120600090612c6f8482613178565b5092915050565b612c7e6112d2565b15612cc3576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b600b805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586129c06125d4565b60006110dd836001600160a01b0384166131d2565b6000828201838110156110dd576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082612d77575060006110e0565b82820282848281612d8457fe5b04146110dd5760405162461bcd60e51b8152600401808060200182810382526021815260200180613d4e6021913960400191505060405180910390fd5b6110b18282604051806020016040528060008152506131ea565b4290565b6000808211612e35576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612e3e57fe5b049392505050565b6000808211612e9c576040805162461bcd60e51b815260206004820152601860248201527f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000604482015290519081900360640190fd5b818381612ea557fe5b069392505050565b612eb88484846126f5565b612ec48484848461323c565b611f235760405162461bcd60e51b8152600401808060200182810382526032815260200180613ac66032913960400191505060405180910390fd5b60006110dd83836131d2565b6001600160a01b0382161580612f255750612f25816113e0565b612f605760405162461bcd60e51b8152600401808060200182810382526027815260200180613e356027913960400191505060405180910390fd5b610f2e8383836133bc565b60006110dd83836133c7565b60006110dd838361348d565b6000612adf84846001600160a01b0385166134d7565b60006110dd836001600160a01b03841661348d565b81546000908210612ff05760405162461bcd60e51b8152600401808060200182810382526022815260200180613a4a6022913960400191505060405180910390fd5b826000018281548110612fff57fe5b9060005260206000200154905092915050565b60006110dd836001600160a01b0384166133c7565b60006110dd838361356e565b8154600090819083106130775760405162461bcd60e51b8152600401808060200182810382526022815260200180613d2c6022913960400191505060405180910390fd5b600084600001848154811061308857fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816131495760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561310e5781810151838201526020016130f6565b50505050905090810190601f16801561313b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061315c57fe5b9060005260206000209060020201600101549150509392505050565b6000828152600e60205260409020606061319c61319784612710612e46565b613642565b80519091506131b19083906020840190613954565b506131ba612ddb565b600183015560006131ca856113b2565b505050505050565b60009081526001919091016020526040902054151590565b6131f48383612aed565b613201600084848461323c565b610f2e5760405162461bcd60e51b8152600401808060200182810382526032815260200180613ac66032913960400191505060405180910390fd5b6000613250846001600160a01b031661372e565b61325c575060016126ed565b6060613382630a85bd0160e11b6132716125d4565b88878760405160240180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156132ea5781810151838201526020016132d2565b50505050905090810190601f1680156133175780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001613ac6603291396001600160a01b038816919063ffffffff61373416565b9050600081806020019051602081101561339b57600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b610f2e838383613743565b6000818152600183016020526040812054801561348357835460001980830191908101906000908790839081106133fa57fe5b906000526020600020015490508087600001848154811061341757fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061344757fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506110e0565b60009150506110e0565b600061349983836131d2565b6134cf575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556110e0565b5060006110e0565b60008281526001840160205260408120548061353c575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055612ae2565b8285600001600183038154811061354f57fe5b9060005260206000209060020201600101819055506000915050612ae2565b6000818152600183016020526040812054801561348357835460001980830191908101906000908790839081106135a157fe5b90600052602060002090600202019050808760000184815481106135c157fe5b60009182526020808320845460029093020191825560019384015491840191909155835482528983019052604090209084019055865487908061360057fe5b60008281526020808220600260001990940193840201828155600190810183905592909355888152898201909252604082209190915594506110e09350505050565b606060005b600a81101561372857601081600a811061365d57fe5b601091828204019190066002029054906101000a900461ffff1661ffff16831161372057601181600a811061368e57fe5b01805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156137135780601f106136e857610100808354040283529160200191613713565b820191906000526020600020905b8154815290600101906020018083116136f657829003601f168201915b5050505050915050610d5a565b600101613647565b50919050565b3b151590565b6060612adf8484600085613792565b61374e838383610f2e565b6137566112d2565b15610f2e5760405162461bcd60e51b815260040180806020018281038252602b815260200180613a6c602b913960400191505060405180910390fd5b6060824710156137d35760405162461bcd60e51b8152600401808060200182810382526026815260200180613bd56026913960400191505060405180910390fd5b6137dc8561372e565b61382d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061386c5780518252601f19909201916020918201910161384d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146138ce576040519150601f19603f3d011682016040523d82523d6000602084013e6138d3565b606091505b50915091506138e38282866138ee565b979650505050505050565b606083156138fd575081612ae2565b82511561390d5782518084602001fd5b60405162461bcd60e51b815260206004820181815284516024840152845185939192839260440191908501908083836000831561310e5781810151838201526020016130f6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061399557805160ff19168380011785556139c2565b828001600101855582156139c2579182015b828111156139c25782518255916020019190600101906139a7565b50611b14929150613a2f565b60405180606001604052806060815260200160008152602001600081525090565b50805460018160011615610100020316600290046000825580601f10613a1557506112b3565b601f0160209004906000526020600020908101906112b391905b610df391905b80821115611b145760008155600101613a3556fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732315061757361626c653a20746f6b656e207472616e73666572207768696c6520706175736564416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373516d5764316d6e374475477978394279664e6571437367645355734a5a316372616769746761796773714476456d4765726d696e6174696f6e2073746172747320323032312d30342d31325431363a30303a30305a4552433732315072657365744d696e7465725061757365724175746f49643a206d75737420686176652070617573657220726f6c6520746f2070617573654552433732313a207472616e7366657220746f20746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4f6e6c7920746865204f776e65722063616e20776174657220612043727970744f72636869642e4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b654552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e45746865722076616c75652073656e742069732062656c6f7720746865207072696365456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e6473536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e596f752063616e20706c616e74206d696e696d756d20312c206d6178696d756d2032302043727970744f7263686964734552433732313a20617070726f76616c20746f2063757272656e74206f776e6572446561642043727970744f7263686964732063616e6e6f74206265207472616e736665727265644552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644f6e6c7920746865204f776e65722063616e206765726d696e61746520612043727970744f72636869642e4552433732315072657365744d696e7465725061757365724175746f49643a206d7573742068617665206d696e74657220726f6c6520746f206d696e744552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644552433732315072657365744d696e7465725061757365724175746f49643a206d75737420686176652070617573657220726f6c6520746f20756e7061757365416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220669084c037e9e2730b31d45e8cd7d87fcb21b2d1237df1dee094b97b3922927264736f6c63430006060033516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f637970726970656469756d2d63616c63656f6c75732e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f64656e64726f7068796c61782d6c696e64656e69692e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f70617068696f706564696c756d2d726f7468736368696c6469616e756d2e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f706c6174616e74686572612d617a6f726963612e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f637970726970656469756d2d63616c63656f6c75732e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f7068616c61656e6f707369732d6d6963686f6c69747a69692e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f76616e64612d636f6572756c65612e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f6d696c746f6e69612d6b61796173696d61652e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f70617068696f706564696c756d2d766965746e616d656e73652e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f6775617269616e7468652d617572616e74696163612e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f7368656e7a68656e6963612d6f726368696461636561652e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f6d696c746f6e69612d6b61796173696d61652e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f76616e64612d636f6572756c65612e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f70617068696f706564696c756d2d726f7468736368696c6469616e756d2e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f6775617269616e7468652d617572616e74696163612e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f70617068696f706564696c756d2d766965746e616d656e73652e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f64656e64726f7068796c61782d6c696e64656e69692e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f7068616c61656e6f707369732d6d6963686f6c69747a69692e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f7368656e7a68656e6963612d6f726368696461636561652e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f706c6174616e74686572612d617a6f726963612e6a736f6e",
      "deployedBytecode": "",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "methods": {
          "approve(address,uint256)": {
            "details": "See {IERC721-approve}."
          },
          "balanceOf(address)": {
            "details": "See {IERC721-balanceOf}."
          },
          "baseURI()": {
            "details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."
          },
          "burn(uint256)": {
            "details": "Burns `tokenId`. See {ERC721-_burn}.     * Requirements:     * - The caller must own `tokenId` or be an approved operator."
          },
          "getApproved(uint256)": {
            "details": "See {IERC721-getApproved}."
          },
          "getRoleAdmin(bytes32)": {
            "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}."
          },
          "getRoleMember(bytes32,uint256)": {
            "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
          },
          "getRoleMemberCount(bytes32)": {
            "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
          },
          "grantRole(bytes32,address)": {
            "details": "Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role."
          },
          "hasRole(bytes32,address)": {
            "details": "Returns `true` if `account` has been granted `role`."
          },
          "isApprovedForAll(address,address)": {
            "details": "See {IERC721-isApprovedForAll}."
          },
          "mint(address)": {
            "details": "Creates a new token for `to`. Its token ID will be automatically assigned (and available on the emitted {IERC721-Transfer} event), and the token URI autogenerated based on the base URI passed at construction.     * See {ERC721-_mint}.     * Requirements:     * - the caller must have the `MINTER_ROLE`."
          },
          "name()": {
            "details": "See {IERC721Metadata-name}."
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "ownerOf(uint256)": {
            "details": "See {IERC721-ownerOf}."
          },
          "pause()": {
            "details": "Pauses all token transfers.     * See {ERC721Pausable} and {Pausable-_pause}.     * Requirements:     * - the caller must have the `PAUSER_ROLE`."
          },
          "paused()": {
            "details": "Returns true if the contract is paused, and false otherwise."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "renounceRole(bytes32,address)": {
            "details": "Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`."
          },
          "revokeRole(bytes32,address)": {
            "details": "Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role."
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "setApprovalForAll(address,bool)": {
            "details": "See {IERC721-setApprovalForAll}."
          },
          "supportsInterface(bytes4)": {
            "details": "See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas."
          },
          "symbol()": {
            "details": "See {IERC721Metadata-symbol}."
          },
          "tokenByIndex(uint256)": {
            "details": "See {IERC721Enumerable-tokenByIndex}."
          },
          "tokenOfOwnerByIndex(address,uint256)": {
            "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
          },
          "totalSupply()": {
            "details": "See {IERC721Enumerable-totalSupply}."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC721-transferFrom}."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          },
          "unpause()": {
            "details": "Unpauses all token transfers.     * See {ERC721Pausable} and {Pausable-_unpause}.     * Requirements:     * - the caller must have the `PAUSER_ROLE`."
          },
          "withdraw()": {
            "details": "Withdraw ether from this contract (Callable by owner only)"
          }
        }
      },
      "evm": {
        "bytecode": {
          "linkReferences": {},
          "object": "600f805461ffff191690556101c060405260006080908152610c0260a0526117ba60c052611f8a60e0526123726101005261256661012052612660610140526126c4610160526126f66101805261270f6101a0526200006390601090600a62000b0c565b506040805161018081018252601761014082019081527f7368656e7a68656e696361206f72636869646163656165000000000000000000610160830152815281518083018352601881527f7068616c61656e6f70736973206d6963686f6c69747a69690000000000000000602082810191909152808301919091528251808401845260158082527f6775617269616e74686520617572616e74696163610000000000000000000000828401528385019190915283518085018552600e81526d76616e646120636f6572756c656160901b818401526060840152835180850185528181527f637970726970656469756d2063616c63656f6c7573000000000000000000000081840152608084015283518085018552601981527f70617068696f706564696c756d20766965746e616d656e7365000000000000008184015260a08401528351808501855260128152716d696c746f6e6961206b61796173696d616560701b8184015260c084015283518085018552601381527f706c6174616e746865726120617a6f72696361000000000000000000000000008184015260e0840152835180850185529081527f64656e64726f7068796c6178206c696e64656e69690000000000000000000000818301526101008301528251808401909352601d83527f70617068696f706564696c756d20726f7468736368696c6469616e756d000000908301526101208101919091526200028390601190600a62000ba9565b50604080516101c08101909152604b610140820181815282916200505f61016084013981526020016040518060800160405280604c815260200162004ef5604c9139815260200160405180608001604052806049815260200162005183604991398152602001604051806080016040528060428152602001620050f060429139815260200160405180608001604052806049815260200162004eac6049913981526020016040518060800160405280604d815260200162004fc9604d91398152602001604051806080016040528060468152602001620050aa604691398152602001604051806080016040528060478152602001620052f96047913981526020016040518060800160405280604981526020016200521960499139815260200160405180608001604052806051815260200162004e14605191399052620003cf90601b90600a62000ba9565b50604080516101c08101909152604b61014082018181528291620052ae61016084013981526020016040518060800160405280604c815260200162005262604c913981526020016040518060800160405280604981526020016200501660499139815260200160405180608001604052806042815260200162004f4160429139815260200160405180608001604052806049815260200162004d826049913981526020016040518060800160405280604d8152602001620051cc604d9139815260200160405180608001604052806046815260200162004f8360469139815260200160405180608001604052806047815260200162004e6560479139815260200160405180608001604052806049815260200162004dcb604991398152602001604051806080016040528060518152602001620051326051913990526200051b90602590600a62000ba9565b506040518060400160405280600c81526020016b43727970744f72636869647360a01b8152506040518060400160405280600581526020016413d490d21160da1b81525060405180604001604052806007815260200166697066733a2f2f60c81b8152508282620005996301ffc9a760e01b6200093660201b60201c565b8151620005ae90600790602085019062000bfc565b508051620005c490600890602084019062000bfc565b50620005e06380ac58cd60e01b6001600160e01b036200093616565b620005fb635b5e139f60e01b6001600160e01b036200093616565b6200061663780e9d6360e01b6001600160e01b036200093616565b5050600b805460ff191690556200064a60006200063b6001600160e01b03620009be16565b6001600160e01b03620009c316565b604080516a4d494e5445525f524f4c4560a81b8152905190819003600b01902062000682906200063b6001600160e01b03620009be16565b604080516a5041555345525f524f4c4560a81b8152905190819003600b019020620006ba906200063b6001600160e01b03620009be16565b620006ce816001600160e01b03620009dc16565b5050506000620006e3620009be60201b60201c565b600d80546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060005b600a8110156200092f57601b81600a81106200074c57fe5b0160316000601184600a81106200075f57fe5b6040805160208082019081529290930180546002600182161561010002600019019091160491840182905292829160609091019084908015620007e65780601f10620007ba57610100808354040283529160200191620007e6565b820191906000526020600020905b815481529060010190602001808311620007c857829003601f168201915b50509250505060405160208183030381529060405280519060200120815260200190815260200160002090805460018160011615610100020316600290046200083192919062000c7d565b50602581600a81106200084057fe5b0160326000601184600a81106200085357fe5b6040805160208082019081529290930180546002600182161561010002600019019091160491840182905292829160609091019084908015620008da5780601f10620008ae57610100808354040283529160200191620008da565b820191906000526020600020905b815481529060010190602001808311620008bc57829003601f168201915b50509250505060405160208183030381529060405280519060200120815260200190815260200160002090805460018160011615610100020316600290046200092592919062000c7d565b5060010162000734565b5062000da9565b6001600160e01b0319808216141562000996576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b335b90565b620009d882826001600160e01b03620009f116565b5050565b8051620009d890600a90602084019062000bfc565b60008281526020818152604090912062000a1691839062002f9962000a73821b17901c565b15620009d85762000a2f6001600160e01b03620009be16565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000a93836001600160a01b0384166001600160e01b0362000a9c16565b90505b92915050565b600062000ab383836001600160e01b0362000af416565b62000aeb5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000a96565b50600062000a96565b60009081526001919091016020526040902054151590565b60018301918390821562000b975791602002820160005b8382111562000b6557835183826101000a81548161ffff021916908361ffff160217905550926020019260020160208160010104928301926001030262000b23565b801562000b955782816101000a81549061ffff021916905560020160208160010104928301926001030262000b65565b505b5062000ba592915062000cf7565b5090565b82600a810192821562000bee579160200282015b8281111562000bee578251805162000bdd91849160209091019062000bfc565b509160200191906001019062000bbd565b5062000ba592915062000d19565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000c3f57805160ff191683800117855562000c6f565b8280016001018555821562000c6f579182015b8281111562000c6f57825182559160200191906001019062000c52565b5062000ba592915062000d41565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000cb8578054855562000c6f565b8280016001018555821562000c6f57600052602060002091601f016020900482015b8281111562000c6f57825482559160010191906001019062000cda565b620009c091905b8082111562000ba557805461ffff1916815560010162000cfe565b620009c091905b8082111562000ba557600062000d37828262000d5e565b5060010162000d20565b620009c091905b8082111562000ba5576000815560010162000d48565b50805460018160011615610100020316600290046000825580601f1062000d86575062000da6565b601f01602090049060005260206000209081019062000da6919062000d41565b50565b613fc98062000db96000396000f3fe6080604052600436106102e85760003560e01c80636c0360eb11610190578063a7eec44b116100dc578063cac21c8f11610095578063e63ab1e91161006f578063e63ab1e914610ca4578063e985e9c514610cb9578063f2fde38b14610cf4578063ffee200c14610d27576102ef565b8063cac21c8f14610ba6578063d539139314610c56578063d547741f14610c6b576102ef565b8063a7eec44b146109f2578063b66a0e5d14610a1c578063b7aaba2014610a31578063b88d4fde14610a7f578063c87b56dd14610b52578063ca15c87314610b7c576102ef565b80639010d07c116101495780639981d4a1116101235780639981d4a1146109705780639d1b464a1461098d578063a217fddf146109a2578063a22cb465146109b7576102ef565b80639010d07c146108f257806391d148541461092257806395d89b411461095b576102ef565b80636c0360eb1461083b57806370a0823114610850578063715018a6146108835780637fd8d953146108985780638456cb59146108c85780638da5cb5b146108dd576102ef565b806336568abe1161024f5780635c975abb116102085780636352211e116101e25780636352211e1461079f5780636573c787146107c95780636a627842146107f35780636b0c004d14610826576102ef565b80635c975abb1461069b57806360316801146106b057806362ff09d614610775576102ef565b806336568abe146105a15780633ccfd60b146105da5780633f4ba83a146105ef57806342842e0e1461060457806342966c68146106475780634f6ccce714610671576102ef565b8063182199cd116102a1578063182199cd1461048357806323b872dd146104ad578063248a9ca3146104f0578063277dec921461051a5780632f2ff15d1461052f5780632f745c5914610568576102ef565b806301ffc9a7146102f457806306fdde031461033c578063081812fc146103c6578063095ea7b31461040c578063179f0b0a1461044757806318160ddd1461046e576102ef565b366102ef57005b600080fd5b34801561030057600080fd5b506103286004803603602081101561031757600080fd5b50356001600160e01b031916610d3c565b604080519115158252519081900360200190f35b34801561034857600080fd5b50610351610d5f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561038b578181015183820152602001610373565b50505050905090810190601f1680156103b85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103d257600080fd5b506103f0600480360360208110156103e957600080fd5b5035610df6565b604080516001600160a01b039092168252519081900360200190f35b34801561041857600080fd5b506104456004803603604081101561042f57600080fd5b506001600160a01b038135169060200135610e58565b005b34801561045357600080fd5b5061045c610f33565b60408051918252519081900360200190f35b34801561047a57600080fd5b5061045c610f3a565b34801561048f57600080fd5b50610328600480360360208110156104a657600080fd5b5035610f4b565b3480156104b957600080fd5b50610445600480360360608110156104d057600080fd5b506001600160a01b03813581169160208101359091169060400135610f6a565b3480156104fc57600080fd5b5061045c6004803603602081101561051357600080fd5b5035610fc1565b34801561052657600080fd5b50610445610fd6565b34801561053b57600080fd5b506104456004803603604081101561055257600080fd5b50803590602001356001600160a01b0316611049565b34801561057457600080fd5b5061045c6004803603604081101561058b57600080fd5b506001600160a01b0381351690602001356110b5565b3480156105ad57600080fd5b50610445600480360360408110156105c457600080fd5b50803590602001356001600160a01b03166110e6565b3480156105e657600080fd5b50610445611147565b3480156105fb57600080fd5b506104456111d8565b34801561061057600080fd5b506104456004803603606081101561062757600080fd5b506001600160a01b03813581169160208101359091169060400135611249565b34801561065357600080fd5b506104456004803603602081101561066a57600080fd5b5035611264565b34801561067d57600080fd5b5061045c6004803603602081101561069457600080fd5b50356112b6565b3480156106a757600080fd5b506103286112d2565b3480156106bc57600080fd5b506106da600480360360208110156106d357600080fd5b50356112db565b60405180806020018581526020018481526020018360038111156106fa57fe5b60ff168152602001828103825286818151815260200191508051906020019080838360005b8381101561073757818101518382015260200161071f565b50505050905090810190601f1680156107645780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561078157600080fd5b5061045c6004803603602081101561079857600080fd5b50356113a0565b3480156107ab57600080fd5b506103f0600480360360208110156107c257600080fd5b50356113b2565b3480156107d557600080fd5b50610328600480360360208110156107ec57600080fd5b50356113e0565b3480156107ff57600080fd5b506104456004803603602081101561081657600080fd5b50356001600160a01b0316611400565b34801561083257600080fd5b5061045c611484565b34801561084757600080fd5b5061035161148a565b34801561085c57600080fd5b5061045c6004803603602081101561087357600080fd5b50356001600160a01b03166114eb565b34801561088f57600080fd5b50610445611553565b3480156108a457600080fd5b50610445600480360360408110156108bb57600080fd5b50803590602001356115ff565b3480156108d457600080fd5b5061044561169b565b3480156108e957600080fd5b506103f061170a565b3480156108fe57600080fd5b506103f06004803603604081101561091557600080fd5b5080359060200135611719565b34801561092e57600080fd5b506103286004803603604081101561094557600080fd5b50803590602001356001600160a01b0316611737565b34801561096757600080fd5b50610351611755565b6104456004803603602081101561098657600080fd5b50356117b6565b34801561099957600080fd5b5061045c611a5c565b3480156109ae57600080fd5b5061045c611b18565b3480156109c357600080fd5b50610445600480360360408110156109da57600080fd5b506001600160a01b0381351690602001351515611b1d565b3480156109fe57600080fd5b5061044560048036036020811015610a1557600080fd5b5035611c22565b348015610a2857600080fd5b50610445611ce0565b348015610a3d57600080fd5b50610a5b60048036036020811015610a5457600080fd5b5035611d51565b60405180826003811115610a6b57fe5b60ff16815260200191505060405180910390f35b348015610a8b57600080fd5b5061044560048036036080811015610aa257600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135640100000000811115610add57600080fd5b820183602082011115610aef57600080fd5b80359060200191846001830284011164010000000083111715610b1157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611ed1945050505050565b348015610b5e57600080fd5b5061035160048036036020811015610b7557600080fd5b5035611f29565b348015610b8857600080fd5b5061045c60048036036020811015610b9f57600080fd5b5035612327565b348015610bb257600080fd5b50610bd060048036036020811015610bc957600080fd5b503561233e565b6040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610c19578181015183820152602001610c01565b50505050905090810190601f168015610c465780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b348015610c6257600080fd5b5061045c6123eb565b348015610c7757600080fd5b5061044560048036036040811015610c8e57600080fd5b50803590602001356001600160a01b031661240e565b348015610cb057600080fd5b5061045c612467565b348015610cc557600080fd5b5061032860048036036040811015610cdc57600080fd5b506001600160a01b038135811691602001351661248a565b348015610d0057600080fd5b5061044560048036036020811015610d1757600080fd5b50356001600160a01b03166124b8565b348015610d3357600080fd5b5061045c6125bb565b6001600160e01b0319811660009081526001602052604090205460ff165b919050565b60078054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610deb5780601f10610dc057610100808354040283529160200191610deb565b820191906000526020600020905b815481529060010190602001808311610dce57829003601f168201915b505050505090505b90565b6000610e01826125c1565b610e3c5760405162461bcd60e51b815260040180806020018281038252602c815260200180613d6f602c913960400191505060405180910390fd5b506000908152600560205260409020546001600160a01b031690565b6000610e63826113b2565b9050806001600160a01b0316836001600160a01b03161415610eb65760405162461bcd60e51b8152600401808060200182810382526021815260200180613e146021913960400191505060405180910390fd5b806001600160a01b0316610ec86125d4565b6001600160a01b03161480610ee95750610ee981610ee46125d4565b61248a565b610f245760405162461bcd60e51b8152600401808060200182810382526038815260200180613c7e6038913960400191505060405180910390fd5b610f2e83836125d8565b505050565b62093a8081565b6000610f466003612646565b905090565b60006002610f5883611d51565b6003811115610f6357fe5b1492915050565b610f7b610f756125d4565b82612651565b610fb65760405162461bcd60e51b8152600401808060200182810382526031815260200180613e5c6031913960400191505060405180910390fd5b610f2e8383836126f5565b60009081526020819052604090206002015490565b610fde6125d4565b6001600160a01b0316610fef61170a565b6001600160a01b031614611038576040805162461bcd60e51b81526020600482018190526024820152600080516020613d9b833981519152604482015290519081900360640190fd5b600f805461ff001916610100179055565b60008281526020819052604090206002015461106c906110676125d4565b611737565b6110a75760405162461bcd60e51b815260040180806020018281038252602f815260200180613a97602f913960400191505060405180910390fd5b6110b18282612853565b5050565b6001600160a01b03821660009081526002602052604081206110dd908363ffffffff6128c216565b90505b92915050565b6110ee6125d4565b6001600160a01b0316816001600160a01b03161461113d5760405162461bcd60e51b815260040180806020018281038252602f815260200180613f65602f913960400191505060405180910390fd5b6110b182826128ce565b61114f6125d4565b6001600160a01b031661116061170a565b6001600160a01b0316146111a9576040805162461bcd60e51b81526020600482018190526024820152600080516020613d9b833981519152604482015290519081900360640190fd5b6040514790339082156108fc029083906000818181858888f193505050501580156110b1573d6000803e3d6000fd5b604080516a5041555345525f524f4c4560a81b8152905190819003600b019020611204906110676125d4565b61123f5760405162461bcd60e51b8152600401808060200182810382526040815260200180613f256040913960400191505060405180910390fd5b61124761293d565b565b610f2e83838360405180602001604052806000815250611ed1565b61126f610f756125d4565b6112aa5760405162461bcd60e51b8152600401808060200182810382526030815260200180613ef56030913960400191505060405180910390fd5b6112b3816129dd565b50565b6000806112ca60038463ffffffff612ab616565b509392505050565b600b5460ff1690565b6000818152600e6020526040812060018101546002820154606093928392839261130488611d51565b8354604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815291869183018282801561138a5780601f1061135f5761010080835404028352916020019161138a565b820191906000526020600020905b81548152906001019060200180831161136d57829003601f168201915b5050505050935093509350935093509193509193565b60306020526000908152604090205481565b60006110e082604051806060016040528060298152602001613ce0602991396003919063ffffffff612ad216565b600060036113ed83611d51565b60038111156113f857fe5b141592915050565b604080516a4d494e5445525f524f4c4560a81b8152905190819003600b01902061142c906110676125d4565b6114675760405162461bcd60e51b815260040180806020018281038252603d815260200180613eb8603d913960400191505060405180910390fd5b61147a81611475600c612ae9565b612aed565b6112b3600c612c27565b61271081565b600a8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610deb5780601f10610dc057610100808354040283529160200191610deb565b60006001600160a01b0382166115325760405162461bcd60e51b815260040180806020018281038252602a815260200180613cb6602a913960400191505060405180910390fd5b6001600160a01b03821660009081526002602052604090206110e090612646565b61155b6125d4565b6001600160a01b031661156c61170a565b6001600160a01b0316146115b5576040805162461bcd60e51b81526020600482018190526024820152600080516020613d9b833981519152604482015290519081900360640190fd5b600d546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600d80546001600160a01b0319169055565b600f54610100900460ff166116455760405162461bcd60e51b8152600401808060200182810382526027815260200180613b4c6027913960400191505060405180910390fd5b6116566116506125d4565b83612651565b6116915760405162461bcd60e51b815260040180806020018281038252602b815260200180613e8d602b913960400191505060405180910390fd5b610f2e8282612c30565b604080516a5041555345525f524f4c4560a81b8152905190819003600b0190206116c7906110676125d4565b6117025760405162461bcd60e51b815260040180806020018281038252603e815260200180613b73603e913960400191505060405180910390fd5b611247612c76565b600d546001600160a01b031690565b60008281526020819052604081206110dd908363ffffffff6128c216565b60008281526020819052604081206110dd908363ffffffff612cf916565b60088054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610deb5780601f10610dc057610100808354040283529160200191610deb565b600f5460ff16611805576040805162461bcd60e51b8152602060048201526015602482015274151a1948139d5c9cd95c9e481a5cc818db1bdcd959605a1b604482015290519081900360640190fd5b61180d610f3a565b6127100381111561185d576040805162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da08189d5b189cc81b19599d605a1b604482015290519081900360640190fd5b612710611868610f3a565b106118b3576040805162461bcd60e51b815260206004820152601660248201527514d85b19481a185cc8185b1c9958591e48195b99195960521b604482015290519081900360640190fd5b6000811180156118c4575060148111155b6118ff5760405162461bcd60e51b8152600401808060200182810382526030815260200180613de46030913960400191505060405180910390fd5b61271061191361190d610f3a565b83612d0e565b1115611966576040805162461bcd60e51b815260206004820152601860248201527f45786365656473204d41585f43525950544f5243484944530000000000000000604482015290519081900360640190fd5b611977611971611a5c565b82612d68565b3410156119b55760405162461bcd60e51b8152600401808060200182810382526023815260200180613d096023913960400191505060405180910390fd5b60005b818110156110b1576119ca602f612c27565b60006119d6602f612ae9565b6040805160a081018252600660608201908152656772616e756d60d01b608083015281526000196020808301919091526000828401819052848152600e8252929092208151805194955091939092611a32928492910190613954565b5060208201516001820155604090910151600290910155611a533382612dc1565b506001016119b8565b600080611a67610f3a565b90506126ac8110611a8357670de0b6b3a7640000915050610df3565b61251c8110611a9d576708e1bc9bf0400000915050610df3565b611d4c8110611ab757670470de4df8200000915050610df3565b610dac8110611ad1576702386f26fc100000915050610df3565b6105dc8110611aeb5767011c37937e080000915050610df3565b6101f48110611b045766d529ae9e860000915050610df3565b668e1bc9bf040000915050610df3565b5090565b600081565b611b256125d4565b6001600160a01b0316826001600160a01b03161415611b8b576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b8060066000611b986125d4565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611bdc6125d4565b60408051841515815290516001600160a01b0392909216917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319181900360200190a35050565b611c2d610f756125d4565b611c685760405162461bcd60e51b8152600401808060200182810382526027815260200180613bfb6027913960400191505060405180910390fd5b611c71816113e0565b611c7a576112b3565b6000818152600e602052604081206002810154600182015491929091611c9e612ddb565b0390506000611cb08262093a80612ddf565b905080831115611cc357505050506112b3565b6000611cd0846001612d0e565b6002909501949094555050505050565b611ce86125d4565b6001600160a01b0316611cf961170a565b6001600160a01b031614611d42576040805162461bcd60e51b81526020600482018190526024820152600080516020613d9b833981519152604482015290519081900360640190fd5b600f805460ff19166001179055565b6000611d5b6139ce565b6000838152600e60209081526040918290208251815460026001821615610100026000190190911604601f81018490049093028101608090810190945260608101838152909391928492849190840182828015611df95780601f10611dce57610100808354040283529160200191611df9565b820191906000526020600020905b815481529060010190602001808311611ddc57829003601f168201915b50505050508152602001600182015481526020016002820154815250509050806020015160001415611e2f576000915050610d5a565b60001981602001511415611e47576001915050610d5a565b60408101516020820151600090611e5c612ddb565b0390506000611e6e8262093a80612ddf565b90506000611e7f8362093a80612e46565b905081841415611e9757600295505050505050610d5a565b81611ea3856001612d0e565b148015611eb15750612a3081105b15611ec457600295505050505050610d5a565b5060039695505050505050565b611edc6116506125d4565b611f175760405162461bcd60e51b8152600401808060200182810382526031815260200180613e5c6031913960400191505060405180910390fd5b611f2384848484612ead565b50505050565b606080611f35836112db565b5091925060019150611f449050565b611f4d84611d51565b6003811115611f5857fe5b141561203657611f6661148a565b6040518060600160405280602e8152602001613b1e602e91396040516020018083805190602001908083835b60208310611fb15780518252601f199092019160209182019101611f92565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310611ff95780518252601f199092019160209182019101611fda565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050610d5a565b600261204184611d51565b600381111561204c57fe5b14156121bd5761205a61148a565b60316000836040516020018080602001828103825283818151815260200191508051906020019080838360005b8381101561209f578181015183820152602001612087565b50505050905090810190601f1680156120cc5780820380516001836020036101000a031916815260200191505b50925050506040516020818303038152906040528051906020012081526020019081526020016000206040516020018083805190602001908083835b602083106121275780518252601f199092019160209182019101612108565b6001836020036101000a038019825116818451168082178552505050505050905001828054600181600116156101000203166002900480156121a05780601f1061217e5761010080835404028352918201916121a0565b820191906000526020600020905b81548152906001019060200180831161218c575b505092505050604051602081830303815290604052915050610d5a565b6121c561148a565b60326000836040516020018080602001828103825283818151815260200191508051906020019080838360005b8381101561220a5781810151838201526020016121f2565b50505050905090810190601f1680156122375780820380516001836020036101000a031916815260200191505b50925050506040516020818303038152906040528051906020012081526020019081526020016000206040516020018083805190602001908083835b602083106122925780518252601f199092019160209182019101612273565b6001836020036101000a0380198251168184511680821785525050505050509050018280546001816001161561010002031660029004801561230b5780601f106122e957610100808354040283529182019161230b565b820191906000526020600020905b8154815290600101906020018083116122f7575b505060408051601f198184030181529190529695505050505050565b60008181526020819052604081206110e090612646565b600e6020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529092918391908301828280156123d55780601f106123aa576101008083540402835291602001916123d5565b820191906000526020600020905b8154815290600101906020018083116123b857829003601f168201915b5050505050908060010154908060020154905083565b604080516a4d494e5445525f524f4c4560a81b8152905190819003600b01902081565b60008281526020819052604090206002015461242c906110676125d4565b61113d5760405162461bcd60e51b8152600401808060200182810382526030815260200180613c4e6030913960400191505060405180910390fd5b604080516a5041555345525f524f4c4560a81b8152905190819003600b01902081565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6124c06125d4565b6001600160a01b03166124d161170a565b6001600160a01b03161461251a576040805162461bcd60e51b81526020600482018190526024820152600080516020613d9b833981519152604482015290519081900360640190fd5b6001600160a01b03811661255f5760405162461bcd60e51b8152600401808060200182810382526026815260200180613af86026913960400191505060405180910390fd5b600d546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600d80546001600160a01b0319166001600160a01b0392909216919091179055565b612a3081565b60006110e060038363ffffffff612eff16565b3390565b600081815260056020526040902080546001600160a01b0319166001600160a01b038416908117909155819061260d826113b2565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006110e082612ae9565b600061265c826125c1565b6126975760405162461bcd60e51b815260040180806020018281038252602c815260200180613c22602c913960400191505060405180910390fd5b60006126a2836113b2565b9050806001600160a01b0316846001600160a01b031614806126dd5750836001600160a01b03166126d284610df6565b6001600160a01b0316145b806126ed57506126ed818561248a565b949350505050565b826001600160a01b0316612708826113b2565b6001600160a01b03161461274d5760405162461bcd60e51b8152600401808060200182810382526029815260200180613dbb6029913960400191505060405180910390fd5b6001600160a01b0382166127925760405162461bcd60e51b8152600401808060200182810382526024815260200180613bb16024913960400191505060405180910390fd5b61279d838383612f0b565b6127a86000826125d8565b6001600160a01b03831660009081526002602052604090206127d0908263ffffffff612f6b16565b506001600160a01b03821660009081526002602052604090206127f9908263ffffffff612f7716565b5061280c6003828463ffffffff612f8316565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000828152602081905260409020612871908263ffffffff612f9916565b156110b15761287e6125d4565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006110dd8383612fae565b60008281526020819052604090206128ec908263ffffffff61301216565b156110b1576128f96125d4565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6129456112d2565b61298d576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b600b805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6129c06125d4565b604080516001600160a01b039092168252519081900360200190a1565b60006129e8826113b2565b90506129f681600084612f0b565b612a016000836125d8565b6000828152600960205260409020546002600019610100600184161502019091160415612a3f576000828152600960205260408120612a3f916139ef565b6001600160a01b0381166000908152600260205260409020612a67908363ffffffff612f6b16565b50612a7960038363ffffffff61302716565b5060405182906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000808080612ac58686613033565b9097909650945050505050565b6000612adf8484846130ae565b90505b9392505050565b5490565b6001600160a01b038216612b48576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b612b51816125c1565b15612ba3576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b612baf60008383612f0b565b6001600160a01b0382166000908152600260205260409020612bd7908263ffffffff612f7716565b50612bea6003828463ffffffff612f8316565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80546001019055565b6040805142602080830191909152448284015260608083018590528351808403909101815260809092019092528051910120600090612c6f8482613178565b5092915050565b612c7e6112d2565b15612cc3576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b600b805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586129c06125d4565b60006110dd836001600160a01b0384166131d2565b6000828201838110156110dd576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082612d77575060006110e0565b82820282848281612d8457fe5b04146110dd5760405162461bcd60e51b8152600401808060200182810382526021815260200180613d4e6021913960400191505060405180910390fd5b6110b18282604051806020016040528060008152506131ea565b4290565b6000808211612e35576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612e3e57fe5b049392505050565b6000808211612e9c576040805162461bcd60e51b815260206004820152601860248201527f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000604482015290519081900360640190fd5b818381612ea557fe5b069392505050565b612eb88484846126f5565b612ec48484848461323c565b611f235760405162461bcd60e51b8152600401808060200182810382526032815260200180613ac66032913960400191505060405180910390fd5b60006110dd83836131d2565b6001600160a01b0382161580612f255750612f25816113e0565b612f605760405162461bcd60e51b8152600401808060200182810382526027815260200180613e356027913960400191505060405180910390fd5b610f2e8383836133bc565b60006110dd83836133c7565b60006110dd838361348d565b6000612adf84846001600160a01b0385166134d7565b60006110dd836001600160a01b03841661348d565b81546000908210612ff05760405162461bcd60e51b8152600401808060200182810382526022815260200180613a4a6022913960400191505060405180910390fd5b826000018281548110612fff57fe5b9060005260206000200154905092915050565b60006110dd836001600160a01b0384166133c7565b60006110dd838361356e565b8154600090819083106130775760405162461bcd60e51b8152600401808060200182810382526022815260200180613d2c6022913960400191505060405180910390fd5b600084600001848154811061308857fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816131495760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561310e5781810151838201526020016130f6565b50505050905090810190601f16801561313b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061315c57fe5b9060005260206000209060020201600101549150509392505050565b6000828152600e60205260409020606061319c61319784612710612e46565b613642565b80519091506131b19083906020840190613954565b506131ba612ddb565b600183015560006131ca856113b2565b505050505050565b60009081526001919091016020526040902054151590565b6131f48383612aed565b613201600084848461323c565b610f2e5760405162461bcd60e51b8152600401808060200182810382526032815260200180613ac66032913960400191505060405180910390fd5b6000613250846001600160a01b031661372e565b61325c575060016126ed565b6060613382630a85bd0160e11b6132716125d4565b88878760405160240180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156132ea5781810151838201526020016132d2565b50505050905090810190601f1680156133175780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001613ac6603291396001600160a01b038816919063ffffffff61373416565b9050600081806020019051602081101561339b57600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b610f2e838383613743565b6000818152600183016020526040812054801561348357835460001980830191908101906000908790839081106133fa57fe5b906000526020600020015490508087600001848154811061341757fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061344757fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506110e0565b60009150506110e0565b600061349983836131d2565b6134cf575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556110e0565b5060006110e0565b60008281526001840160205260408120548061353c575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055612ae2565b8285600001600183038154811061354f57fe5b9060005260206000209060020201600101819055506000915050612ae2565b6000818152600183016020526040812054801561348357835460001980830191908101906000908790839081106135a157fe5b90600052602060002090600202019050808760000184815481106135c157fe5b60009182526020808320845460029093020191825560019384015491840191909155835482528983019052604090209084019055865487908061360057fe5b60008281526020808220600260001990940193840201828155600190810183905592909355888152898201909252604082209190915594506110e09350505050565b606060005b600a81101561372857601081600a811061365d57fe5b601091828204019190066002029054906101000a900461ffff1661ffff16831161372057601181600a811061368e57fe5b01805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156137135780601f106136e857610100808354040283529160200191613713565b820191906000526020600020905b8154815290600101906020018083116136f657829003601f168201915b5050505050915050610d5a565b600101613647565b50919050565b3b151590565b6060612adf8484600085613792565b61374e838383610f2e565b6137566112d2565b15610f2e5760405162461bcd60e51b815260040180806020018281038252602b815260200180613a6c602b913960400191505060405180910390fd5b6060824710156137d35760405162461bcd60e51b8152600401808060200182810382526026815260200180613bd56026913960400191505060405180910390fd5b6137dc8561372e565b61382d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061386c5780518252601f19909201916020918201910161384d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146138ce576040519150601f19603f3d011682016040523d82523d6000602084013e6138d3565b606091505b50915091506138e38282866138ee565b979650505050505050565b606083156138fd575081612ae2565b82511561390d5782518084602001fd5b60405162461bcd60e51b815260206004820181815284516024840152845185939192839260440191908501908083836000831561310e5781810151838201526020016130f6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061399557805160ff19168380011785556139c2565b828001600101855582156139c2579182015b828111156139c25782518255916020019190600101906139a7565b50611b14929150613a2f565b60405180606001604052806060815260200160008152602001600081525090565b50805460018160011615610100020316600290046000825580601f10613a1557506112b3565b601f0160209004906000526020600020908101906112b391905b610df391905b80821115611b145760008155600101613a3556fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732315061757361626c653a20746f6b656e207472616e73666572207768696c6520706175736564416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373516d5764316d6e374475477978394279664e6571437367645355734a5a316372616769746761796773714476456d4765726d696e6174696f6e2073746172747320323032312d30342d31325431363a30303a30305a4552433732315072657365744d696e7465725061757365724175746f49643a206d75737420686176652070617573657220726f6c6520746f2070617573654552433732313a207472616e7366657220746f20746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4f6e6c7920746865204f776e65722063616e20776174657220612043727970744f72636869642e4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b654552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e45746865722076616c75652073656e742069732062656c6f7720746865207072696365456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e6473536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e596f752063616e20706c616e74206d696e696d756d20312c206d6178696d756d2032302043727970744f7263686964734552433732313a20617070726f76616c20746f2063757272656e74206f776e6572446561642043727970744f7263686964732063616e6e6f74206265207472616e736665727265644552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644f6e6c7920746865204f776e65722063616e206765726d696e61746520612043727970744f72636869642e4552433732315072657365744d696e7465725061757365724175746f49643a206d7573742068617665206d696e74657220726f6c6520746f206d696e744552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644552433732315072657365744d696e7465725061757365724175746f49643a206d75737420686176652070617573657220726f6c6520746f20756e7061757365416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220669084c037e9e2730b31d45e8cd7d87fcb21b2d1237df1dee094b97b3922927264736f6c63430006060033516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f637970726970656469756d2d63616c63656f6c75732e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f64656e64726f7068796c61782d6c696e64656e69692e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f70617068696f706564696c756d2d726f7468736368696c6469616e756d2e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f706c6174616e74686572612d617a6f726963612e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f637970726970656469756d2d63616c63656f6c75732e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f7068616c61656e6f707369732d6d6963686f6c69747a69692e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f76616e64612d636f6572756c65612e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f6d696c746f6e69612d6b61796173696d61652e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f70617068696f706564696c756d2d766965746e616d656e73652e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f6775617269616e7468652d617572616e74696163612e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f7368656e7a68656e6963612d6f726368696461636561652e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f6d696c746f6e69612d6b61796173696d61652e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f76616e64612d636f6572756c65612e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f70617068696f706564696c756d2d726f7468736368696c6469616e756d2e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f6775617269616e7468652d617572616e74696163612e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f70617068696f706564696c756d2d766965746e616d656e73652e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f64656e64726f7068796c61782d6c696e64656e69692e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f7068616c61656e6f707369732d6d6963686f6c69747a69692e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f7368656e7a68656e6963612d6f726368696461636561652e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f706c6174616e74686572612d617a6f726963612e6a736f6e",
          "opcodes": "PUSH1 0xF DUP1 SLOAD PUSH2 0xFFFF NOT AND SWAP1 SSTORE PUSH2 0x1C0 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x80 SWAP1 DUP2 MSTORE PUSH2 0xC02 PUSH1 0xA0 MSTORE PUSH2 0x17BA PUSH1 0xC0 MSTORE PUSH2 0x1F8A PUSH1 0xE0 MSTORE PUSH2 0x2372 PUSH2 0x100 MSTORE PUSH2 0x2566 PUSH2 0x120 MSTORE PUSH2 0x2660 PUSH2 0x140 MSTORE PUSH2 0x26C4 PUSH2 0x160 MSTORE PUSH2 0x26F6 PUSH2 0x180 MSTORE PUSH2 0x270F PUSH2 0x1A0 MSTORE PUSH3 0x63 SWAP1 PUSH1 0x10 SWAP1 PUSH1 0xA PUSH3 0xB0C JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x180 DUP2 ADD DUP3 MSTORE PUSH1 0x17 PUSH2 0x140 DUP3 ADD SWAP1 DUP2 MSTORE PUSH32 0x7368656E7A68656E696361206F72636869646163656165000000000000000000 PUSH2 0x160 DUP4 ADD MSTORE DUP2 MSTORE DUP2 MLOAD DUP1 DUP4 ADD DUP4 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH32 0x7068616C61656E6F70736973206D6963686F6C69747A69690000000000000000 PUSH1 0x20 DUP3 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP5 ADD DUP5 MSTORE PUSH1 0x15 DUP1 DUP3 MSTORE PUSH32 0x6775617269616E74686520617572616E74696163610000000000000000000000 DUP3 DUP5 ADD MSTORE DUP4 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP6 ADD DUP6 MSTORE PUSH1 0xE DUP2 MSTORE PUSH14 0x76616E646120636F6572756C6561 PUSH1 0x90 SHL DUP2 DUP5 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE DUP4 MLOAD DUP1 DUP6 ADD DUP6 MSTORE DUP2 DUP2 MSTORE PUSH32 0x637970726970656469756D2063616C63656F6C75730000000000000000000000 DUP2 DUP5 ADD MSTORE PUSH1 0x80 DUP5 ADD MSTORE DUP4 MLOAD DUP1 DUP6 ADD DUP6 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH32 0x70617068696F706564696C756D20766965746E616D656E736500000000000000 DUP2 DUP5 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE DUP4 MLOAD DUP1 DUP6 ADD DUP6 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH18 0x6D696C746F6E6961206B61796173696D6165 PUSH1 0x70 SHL DUP2 DUP5 ADD MSTORE PUSH1 0xC0 DUP5 ADD MSTORE DUP4 MLOAD DUP1 DUP6 ADD DUP6 MSTORE PUSH1 0x13 DUP2 MSTORE PUSH32 0x706C6174616E746865726120617A6F7269636100000000000000000000000000 DUP2 DUP5 ADD MSTORE PUSH1 0xE0 DUP5 ADD MSTORE DUP4 MLOAD DUP1 DUP6 ADD DUP6 MSTORE SWAP1 DUP2 MSTORE PUSH32 0x64656E64726F7068796C6178206C696E64656E69690000000000000000000000 DUP2 DUP4 ADD MSTORE PUSH2 0x100 DUP4 ADD MSTORE DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x1D DUP4 MSTORE PUSH32 0x70617068696F706564696C756D20726F7468736368696C6469616E756D000000 SWAP1 DUP4 ADD MSTORE PUSH2 0x120 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH3 0x283 SWAP1 PUSH1 0x11 SWAP1 PUSH1 0xA PUSH3 0xBA9 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x1C0 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4B PUSH2 0x140 DUP3 ADD DUP2 DUP2 MSTORE DUP3 SWAP2 PUSH3 0x505F PUSH2 0x160 DUP5 ADD CODECOPY DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4C DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x4EF5 PUSH1 0x4C SWAP2 CODECOPY DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x49 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x5183 PUSH1 0x49 SWAP2 CODECOPY DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x42 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x50F0 PUSH1 0x42 SWAP2 CODECOPY DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x49 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x4EAC PUSH1 0x49 SWAP2 CODECOPY DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4D DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x4FC9 PUSH1 0x4D SWAP2 CODECOPY DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x46 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x50AA PUSH1 0x46 SWAP2 CODECOPY DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x47 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x52F9 PUSH1 0x47 SWAP2 CODECOPY DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x49 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x5219 PUSH1 0x49 SWAP2 CODECOPY DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x51 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x4E14 PUSH1 0x51 SWAP2 CODECOPY SWAP1 MSTORE PUSH3 0x3CF SWAP1 PUSH1 0x1B SWAP1 PUSH1 0xA PUSH3 0xBA9 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x1C0 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4B PUSH2 0x140 DUP3 ADD DUP2 DUP2 MSTORE DUP3 SWAP2 PUSH3 0x52AE PUSH2 0x160 DUP5 ADD CODECOPY DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4C DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x5262 PUSH1 0x4C SWAP2 CODECOPY DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x49 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x5016 PUSH1 0x49 SWAP2 CODECOPY DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x42 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x4F41 PUSH1 0x42 SWAP2 CODECOPY DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x49 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x4D82 PUSH1 0x49 SWAP2 CODECOPY DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4D DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x51CC PUSH1 0x4D SWAP2 CODECOPY DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x46 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x4F83 PUSH1 0x46 SWAP2 CODECOPY DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x47 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x4E65 PUSH1 0x47 SWAP2 CODECOPY DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x49 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x4DCB PUSH1 0x49 SWAP2 CODECOPY DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x51 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x5132 PUSH1 0x51 SWAP2 CODECOPY SWAP1 MSTORE PUSH3 0x51B SWAP1 PUSH1 0x25 SWAP1 PUSH1 0xA PUSH3 0xBA9 JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD PUSH12 0x43727970744F726368696473 PUSH1 0xA0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x13D490D211 PUSH1 0xDA SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x697066733A2F2F PUSH1 0xC8 SHL DUP2 MSTORE POP DUP3 DUP3 PUSH3 0x599 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH3 0x936 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP2 MLOAD PUSH3 0x5AE SWAP1 PUSH1 0x7 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0xBFC JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x5C4 SWAP1 PUSH1 0x8 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0xBFC JUMP JUMPDEST POP PUSH3 0x5E0 PUSH4 0x80AC58CD PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH3 0x936 AND JUMP JUMPDEST PUSH3 0x5FB PUSH4 0x5B5E139F PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH3 0x936 AND JUMP JUMPDEST PUSH3 0x616 PUSH4 0x780E9D63 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH3 0x936 AND JUMP JUMPDEST POP POP PUSH1 0xB DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH3 0x64A PUSH1 0x0 PUSH3 0x63B PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH3 0x9BE AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH3 0x9C3 AND JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH11 0x4D494E5445525F524F4C45 PUSH1 0xA8 SHL DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0xB ADD SWAP1 KECCAK256 PUSH3 0x682 SWAP1 PUSH3 0x63B PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH3 0x9BE AND JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH11 0x5041555345525F524F4C45 PUSH1 0xA8 SHL DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0xB ADD SWAP1 KECCAK256 PUSH3 0x6BA SWAP1 PUSH3 0x63B PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH3 0x9BE AND JUMP JUMPDEST PUSH3 0x6CE DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH3 0x9DC AND JUMP JUMPDEST POP POP POP PUSH1 0x0 PUSH3 0x6E3 PUSH3 0x9BE PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP PUSH1 0x0 JUMPDEST PUSH1 0xA DUP2 LT ISZERO PUSH3 0x92F JUMPI PUSH1 0x1B DUP2 PUSH1 0xA DUP2 LT PUSH3 0x74C JUMPI INVALID JUMPDEST ADD PUSH1 0x31 PUSH1 0x0 PUSH1 0x11 DUP5 PUSH1 0xA DUP2 LT PUSH3 0x75F JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP1 DUP2 MSTORE SWAP3 SWAP1 SWAP4 ADD DUP1 SLOAD PUSH1 0x2 PUSH1 0x1 DUP3 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP2 AND DIV SWAP2 DUP5 ADD DUP3 SWAP1 MSTORE SWAP3 DUP3 SWAP2 PUSH1 0x60 SWAP1 SWAP2 ADD SWAP1 DUP5 SWAP1 DUP1 ISZERO PUSH3 0x7E6 JUMPI DUP1 PUSH1 0x1F LT PUSH3 0x7BA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0x7E6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x7C8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV PUSH3 0x831 SWAP3 SWAP2 SWAP1 PUSH3 0xC7D JUMP JUMPDEST POP PUSH1 0x25 DUP2 PUSH1 0xA DUP2 LT PUSH3 0x840 JUMPI INVALID JUMPDEST ADD PUSH1 0x32 PUSH1 0x0 PUSH1 0x11 DUP5 PUSH1 0xA DUP2 LT PUSH3 0x853 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP1 DUP2 MSTORE SWAP3 SWAP1 SWAP4 ADD DUP1 SLOAD PUSH1 0x2 PUSH1 0x1 DUP3 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP2 AND DIV SWAP2 DUP5 ADD DUP3 SWAP1 MSTORE SWAP3 DUP3 SWAP2 PUSH1 0x60 SWAP1 SWAP2 ADD SWAP1 DUP5 SWAP1 DUP1 ISZERO PUSH3 0x8DA JUMPI DUP1 PUSH1 0x1F LT PUSH3 0x8AE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0x8DA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x8BC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV PUSH3 0x925 SWAP3 SWAP2 SWAP1 PUSH3 0xC7D JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH3 0x734 JUMP JUMPDEST POP PUSH3 0xDA9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP1 DUP3 AND EQ ISZERO PUSH3 0x996 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433136353A20696E76616C696420696E7465726661636520696400000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER JUMPDEST SWAP1 JUMP JUMPDEST PUSH3 0x9D8 DUP3 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH3 0x9F1 AND JUMP JUMPDEST POP POP JUMP JUMPDEST DUP1 MLOAD PUSH3 0x9D8 SWAP1 PUSH1 0xA SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0xBFC JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH3 0xA16 SWAP2 DUP4 SWAP1 PUSH3 0x2F99 PUSH3 0xA73 DUP3 SHL OR SWAP1 SHR JUMP JUMPDEST ISZERO PUSH3 0x9D8 JUMPI PUSH3 0xA2F PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH3 0x9BE AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xA93 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH3 0xA9C AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xAB3 DUP4 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH3 0xAF4 AND JUMP JUMPDEST PUSH3 0xAEB JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH3 0xA96 JUMP JUMPDEST POP PUSH1 0x0 PUSH3 0xA96 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP4 ADD SWAP2 DUP4 SWAP1 DUP3 ISZERO PUSH3 0xB97 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD PUSH1 0x0 JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0xB65 JUMPI DUP4 MLOAD DUP4 DUP3 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP SWAP3 PUSH1 0x20 ADD SWAP3 PUSH1 0x2 ADD PUSH1 0x20 DUP2 PUSH1 0x1 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB MUL PUSH3 0xB23 JUMP JUMPDEST DUP1 ISZERO PUSH3 0xB95 JUMPI DUP3 DUP2 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH2 0xFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x2 ADD PUSH1 0x20 DUP2 PUSH1 0x1 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB MUL PUSH3 0xB65 JUMP JUMPDEST POP JUMPDEST POP PUSH3 0xBA5 SWAP3 SWAP2 POP PUSH3 0xCF7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP3 PUSH1 0xA DUP2 ADD SWAP3 DUP3 ISZERO PUSH3 0xBEE JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xBEE JUMPI DUP3 MLOAD DUP1 MLOAD PUSH3 0xBDD SWAP2 DUP5 SWAP2 PUSH1 0x20 SWAP1 SWAP2 ADD SWAP1 PUSH3 0xBFC JUMP JUMPDEST POP SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xBBD JUMP JUMPDEST POP PUSH3 0xBA5 SWAP3 SWAP2 POP PUSH3 0xD19 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0xC3F JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xC6F JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xC6F JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xC6F JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xC52 JUMP JUMPDEST POP PUSH3 0xBA5 SWAP3 SWAP2 POP PUSH3 0xD41 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0xCB8 JUMPI DUP1 SLOAD DUP6 SSTORE PUSH3 0xC6F JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xC6F JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xC6F JUMPI DUP3 SLOAD DUP3 SSTORE SWAP2 PUSH1 0x1 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xCDA JUMP JUMPDEST PUSH3 0x9C0 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xBA5 JUMPI DUP1 SLOAD PUSH2 0xFFFF NOT AND DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xCFE JUMP JUMPDEST PUSH3 0x9C0 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xBA5 JUMPI PUSH1 0x0 PUSH3 0xD37 DUP3 DUP3 PUSH3 0xD5E JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH3 0xD20 JUMP JUMPDEST PUSH3 0x9C0 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xBA5 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xD48 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH3 0xD86 JUMPI POP PUSH3 0xDA6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH3 0xDA6 SWAP2 SWAP1 PUSH3 0xD41 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x3FC9 DUP1 PUSH3 0xDB9 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2E8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6C0360EB GT PUSH2 0x190 JUMPI DUP1 PUSH4 0xA7EEC44B GT PUSH2 0xDC JUMPI DUP1 PUSH4 0xCAC21C8F GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xE63AB1E9 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0xCA4 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0xCB9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xCF4 JUMPI DUP1 PUSH4 0xFFEE200C EQ PUSH2 0xD27 JUMPI PUSH2 0x2EF JUMP JUMPDEST DUP1 PUSH4 0xCAC21C8F EQ PUSH2 0xBA6 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0xC56 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0xC6B JUMPI PUSH2 0x2EF JUMP JUMPDEST DUP1 PUSH4 0xA7EEC44B EQ PUSH2 0x9F2 JUMPI DUP1 PUSH4 0xB66A0E5D EQ PUSH2 0xA1C JUMPI DUP1 PUSH4 0xB7AABA20 EQ PUSH2 0xA31 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0xA7F JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0xB52 JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0xB7C JUMPI PUSH2 0x2EF JUMP JUMPDEST DUP1 PUSH4 0x9010D07C GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x9981D4A1 GT PUSH2 0x123 JUMPI DUP1 PUSH4 0x9981D4A1 EQ PUSH2 0x970 JUMPI DUP1 PUSH4 0x9D1B464A EQ PUSH2 0x98D JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x9A2 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x9B7 JUMPI PUSH2 0x2EF JUMP JUMPDEST DUP1 PUSH4 0x9010D07C EQ PUSH2 0x8F2 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x922 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x95B JUMPI PUSH2 0x2EF JUMP JUMPDEST DUP1 PUSH4 0x6C0360EB EQ PUSH2 0x83B JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x850 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x883 JUMPI DUP1 PUSH4 0x7FD8D953 EQ PUSH2 0x898 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x8C8 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x8DD JUMPI PUSH2 0x2EF JUMP JUMPDEST DUP1 PUSH4 0x36568ABE GT PUSH2 0x24F JUMPI DUP1 PUSH4 0x5C975ABB GT PUSH2 0x208 JUMPI DUP1 PUSH4 0x6352211E GT PUSH2 0x1E2 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x79F JUMPI DUP1 PUSH4 0x6573C787 EQ PUSH2 0x7C9 JUMPI DUP1 PUSH4 0x6A627842 EQ PUSH2 0x7F3 JUMPI DUP1 PUSH4 0x6B0C004D EQ PUSH2 0x826 JUMPI PUSH2 0x2EF JUMP JUMPDEST DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x69B JUMPI DUP1 PUSH4 0x60316801 EQ PUSH2 0x6B0 JUMPI DUP1 PUSH4 0x62FF09D6 EQ PUSH2 0x775 JUMPI PUSH2 0x2EF JUMP JUMPDEST DUP1 PUSH4 0x36568ABE EQ PUSH2 0x5A1 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x5DA JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x5EF JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x604 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x647 JUMPI DUP1 PUSH4 0x4F6CCCE7 EQ PUSH2 0x671 JUMPI PUSH2 0x2EF JUMP JUMPDEST DUP1 PUSH4 0x182199CD GT PUSH2 0x2A1 JUMPI DUP1 PUSH4 0x182199CD EQ PUSH2 0x483 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x4AD JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x4F0 JUMPI DUP1 PUSH4 0x277DEC92 EQ PUSH2 0x51A JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x52F JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x568 JUMPI PUSH2 0x2EF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x2F4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x33C JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x40C JUMPI DUP1 PUSH4 0x179F0B0A EQ PUSH2 0x447 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x46E JUMPI PUSH2 0x2EF JUMP JUMPDEST CALLDATASIZE PUSH2 0x2EF JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x300 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x328 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0xD3C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x351 PUSH2 0xD5F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x38B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x373 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x3B8 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xDF6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x42F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xE58 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x453 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH2 0xF33 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH2 0xF3A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x328 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xF4B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x4D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0xF6A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x513 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xFC1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x526 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH2 0xFD6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x552 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1049 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x574 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x58B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x10B5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x5C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x10E6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH2 0x1147 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH2 0x11D8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x610 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x1249 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x653 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x66A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1264 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x694 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x12B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x328 PUSH2 0x12D2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x12DB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x6FA JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP7 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x737 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x71F JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x764 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x781 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x798 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x13A0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x13B2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x328 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x13E0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x816 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1400 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x832 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH2 0x1484 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x847 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x351 PUSH2 0x148A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x85C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x873 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x14EB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x88F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH2 0x1553 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x8BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x15FF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH2 0x169B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F0 PUSH2 0x170A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x915 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x1719 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x92E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x328 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x945 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1737 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x967 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x351 PUSH2 0x1755 JUMP JUMPDEST PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x986 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x17B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x999 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH2 0x1A5C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH2 0x1B18 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x9DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x1B1D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1C22 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH2 0x1CE0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA5B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1D51 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xA6B JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0xAA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD DUP2 AND SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x80 DUP2 ADD PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xADD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xAEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xB11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x1ED1 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x351 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1F29 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x2327 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBD0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xBC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x233E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC19 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC01 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xC46 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH2 0x23EB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xC8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x240E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH2 0x2467 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x328 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xCDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x248A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x24B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH2 0x25BB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xDEB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xDC0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDEB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xDCE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE01 DUP3 PUSH2 0x25C1 JUMP JUMPDEST PUSH2 0xE3C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3D6F PUSH1 0x2C SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE63 DUP3 PUSH2 0x13B2 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xEB6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3E14 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xEC8 PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xEE9 JUMPI POP PUSH2 0xEE9 DUP2 PUSH2 0xEE4 PUSH2 0x25D4 JUMP JUMPDEST PUSH2 0x248A JUMP JUMPDEST PUSH2 0xF24 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x38 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3C7E PUSH1 0x38 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF2E DUP4 DUP4 PUSH2 0x25D8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH3 0x93A80 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF46 PUSH1 0x3 PUSH2 0x2646 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH2 0xF58 DUP4 PUSH2 0x1D51 JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xF63 JUMPI INVALID JUMPDEST EQ SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xF7B PUSH2 0xF75 PUSH2 0x25D4 JUMP JUMPDEST DUP3 PUSH2 0x2651 JUMP JUMPDEST PUSH2 0xFB6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x31 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3E5C PUSH1 0x31 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF2E DUP4 DUP4 DUP4 PUSH2 0x26F5 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xFDE PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xFEF PUSH2 0x170A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1038 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D9B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xF DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x106C SWAP1 PUSH2 0x1067 PUSH2 0x25D4 JUMP JUMPDEST PUSH2 0x1737 JUMP JUMPDEST PUSH2 0x10A7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3A97 PUSH1 0x2F SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x10B1 DUP3 DUP3 PUSH2 0x2853 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x10DD SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x28C2 AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x10EE PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x113D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3F65 PUSH1 0x2F SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x10B1 DUP3 DUP3 PUSH2 0x28CE JUMP JUMPDEST PUSH2 0x114F PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1160 PUSH2 0x170A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x11A9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D9B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SELFBALANCE SWAP1 CALLER SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x10B1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH11 0x5041555345525F524F4C45 PUSH1 0xA8 SHL DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0xB ADD SWAP1 KECCAK256 PUSH2 0x1204 SWAP1 PUSH2 0x1067 PUSH2 0x25D4 JUMP JUMPDEST PUSH2 0x123F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x40 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3F25 PUSH1 0x40 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1247 PUSH2 0x293D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF2E DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1ED1 JUMP JUMPDEST PUSH2 0x126F PUSH2 0xF75 PUSH2 0x25D4 JUMP JUMPDEST PUSH2 0x12AA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3EF5 PUSH1 0x30 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x12B3 DUP2 PUSH2 0x29DD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x12CA PUSH1 0x3 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x2AB6 AND JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x60 SWAP4 SWAP3 DUP4 SWAP3 DUP4 SWAP3 PUSH2 0x1304 DUP9 PUSH2 0x1D51 JUMP JUMPDEST DUP4 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP2 DUP7 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x138A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x135F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x138A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x136D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH1 0x30 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10E0 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3CE0 PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x2AD2 AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH2 0x13ED DUP4 PUSH2 0x1D51 JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x13F8 JUMPI INVALID JUMPDEST EQ ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH11 0x4D494E5445525F524F4C45 PUSH1 0xA8 SHL DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0xB ADD SWAP1 KECCAK256 PUSH2 0x142C SWAP1 PUSH2 0x1067 PUSH2 0x25D4 JUMP JUMPDEST PUSH2 0x1467 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x3D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3EB8 PUSH1 0x3D SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x147A DUP2 PUSH2 0x1475 PUSH1 0xC PUSH2 0x2AE9 JUMP JUMPDEST PUSH2 0x2AED JUMP JUMPDEST PUSH2 0x12B3 PUSH1 0xC PUSH2 0x2C27 JUMP JUMPDEST PUSH2 0x2710 DUP2 JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xDEB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xDC0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1532 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3CB6 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x10E0 SWAP1 PUSH2 0x2646 JUMP JUMPDEST PUSH2 0x155B PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x156C PUSH2 0x170A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x15B5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D9B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0xD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xF SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1645 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3B4C PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1656 PUSH2 0x1650 PUSH2 0x25D4 JUMP JUMPDEST DUP4 PUSH2 0x2651 JUMP JUMPDEST PUSH2 0x1691 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3E8D PUSH1 0x2B SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF2E DUP3 DUP3 PUSH2 0x2C30 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH11 0x5041555345525F524F4C45 PUSH1 0xA8 SHL DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0xB ADD SWAP1 KECCAK256 PUSH2 0x16C7 SWAP1 PUSH2 0x1067 PUSH2 0x25D4 JUMP JUMPDEST PUSH2 0x1702 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x3E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3B73 PUSH1 0x3E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1247 PUSH2 0x2C76 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x10DD SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x28C2 AND JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x10DD SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x2CF9 AND JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xDEB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xDC0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0xFF AND PUSH2 0x1805 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x151A1948139D5C9CD95C9E481A5CC818DB1BDCD959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x180D PUSH2 0xF3A JUMP JUMPDEST PUSH2 0x2710 SUB DUP2 GT ISZERO PUSH2 0x185D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x139BDD08195B9BDD59DA08189D5B189CC81B19599D PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x2710 PUSH2 0x1868 PUSH2 0xF3A JUMP JUMPDEST LT PUSH2 0x18B3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x14D85B19481A185CC8185B1C9958591E48195B991959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x18C4 JUMPI POP PUSH1 0x14 DUP2 GT ISZERO JUMPDEST PUSH2 0x18FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3DE4 PUSH1 0x30 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2710 PUSH2 0x1913 PUSH2 0x190D PUSH2 0xF3A JUMP JUMPDEST DUP4 PUSH2 0x2D0E JUMP JUMPDEST GT ISZERO PUSH2 0x1966 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45786365656473204D41585F43525950544F5243484944530000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1977 PUSH2 0x1971 PUSH2 0x1A5C JUMP JUMPDEST DUP3 PUSH2 0x2D68 JUMP JUMPDEST CALLVALUE LT ISZERO PUSH2 0x19B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3D09 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x10B1 JUMPI PUSH2 0x19CA PUSH1 0x2F PUSH2 0x2C27 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19D6 PUSH1 0x2F PUSH2 0x2AE9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x6 PUSH1 0x60 DUP3 ADD SWAP1 DUP2 MSTORE PUSH6 0x6772616E756D PUSH1 0xD0 SHL PUSH1 0x80 DUP4 ADD MSTORE DUP2 MSTORE PUSH1 0x0 NOT PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP3 DUP5 ADD DUP2 SWAP1 MSTORE DUP5 DUP2 MSTORE PUSH1 0xE DUP3 MSTORE SWAP3 SWAP1 SWAP3 KECCAK256 DUP2 MLOAD DUP1 MLOAD SWAP5 SWAP6 POP SWAP2 SWAP4 SWAP1 SWAP3 PUSH2 0x1A32 SWAP3 DUP5 SWAP3 SWAP2 ADD SWAP1 PUSH2 0x3954 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE PUSH2 0x1A53 CALLER DUP3 PUSH2 0x2DC1 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x19B8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1A67 PUSH2 0xF3A JUMP JUMPDEST SWAP1 POP PUSH2 0x26AC DUP2 LT PUSH2 0x1A83 JUMPI PUSH8 0xDE0B6B3A7640000 SWAP2 POP POP PUSH2 0xDF3 JUMP JUMPDEST PUSH2 0x251C DUP2 LT PUSH2 0x1A9D JUMPI PUSH8 0x8E1BC9BF0400000 SWAP2 POP POP PUSH2 0xDF3 JUMP JUMPDEST PUSH2 0x1D4C DUP2 LT PUSH2 0x1AB7 JUMPI PUSH8 0x470DE4DF8200000 SWAP2 POP POP PUSH2 0xDF3 JUMP JUMPDEST PUSH2 0xDAC DUP2 LT PUSH2 0x1AD1 JUMPI PUSH8 0x2386F26FC100000 SWAP2 POP POP PUSH2 0xDF3 JUMP JUMPDEST PUSH2 0x5DC DUP2 LT PUSH2 0x1AEB JUMPI PUSH8 0x11C37937E080000 SWAP2 POP POP PUSH2 0xDF3 JUMP JUMPDEST PUSH2 0x1F4 DUP2 LT PUSH2 0x1B04 JUMPI PUSH7 0xD529AE9E860000 SWAP2 POP POP PUSH2 0xDF3 JUMP JUMPDEST PUSH7 0x8E1BC9BF040000 SWAP2 POP POP PUSH2 0xDF3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1B25 PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1B8B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6 PUSH1 0x0 PUSH2 0x1B98 PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP8 AND DUP1 DUP3 MSTORE SWAP2 SWAP1 SWAP4 MSTORE SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP3 ISZERO ISZERO SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH2 0x1BDC PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 ISZERO ISZERO DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x1C2D PUSH2 0xF75 PUSH2 0x25D4 JUMP JUMPDEST PUSH2 0x1C68 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3BFB PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C71 DUP2 PUSH2 0x13E0 JUMP JUMPDEST PUSH2 0x1C7A JUMPI PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x1C9E PUSH2 0x2DDB JUMP JUMPDEST SUB SWAP1 POP PUSH1 0x0 PUSH2 0x1CB0 DUP3 PUSH3 0x93A80 PUSH2 0x2DDF JUMP JUMPDEST SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 0x1CC3 JUMPI POP POP POP POP PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CD0 DUP5 PUSH1 0x1 PUSH2 0x2D0E JUMP JUMPDEST PUSH1 0x2 SWAP1 SWAP6 ADD SWAP5 SWAP1 SWAP5 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1CE8 PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1CF9 PUSH2 0x170A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1D42 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D9B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xF DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D5B PUSH2 0x39CE JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP2 SLOAD PUSH1 0x2 PUSH1 0x1 DUP3 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP2 AND DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV SWAP1 SWAP4 MUL DUP2 ADD PUSH1 0x80 SWAP1 DUP2 ADD SWAP1 SWAP5 MSTORE PUSH1 0x60 DUP2 ADD DUP4 DUP2 MSTORE SWAP1 SWAP4 SWAP2 SWAP3 DUP5 SWAP3 DUP5 SWAP2 SWAP1 DUP5 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1DF9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1DCE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1DF9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1DDC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1E2F JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xD5A JUMP JUMPDEST PUSH1 0x0 NOT DUP2 PUSH1 0x20 ADD MLOAD EQ ISZERO PUSH2 0x1E47 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0xD5A JUMP JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x0 SWAP1 PUSH2 0x1E5C PUSH2 0x2DDB JUMP JUMPDEST SUB SWAP1 POP PUSH1 0x0 PUSH2 0x1E6E DUP3 PUSH3 0x93A80 PUSH2 0x2DDF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1E7F DUP4 PUSH3 0x93A80 PUSH2 0x2E46 JUMP JUMPDEST SWAP1 POP DUP2 DUP5 EQ ISZERO PUSH2 0x1E97 JUMPI PUSH1 0x2 SWAP6 POP POP POP POP POP POP PUSH2 0xD5A JUMP JUMPDEST DUP2 PUSH2 0x1EA3 DUP6 PUSH1 0x1 PUSH2 0x2D0E JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x1EB1 JUMPI POP PUSH2 0x2A30 DUP2 LT JUMPDEST ISZERO PUSH2 0x1EC4 JUMPI PUSH1 0x2 SWAP6 POP POP POP POP POP POP PUSH2 0xD5A JUMP JUMPDEST POP PUSH1 0x3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1EDC PUSH2 0x1650 PUSH2 0x25D4 JUMP JUMPDEST PUSH2 0x1F17 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x31 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3E5C PUSH1 0x31 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F23 DUP5 DUP5 DUP5 DUP5 PUSH2 0x2EAD JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x1F35 DUP4 PUSH2 0x12DB JUMP JUMPDEST POP SWAP2 SWAP3 POP PUSH1 0x1 SWAP2 POP PUSH2 0x1F44 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F4D DUP5 PUSH2 0x1D51 JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1F58 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2036 JUMPI PUSH2 0x1F66 PUSH2 0x148A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3B1E PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1FB1 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1F92 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE DUP6 MLOAD SWAP2 SWAP1 SWAP4 ADD SWAP3 DUP6 ADD SWAP2 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1FF9 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1FDA JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP PUSH2 0xD5A JUMP JUMPDEST PUSH1 0x2 PUSH2 0x2041 DUP5 PUSH2 0x1D51 JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x204C JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x21BD JUMPI PUSH2 0x205A PUSH2 0x148A JUMP JUMPDEST PUSH1 0x31 PUSH1 0x0 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x209F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2087 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x20CC JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2127 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2108 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x21A0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x217E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 DUP3 ADD SWAP2 PUSH2 0x21A0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x218C JUMPI JUMPDEST POP POP SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP PUSH2 0xD5A JUMP JUMPDEST PUSH2 0x21C5 PUSH2 0x148A JUMP JUMPDEST PUSH1 0x32 PUSH1 0x0 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x220A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x21F2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x2237 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2292 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2273 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x230B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x22E9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 DUP3 ADD SWAP2 PUSH2 0x230B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x22F7 JUMPI JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x10E0 SWAP1 PUSH2 0x2646 JUMP JUMPDEST PUSH1 0xE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP7 AND ISZERO MUL ADD SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 DIV SWAP2 DUP3 ADD DUP5 SWAP1 DIV DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE SWAP1 SWAP3 SWAP2 DUP4 SWAP2 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x23D5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x23AA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x23D5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x23B8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH11 0x4D494E5445525F524F4C45 PUSH1 0xA8 SHL DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0xB ADD SWAP1 KECCAK256 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x242C SWAP1 PUSH2 0x1067 PUSH2 0x25D4 JUMP JUMPDEST PUSH2 0x113D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3C4E PUSH1 0x30 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH11 0x5041555345525F524F4C45 PUSH1 0xA8 SHL DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0xB ADD SWAP1 KECCAK256 DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x24C0 PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x24D1 PUSH2 0x170A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x251A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D9B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x255F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3AF8 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0xD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2A30 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10E0 PUSH1 0x3 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x2EFF AND JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x260D DUP3 PUSH2 0x13B2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10E0 DUP3 PUSH2 0x2AE9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x265C DUP3 PUSH2 0x25C1 JUMP JUMPDEST PUSH2 0x2697 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3C22 PUSH1 0x2C SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x26A2 DUP4 PUSH2 0x13B2 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x26DD JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x26D2 DUP5 PUSH2 0xDF6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x26ED JUMPI POP PUSH2 0x26ED DUP2 DUP6 PUSH2 0x248A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2708 DUP3 PUSH2 0x13B2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x274D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3DBB PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2792 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3BB1 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x279D DUP4 DUP4 DUP4 PUSH2 0x2F0B JUMP JUMPDEST PUSH2 0x27A8 PUSH1 0x0 DUP3 PUSH2 0x25D8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x27D0 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2F6B AND JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x27F9 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2F77 AND JUMP JUMPDEST POP PUSH2 0x280C PUSH1 0x3 DUP3 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x2F83 AND JUMP JUMPDEST POP DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2871 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2F99 AND JUMP JUMPDEST ISZERO PUSH2 0x10B1 JUMPI PUSH2 0x287E PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10DD DUP4 DUP4 PUSH2 0x2FAE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x28EC SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x3012 AND JUMP JUMPDEST ISZERO PUSH2 0x10B1 JUMPI PUSH2 0x28F9 PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x2945 PUSH2 0x12D2 JUMP JUMPDEST PUSH2 0x298D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x29C0 PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29E8 DUP3 PUSH2 0x13B2 JUMP JUMPDEST SWAP1 POP PUSH2 0x29F6 DUP2 PUSH1 0x0 DUP5 PUSH2 0x2F0B JUMP JUMPDEST PUSH2 0x2A01 PUSH1 0x0 DUP4 PUSH2 0x25D8 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP5 AND ISZERO MUL ADD SWAP1 SWAP2 AND DIV ISZERO PUSH2 0x2A3F JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x2A3F SWAP2 PUSH2 0x39EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2A67 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x2F6B AND JUMP JUMPDEST POP PUSH2 0x2A79 PUSH1 0x3 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x3027 AND JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP4 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH2 0x2AC5 DUP7 DUP7 PUSH2 0x3033 JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2ADF DUP5 DUP5 DUP5 PUSH2 0x30AE JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2B48 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x2B51 DUP2 PUSH2 0x25C1 JUMP JUMPDEST ISZERO PUSH2 0x2BA3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x2BAF PUSH1 0x0 DUP4 DUP4 PUSH2 0x2F0B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2BD7 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2F77 AND JUMP JUMPDEST POP PUSH2 0x2BEA PUSH1 0x3 DUP3 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x2F83 AND JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD TIMESTAMP PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DIFFICULTY DUP3 DUP5 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x80 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x0 SWAP1 PUSH2 0x2C6F DUP5 DUP3 PUSH2 0x3178 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C7E PUSH2 0x12D2 JUMP JUMPDEST ISZERO PUSH2 0x2CC3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x29C0 PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10DD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x31D2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x10DD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2D77 JUMPI POP PUSH1 0x0 PUSH2 0x10E0 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x2D84 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x10DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3D4E PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x10B1 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x31EA JUMP JUMPDEST TIMESTAMP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x2E35 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x2E3E JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x2E9C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206D6F64756C6F206279207A65726F0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x2EA5 JUMPI INVALID JUMPDEST MOD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2EB8 DUP5 DUP5 DUP5 PUSH2 0x26F5 JUMP JUMPDEST PUSH2 0x2EC4 DUP5 DUP5 DUP5 DUP5 PUSH2 0x323C JUMP JUMPDEST PUSH2 0x1F23 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x32 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3AC6 PUSH1 0x32 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x10DD DUP4 DUP4 PUSH2 0x31D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO DUP1 PUSH2 0x2F25 JUMPI POP PUSH2 0x2F25 DUP2 PUSH2 0x13E0 JUMP JUMPDEST PUSH2 0x2F60 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3E35 PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF2E DUP4 DUP4 DUP4 PUSH2 0x33BC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10DD DUP4 DUP4 PUSH2 0x33C7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10DD DUP4 DUP4 PUSH2 0x348D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2ADF DUP5 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x34D7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10DD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x348D JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 DUP3 LT PUSH2 0x2FF0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3A4A PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2FFF JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10DD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x33C7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10DD DUP4 DUP4 PUSH2 0x356E JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP4 LT PUSH2 0x3077 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3D2C PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x3088 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD DUP2 PUSH1 0x1 ADD SLOAD SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP3 DUP2 PUSH2 0x3149 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x310E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x30F6 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x313B JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP5 PUSH1 0x0 ADD PUSH1 0x1 DUP3 SUB DUP2 SLOAD DUP2 LT PUSH2 0x315C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x60 PUSH2 0x319C PUSH2 0x3197 DUP5 PUSH2 0x2710 PUSH2 0x2E46 JUMP JUMPDEST PUSH2 0x3642 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH2 0x31B1 SWAP1 DUP4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x3954 JUMP JUMPDEST POP PUSH2 0x31BA PUSH2 0x2DDB JUMP JUMPDEST PUSH1 0x1 DUP4 ADD SSTORE PUSH1 0x0 PUSH2 0x31CA DUP6 PUSH2 0x13B2 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x31F4 DUP4 DUP4 PUSH2 0x2AED JUMP JUMPDEST PUSH2 0x3201 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x323C JUMP JUMPDEST PUSH2 0xF2E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x32 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3AC6 PUSH1 0x32 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3250 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x372E JUMP JUMPDEST PUSH2 0x325C JUMPI POP PUSH1 0x1 PUSH2 0x26ED JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3382 PUSH4 0xA85BD01 PUSH1 0xE1 SHL PUSH2 0x3271 PUSH2 0x25D4 JUMP JUMPDEST DUP9 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x32EA JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x32D2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x3317 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x32 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3AC6 PUSH1 0x32 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x3734 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x339B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xF2E DUP4 DUP4 DUP4 PUSH2 0x3743 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x3483 JUMPI DUP4 SLOAD PUSH1 0x0 NOT DUP1 DUP4 ADD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x0 SWAP1 DUP8 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x33FA JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x3417 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE DUP3 DUP2 MSTORE PUSH1 0x1 DUP10 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP5 ADD SWAP1 SSTORE DUP7 SLOAD DUP8 SWAP1 DUP1 PUSH2 0x3447 JUMPI INVALID JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP7 PUSH1 0x1 ADD PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP5 POP POP POP POP POP PUSH2 0x10E0 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x10E0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3499 DUP4 DUP4 PUSH2 0x31D2 JUMP JUMPDEST PUSH2 0x34CF JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x10E0 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x10E0 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 PUSH2 0x353C JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP5 DUP2 MSTORE DUP7 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP10 SSTORE PUSH1 0x0 DUP10 DUP2 MSTORE DUP5 DUP2 KECCAK256 SWAP6 MLOAD PUSH1 0x2 SWAP1 SWAP4 MUL SWAP1 SWAP6 ADD SWAP2 DUP3 SSTORE SWAP2 MLOAD SWAP1 DUP3 ADD SSTORE DUP7 SLOAD DUP7 DUP5 MSTORE DUP2 DUP9 ADD SWAP1 SWAP3 MSTORE SWAP3 SWAP1 SWAP2 KECCAK256 SSTORE PUSH2 0x2AE2 JUMP JUMPDEST DUP3 DUP6 PUSH1 0x0 ADD PUSH1 0x1 DUP4 SUB DUP2 SLOAD DUP2 LT PUSH2 0x354F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 SWAP2 POP POP PUSH2 0x2AE2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x3483 JUMPI DUP4 SLOAD PUSH1 0x0 NOT DUP1 DUP4 ADD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x0 SWAP1 DUP8 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x35A1 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x35C1 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 DUP5 SLOAD PUSH1 0x2 SWAP1 SWAP4 MUL ADD SWAP2 DUP3 SSTORE PUSH1 0x1 SWAP4 DUP5 ADD SLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP4 SLOAD DUP3 MSTORE DUP10 DUP4 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP5 ADD SWAP1 SSTORE DUP7 SLOAD DUP8 SWAP1 DUP1 PUSH2 0x3600 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 PUSH1 0x2 PUSH1 0x0 NOT SWAP1 SWAP5 ADD SWAP4 DUP5 MUL ADD DUP3 DUP2 SSTORE PUSH1 0x1 SWAP1 DUP2 ADD DUP4 SWAP1 SSTORE SWAP3 SWAP1 SWAP4 SSTORE DUP9 DUP2 MSTORE DUP10 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE SWAP5 POP PUSH2 0x10E0 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 JUMPDEST PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3728 JUMPI PUSH1 0x10 DUP2 PUSH1 0xA DUP2 LT PUSH2 0x365D JUMPI INVALID JUMPDEST PUSH1 0x10 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x2 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP4 GT PUSH2 0x3720 JUMPI PUSH1 0x11 DUP2 PUSH1 0xA DUP2 LT PUSH2 0x368E JUMPI INVALID JUMPDEST ADD DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x2 PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x3713 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x36E8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3713 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x36F6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP PUSH2 0xD5A JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x3647 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2ADF DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x3792 JUMP JUMPDEST PUSH2 0x374E DUP4 DUP4 DUP4 PUSH2 0xF2E JUMP JUMPDEST PUSH2 0x3756 PUSH2 0x12D2 JUMP JUMPDEST ISZERO PUSH2 0xF2E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3A6C PUSH1 0x2B SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x37D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3BD5 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x37DC DUP6 PUSH2 0x372E JUMP JUMPDEST PUSH2 0x382D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x386C JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x384D JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x38CE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x38D3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x38E3 DUP3 DUP3 DUP7 PUSH2 0x38EE JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x38FD JUMPI POP DUP2 PUSH2 0x2AE2 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x390D JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 DUP2 MSTORE DUP5 MLOAD PUSH1 0x24 DUP5 ADD MSTORE DUP5 MLOAD DUP6 SWAP4 SWAP2 SWAP3 DUP4 SWAP3 PUSH1 0x44 ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 DUP4 ISZERO PUSH2 0x310E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x30F6 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x3995 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x39C2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x39C2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x39C2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x39A7 JUMP JUMPDEST POP PUSH2 0x1B14 SWAP3 SWAP2 POP PUSH2 0x3A2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x3A15 JUMPI POP PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x12B3 SWAP2 SWAP1 JUMPDEST PUSH2 0xDF3 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1B14 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3A35 JUMP INVALID GASLIMIT PUSH15 0x756D657261626C655365743A20696E PUSH5 0x6578206F75 PUSH21 0x206F6620626F756E64734552433732315061757361 PUSH3 0x6C653A KECCAK256 PUSH21 0x6F6B656E207472616E73666572207768696C652070 PUSH2 0x7573 PUSH6 0x644163636573 PUSH20 0x436F6E74726F6C3A2073656E646572206D757374 KECCAK256 PUSH3 0x652061 PUSH15 0x2061646D696E20746F206772616E74 GASLIMIT MSTORE NUMBER CALLDATACOPY ORIGIN BALANCE GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F206E6F6E20455243373231 MSTORE PUSH6 0x636569766572 KECCAK256 PUSH10 0x6D706C656D656E746572 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F2061646472657373516D5764316D6E374475477978394279 PUSH7 0x4E657143736764 MSTORE8 SSTORE PUSH20 0x4A5A316372616769746761796773714476456D47 PUSH6 0x726D696E6174 PUSH10 0x6F6E2073746172747320 ORIGIN ADDRESS ORIGIN BALANCE 0x2D ADDRESS CALLVALUE 0x2D BALANCE ORIGIN SLOAD BALANCE CALLDATASIZE GASPRICE ADDRESS ADDRESS GASPRICE ADDRESS ADDRESS GAS GASLIMIT MSTORE NUMBER CALLDATACOPY ORIGIN BALANCE POP PUSH19 0x657365744D696E746572506175736572417574 PUSH16 0x49643A206D7573742068617665207061 PUSH22 0x73657220726F6C6520746F2070617573654552433732 BALANCE GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH10 0x6E73756666696369656E PUSH21 0x2062616C616E636520666F722063616C6C4F6E6C79 KECCAK256 PUSH21 0x6865204F776E65722063616E207761746572206120 NUMBER PUSH19 0x7970744F72636869642E4552433732313A206F PUSH17 0x657261746F7220717565727920666F7220 PUSH15 0x6F6E6578697374656E7420746F6B65 PUSH15 0x416363657373436F6E74726F6C3A20 PUSH20 0x656E646572206D75737420626520616E2061646D PUSH10 0x6E20746F207265766F6B PUSH6 0x455243373231 GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F76652063616C6C6572206973206E6F74206F PUSH24 0x6E6572206E6F7220617070726F76656420666F7220616C6C GASLIMIT MSTORE NUMBER CALLDATACOPY ORIGIN BALANCE GASPRICE KECCAK256 PUSH3 0x616C61 PUSH15 0x636520717565727920666F72207468 PUSH6 0x207A65726F20 PUSH2 0x6464 PUSH19 0x6573734552433732313A206F776E6572207175 PUSH6 0x727920666F72 KECCAK256 PUSH15 0x6F6E6578697374656E7420746F6B65 PUSH15 0x45746865722076616C75652073656E PUSH21 0x2069732062656C6F7720746865207072696365456E PUSH22 0x6D657261626C654D61703A20696E646578206F757420 PUSH16 0x6620626F756E6473536166654D617468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F774552433732313A2061 PUSH17 0x70726F76656420717565727920666F7220 PUSH15 0x6F6E6578697374656E7420746F6B65 PUSH15 0x4F776E61626C653A2063616C6C6572 KECCAK256 PUSH10 0x73206E6F742074686520 PUSH16 0x776E65724552433732313A207472616E PUSH20 0x666572206F6620746F6B656E2074686174206973 KECCAK256 PUSH15 0x6F74206F776E596F752063616E2070 PUSH13 0x616E74206D696E696D756D2031 0x2C KECCAK256 PUSH14 0x6178696D756D2032302043727970 PUSH21 0x4F7263686964734552433732313A20617070726F76 PUSH2 0x6C20 PUSH21 0x6F2063757272656E74206F776E6572446561642043 PUSH19 0x7970744F7263686964732063616E6E6F742062 PUSH6 0x207472616E73 PUSH7 0x65727265644552 NUMBER CALLDATACOPY ORIGIN BALANCE GASPRICE KECCAK256 PUSH21 0x72616E736665722063616C6C6572206973206E6F74 KECCAK256 PUSH16 0x776E6572206E6F7220617070726F7665 PUSH5 0x4F6E6C7920 PUSH21 0x6865204F776E65722063616E206765726D696E6174 PUSH6 0x206120437279 PUSH17 0x744F72636869642E455243373231507265 PUSH20 0x65744D696E7465725061757365724175746F4964 GASPRICE KECCAK256 PUSH14 0x7573742068617665206D696E7465 PUSH19 0x20726F6C6520746F206D696E74455243373231 TIMESTAMP PUSH22 0x726E61626C653A2063616C6C6572206973206E6F7420 PUSH16 0x776E6572206E6F7220617070726F7665 PUSH5 0x4552433732 BALANCE POP PUSH19 0x657365744D696E746572506175736572417574 PUSH16 0x49643A206D7573742068617665207061 PUSH22 0x73657220726F6C6520746F20756E7061757365416363 PUSH6 0x7373436F6E74 PUSH19 0x6F6C3A2063616E206F6E6C792072656E6F756E PUSH4 0x6520726F PUSH13 0x657320666F722073656C66A264 PUSH10 0x70667358221220669084 0xC0 CALLDATACOPY 0xE9 0xE2 PUSH20 0xB31D45E8CD7D87FCB21B2D1237DF1DEE094B97B CODECOPY 0x22 SWAP3 PUSH19 0x64736F6C63430006060033516D55384D4E7A6E SLOAD CALLDATASIZE CHAINID DIFFICULTY BALANCE PUSH23 0x3558646E536541366345597178706A374D676B4543706F PUSH21 0x33614345526572582F637970726970656469756D2D PUSH4 0x616C6365 PUSH16 0x6C75732E6A736F6E516D55384D4E7A6E SLOAD CALLDATASIZE CHAINID DIFFICULTY BALANCE PUSH23 0x3558646E536541366345597178706A374D676B4543706F PUSH21 0x33614345526572582F64656E64726F7068796C6178 0x2D PUSH13 0x696E64656E69692E6A736F6E51 PUSH14 0x56376E735167484E767779527862 PUSH3 0x685035 CODECOPY PUSH10 0x48336772715366713367 CALLDATACOPY PUSH11 0x6F53506153314A47526D4A PUSH2 0x2F70 PUSH2 0x7068 PUSH10 0x6F706564696C756D2D72 PUSH16 0x7468736368696C6469616E756D2E6A73 PUSH16 0x6E516D55384D4E7A6E54364644317635 PC PUSH5 0x6E53654136 PUSH4 0x45597178 PUSH17 0x6A374D676B4543706F7433614345526572 PC 0x2F PUSH17 0x6C6174616E74686572612D617A6F726963 PUSH2 0x2E6A PUSH20 0x6F6E516D56376E735167484E7677795278626268 POP CALLDATALOAD CODECOPY PUSH10 0x48336772715366713367 CALLDATACOPY PUSH11 0x6F53506153314A47526D4A PUSH2 0x2F63 PUSH26 0x70726970656469756D2D63616C63656F6C75732E6A736F6E516D JUMP CALLDATACOPY PUSH15 0x735167484E76777952786262685035 CODECOPY PUSH10 0x48336772715366713367 CALLDATACOPY PUSH11 0x6F53506153314A47526D4A PUSH2 0x2F70 PUSH9 0x616C61656E6F707369 PUSH20 0x2D6D6963686F6C69747A69692E6A736F6E516D55 CODESIZE 0x4D 0x4E PUSH27 0x6E5436464431763558646E536541366345597178706A374D676B45 NUMBER PUSH17 0x6F7433614345526572582F76616E64612D PUSH4 0x6F657275 PUSH13 0x65612E6A736F6E516D55384D4E PUSH27 0x6E5436464431763558646E536541366345597178706A374D676B45 NUMBER PUSH17 0x6F7433614345526572582F6D696C746F6E PUSH10 0x612D6B61796173696D61 PUSH6 0x2E6A736F6E51 PUSH14 0x56376E735167484E767779527862 PUSH3 0x685035 CODECOPY PUSH10 0x48336772715366713367 CALLDATACOPY PUSH11 0x6F53506153314A47526D4A PUSH2 0x2F70 PUSH2 0x7068 PUSH10 0x6F706564696C756D2D76 PUSH10 0x65746E616D656E73652E PUSH11 0x736F6E516D55384D4E7A6E SLOAD CALLDATASIZE CHAINID DIFFICULTY BALANCE PUSH23 0x3558646E536541366345597178706A374D676B4543706F PUSH21 0x33614345526572582F6775617269616E7468652D61 PUSH22 0x72616E74696163612E6A736F6E516D56376E73516748 0x4E PUSH23 0x777952786262685035396948336772715366713367376A PUSH16 0x53506153314A47526D4A612F7368656E PUSH27 0x68656E6963612D6F726368696461636561652E6A736F6E516D5637 PUSH15 0x735167484E76777952786262685035 CODECOPY PUSH10 0x48336772715366713367 CALLDATACOPY PUSH11 0x6F53506153314A47526D4A PUSH2 0x2F6D PUSH10 0x6C746F6E69612D6B6179 PUSH2 0x7369 PUSH14 0x61652E6A736F6E516D56376E7351 PUSH8 0x484E767779527862 PUSH3 0x685035 CODECOPY PUSH10 0x48336772715366713367 CALLDATACOPY PUSH11 0x6F53506153314A47526D4A PUSH2 0x2F76 PUSH2 0x6E64 PUSH2 0x2D63 PUSH16 0x6572756C65612E6A736F6E516D55384D 0x4E PUSH27 0x6E5436464431763558646E536541366345597178706A374D676B45 NUMBER PUSH17 0x6F7433614345526572582F70617068696F PUSH17 0x6564696C756D2D726F7468736368696C64 PUSH10 0x616E756D2E6A736F6E51 PUSH14 0x56376E735167484E767779527862 PUSH3 0x685035 CODECOPY PUSH10 0x48336772715366713367 CALLDATACOPY PUSH11 0x6F53506153314A47526D4A PUSH2 0x2F67 PUSH22 0x617269616E7468652D617572616E74696163612E6A73 PUSH16 0x6E516D55384D4E7A6E54364644317635 PC PUSH5 0x6E53654136 PUSH4 0x45597178 PUSH17 0x6A374D676B4543706F7433614345526572 PC 0x2F PUSH17 0x617068696F706564696C756D2D76696574 PUSH15 0x616D656E73652E6A736F6E516D5637 PUSH15 0x735167484E76777952786262685035 CODECOPY PUSH10 0x48336772715366713367 CALLDATACOPY PUSH11 0x6F53506153314A47526D4A PUSH2 0x2F64 PUSH6 0x6E64726F7068 PUSH26 0x6C61782D6C696E64656E69692E6A736F6E516D55384D4E7A6E54 CALLDATASIZE CHAINID DIFFICULTY BALANCE PUSH23 0x3558646E536541366345597178706A374D676B4543706F PUSH21 0x33614345526572582F7068616C61656E6F70736973 0x2D PUSH14 0x6963686F6C69747A69692E6A736F PUSH15 0x516D55384D4E7A6E54364644317635 PC PUSH5 0x6E53654136 PUSH4 0x45597178 PUSH17 0x6A374D676B4543706F7433614345526572 PC 0x2F PUSH20 0x68656E7A68656E6963612D6F7263686964616365 PUSH2 0x652E PUSH11 0x736F6E516D56376E735167 0x48 0x4E PUSH23 0x777952786262685035396948336772715366713367376A PUSH16 0x53506153314A47526D4A612F706C6174 PUSH2 0x6E74 PUSH9 0x6572612D617A6F7269 PUSH4 0x612E6A73 PUSH16 0x6E000000000000000000000000000000 ",
          "sourceMap": "1028:33:37:-:0;;;-1:-1:-1;;1067:36:37;;;1441:85;622:10061;1441:85;1056:5;622:10061;1441:85;;;1473:4;1441:85;;1479:4;1441:85;;1485:4;1441:85;;1491:4;1028:33;1441:85;1497:4;1441:85;;1503:4;1441:85;;1509:4;1441:85;;1515:4;1441:85;;1521:4;1441:85;;;;;;;;:::i;:::-;-1:-1:-1;1532:368:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:368:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:368:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:368:37;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:368:37;;;;;;;;;;:::i;:::-;-1:-1:-1;1907:902:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2816:906:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1486:292:11;;;;;;;;;;;;;-1:-1:-1;;;1486:292:11;;;;;;;;;;;;;;;;-1:-1:-1;;;1486:292:11;;;;;;;;;;;;;;;;-1:-1:-1;;;1486:292:11;;;1577:4;1583:6;768:40:8;435:10;787:20;;768:18;;;:40;;:::i;:::-;3651:13:20;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;3674:17:20;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;3779:40:20;-1:-1:-1;;;;;;;;3779:18:20;:40;:::i;:::-;3829:49;-1:-1:-1;;;;;;;;3829:18:20;:49;:::i;:::-;3888:51;-1:-1:-1;;;;;;;;3888:18:20;:51;:::i;:::-;-1:-1:-1;;935:7:32;:15;;-1:-1:-1;;935:15:32;;;1601:44:11::1;945:5:32::0;1632:12:11::1;-1:-1:-1::0;;;;;1632:10:11::1;:12:::0;:::i:1;:::-;-1:-1:-1::0;;;;;1601:10:11::1;:44:::0;:::i:1;:::-;1085:24;::::0;;-1:-1:-1;;;1085:24:11;;;;;;;;::::1;::::0;;;1656:37:::1;::::0;1680:12:::1;-1:-1:-1::0;;;;;1680:10:11::1;:12:::0;:::i:1;1656:37::-;1153:24;::::0;;-1:-1:-1;;;1153:24:11;;;;;;;;::::1;::::0;;;1703:37:::1;::::0;1727:12:::1;-1:-1:-1::0;;;;;1727:10:11::1;:12:::0;:::i:1;1703:37::-;1751:20;1763:7:::0;-1:-1:-1;;;;;1751:11:11::1;:20:::0;:::i:1;:::-;1486:292:::0;;;884:17:7;904:12;:10;;;:12;;:::i;:::-;926:6;:18;;-1:-1:-1;;;;;;926:18:7;-1:-1:-1;;;;;926:18:7;;;;;;;;959:43;;926:18;;-1:-1:-1;926:18:7;-1:-1:-1;;959:43:7;;-1:-1:-1;;959:43:7;-1:-1:-1;4045:13:37::1;4040:256;4072:12;4064:5;:20;4040:256;;;4160:19;4180:5;4160:26;;;;;;;;4109:11;:48;4142:5;4148;4142:12;;;;;;;4131:24;::::0;;::::1;::::0;;::::1;::::0;;;4142:12;;;::::1;4131:24:::0;;::::1;;::::0;::::1;;;;-1:-1:-1::0;;4131:24:37;;;::::1;;::::0;;;;;;4142:12;4131:24;;;;;;;4142:12;;4131:24;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4131:24:37;;;4121:35;;;;;;4109:48;;;;;;;;;;;:77;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4255:23;4279:5;4255:30;;;;;;;;4200:15;:52;4237:5;4243;4237:12;;;;;;;4226:24;::::0;;::::1;::::0;;::::1;::::0;;;4237:12;;;::::1;4226:24:::0;;::::1;;::::0;::::1;;;;-1:-1:-1::0;;4226:24:37;;;::::1;;::::0;;;;;;4237:12;4226:24;;;;;;;4237:12;;4226:24;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4226:24:37;;;4216:35;;;;;;4200:52;;;;;;;;;;;:85;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;4086:7:37::1;;4040:256;;;;622:10061:::0;;1507:198:8;-1:-1:-1;;;;;;1590:25:8;;;;;1582:66;;;;;-1:-1:-1;;;1582:66:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1658:33:8;;;;;1694:4;1658:33;;;;;;;;:40;;-1:-1:-1;;1658:40:8;;;;;;1507:198::o;598:104:28:-;685:10;598:104;;:::o;6588:110:6:-;6666:25;6677:4;6683:7;-1:-1:-1;;;;;6666:10:6;:25;:::i;:::-;6588:110;;:::o;14873:98:20:-;14945:19;;;;:8;;:19;;;;;:::i;7025:184:6:-;7098:6;:12;;;;;;;;;;;:33;;7123:7;;7098:24;;;;;:33;;:::i;:::-;7094:109;;;7179:12;-1:-1:-1;;;;;7179:10:6;:12;:::i;:::-;-1:-1:-1;;;;;7152:40:6;7170:7;-1:-1:-1;;;;;7152:40:6;7164:4;7152:40;;;;;;;;;;7025:184;;:::o;6429:150:31:-;6499:4;6522:50;6527:3;-1:-1:-1;;;;;6547:23:31;;-1:-1:-1;;;;;6522:4:31;:50;:::i;:::-;6515:57;;6429:150;;;;;:::o;1640:404::-;1703:4;1724:21;1734:3;1739:5;-1:-1:-1;;;;;1724:9:31;:21;:::i;:::-;1719:319;;-1:-1:-1;27:10;;39:1;23:18;;;45:23;;1761:11:31;:23;;;;;;;;;;;;;1941:18;;1919:19;;;:12;;;:19;;;;;;:40;;;;1973:11;;1719:319;-1:-1:-1;2022:5:31;2015:12;;3805:127;3878:4;3901:19;;;:12;;;;;:19;;;;;;:24;;;3805:127::o;622:10061:37:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;622:10061:37;;;-1:-1:-1;622:10061:37;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;622:10061:37;;;-1:-1:-1;622:10061:37;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;622:10061:37;;;-1:-1:-1;622:10061:37;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;622:10061:37;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;"
        },
        "deployedBytecode": {
          "immutableReferences": {},
          "linkReferences": {},
          "object": "6080604052600436106102e85760003560e01c80636c0360eb11610190578063a7eec44b116100dc578063cac21c8f11610095578063e63ab1e91161006f578063e63ab1e914610ca4578063e985e9c514610cb9578063f2fde38b14610cf4578063ffee200c14610d27576102ef565b8063cac21c8f14610ba6578063d539139314610c56578063d547741f14610c6b576102ef565b8063a7eec44b146109f2578063b66a0e5d14610a1c578063b7aaba2014610a31578063b88d4fde14610a7f578063c87b56dd14610b52578063ca15c87314610b7c576102ef565b80639010d07c116101495780639981d4a1116101235780639981d4a1146109705780639d1b464a1461098d578063a217fddf146109a2578063a22cb465146109b7576102ef565b80639010d07c146108f257806391d148541461092257806395d89b411461095b576102ef565b80636c0360eb1461083b57806370a0823114610850578063715018a6146108835780637fd8d953146108985780638456cb59146108c85780638da5cb5b146108dd576102ef565b806336568abe1161024f5780635c975abb116102085780636352211e116101e25780636352211e1461079f5780636573c787146107c95780636a627842146107f35780636b0c004d14610826576102ef565b80635c975abb1461069b57806360316801146106b057806362ff09d614610775576102ef565b806336568abe146105a15780633ccfd60b146105da5780633f4ba83a146105ef57806342842e0e1461060457806342966c68146106475780634f6ccce714610671576102ef565b8063182199cd116102a1578063182199cd1461048357806323b872dd146104ad578063248a9ca3146104f0578063277dec921461051a5780632f2ff15d1461052f5780632f745c5914610568576102ef565b806301ffc9a7146102f457806306fdde031461033c578063081812fc146103c6578063095ea7b31461040c578063179f0b0a1461044757806318160ddd1461046e576102ef565b366102ef57005b600080fd5b34801561030057600080fd5b506103286004803603602081101561031757600080fd5b50356001600160e01b031916610d3c565b604080519115158252519081900360200190f35b34801561034857600080fd5b50610351610d5f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561038b578181015183820152602001610373565b50505050905090810190601f1680156103b85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103d257600080fd5b506103f0600480360360208110156103e957600080fd5b5035610df6565b604080516001600160a01b039092168252519081900360200190f35b34801561041857600080fd5b506104456004803603604081101561042f57600080fd5b506001600160a01b038135169060200135610e58565b005b34801561045357600080fd5b5061045c610f33565b60408051918252519081900360200190f35b34801561047a57600080fd5b5061045c610f3a565b34801561048f57600080fd5b50610328600480360360208110156104a657600080fd5b5035610f4b565b3480156104b957600080fd5b50610445600480360360608110156104d057600080fd5b506001600160a01b03813581169160208101359091169060400135610f6a565b3480156104fc57600080fd5b5061045c6004803603602081101561051357600080fd5b5035610fc1565b34801561052657600080fd5b50610445610fd6565b34801561053b57600080fd5b506104456004803603604081101561055257600080fd5b50803590602001356001600160a01b0316611049565b34801561057457600080fd5b5061045c6004803603604081101561058b57600080fd5b506001600160a01b0381351690602001356110b5565b3480156105ad57600080fd5b50610445600480360360408110156105c457600080fd5b50803590602001356001600160a01b03166110e6565b3480156105e657600080fd5b50610445611147565b3480156105fb57600080fd5b506104456111d8565b34801561061057600080fd5b506104456004803603606081101561062757600080fd5b506001600160a01b03813581169160208101359091169060400135611249565b34801561065357600080fd5b506104456004803603602081101561066a57600080fd5b5035611264565b34801561067d57600080fd5b5061045c6004803603602081101561069457600080fd5b50356112b6565b3480156106a757600080fd5b506103286112d2565b3480156106bc57600080fd5b506106da600480360360208110156106d357600080fd5b50356112db565b60405180806020018581526020018481526020018360038111156106fa57fe5b60ff168152602001828103825286818151815260200191508051906020019080838360005b8381101561073757818101518382015260200161071f565b50505050905090810190601f1680156107645780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561078157600080fd5b5061045c6004803603602081101561079857600080fd5b50356113a0565b3480156107ab57600080fd5b506103f0600480360360208110156107c257600080fd5b50356113b2565b3480156107d557600080fd5b50610328600480360360208110156107ec57600080fd5b50356113e0565b3480156107ff57600080fd5b506104456004803603602081101561081657600080fd5b50356001600160a01b0316611400565b34801561083257600080fd5b5061045c611484565b34801561084757600080fd5b5061035161148a565b34801561085c57600080fd5b5061045c6004803603602081101561087357600080fd5b50356001600160a01b03166114eb565b34801561088f57600080fd5b50610445611553565b3480156108a457600080fd5b50610445600480360360408110156108bb57600080fd5b50803590602001356115ff565b3480156108d457600080fd5b5061044561169b565b3480156108e957600080fd5b506103f061170a565b3480156108fe57600080fd5b506103f06004803603604081101561091557600080fd5b5080359060200135611719565b34801561092e57600080fd5b506103286004803603604081101561094557600080fd5b50803590602001356001600160a01b0316611737565b34801561096757600080fd5b50610351611755565b6104456004803603602081101561098657600080fd5b50356117b6565b34801561099957600080fd5b5061045c611a5c565b3480156109ae57600080fd5b5061045c611b18565b3480156109c357600080fd5b50610445600480360360408110156109da57600080fd5b506001600160a01b0381351690602001351515611b1d565b3480156109fe57600080fd5b5061044560048036036020811015610a1557600080fd5b5035611c22565b348015610a2857600080fd5b50610445611ce0565b348015610a3d57600080fd5b50610a5b60048036036020811015610a5457600080fd5b5035611d51565b60405180826003811115610a6b57fe5b60ff16815260200191505060405180910390f35b348015610a8b57600080fd5b5061044560048036036080811015610aa257600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135640100000000811115610add57600080fd5b820183602082011115610aef57600080fd5b80359060200191846001830284011164010000000083111715610b1157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611ed1945050505050565b348015610b5e57600080fd5b5061035160048036036020811015610b7557600080fd5b5035611f29565b348015610b8857600080fd5b5061045c60048036036020811015610b9f57600080fd5b5035612327565b348015610bb257600080fd5b50610bd060048036036020811015610bc957600080fd5b503561233e565b6040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610c19578181015183820152602001610c01565b50505050905090810190601f168015610c465780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b348015610c6257600080fd5b5061045c6123eb565b348015610c7757600080fd5b5061044560048036036040811015610c8e57600080fd5b50803590602001356001600160a01b031661240e565b348015610cb057600080fd5b5061045c612467565b348015610cc557600080fd5b5061032860048036036040811015610cdc57600080fd5b506001600160a01b038135811691602001351661248a565b348015610d0057600080fd5b5061044560048036036020811015610d1757600080fd5b50356001600160a01b03166124b8565b348015610d3357600080fd5b5061045c6125bb565b6001600160e01b0319811660009081526001602052604090205460ff165b919050565b60078054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610deb5780601f10610dc057610100808354040283529160200191610deb565b820191906000526020600020905b815481529060010190602001808311610dce57829003601f168201915b505050505090505b90565b6000610e01826125c1565b610e3c5760405162461bcd60e51b815260040180806020018281038252602c815260200180613d6f602c913960400191505060405180910390fd5b506000908152600560205260409020546001600160a01b031690565b6000610e63826113b2565b9050806001600160a01b0316836001600160a01b03161415610eb65760405162461bcd60e51b8152600401808060200182810382526021815260200180613e146021913960400191505060405180910390fd5b806001600160a01b0316610ec86125d4565b6001600160a01b03161480610ee95750610ee981610ee46125d4565b61248a565b610f245760405162461bcd60e51b8152600401808060200182810382526038815260200180613c7e6038913960400191505060405180910390fd5b610f2e83836125d8565b505050565b62093a8081565b6000610f466003612646565b905090565b60006002610f5883611d51565b6003811115610f6357fe5b1492915050565b610f7b610f756125d4565b82612651565b610fb65760405162461bcd60e51b8152600401808060200182810382526031815260200180613e5c6031913960400191505060405180910390fd5b610f2e8383836126f5565b60009081526020819052604090206002015490565b610fde6125d4565b6001600160a01b0316610fef61170a565b6001600160a01b031614611038576040805162461bcd60e51b81526020600482018190526024820152600080516020613d9b833981519152604482015290519081900360640190fd5b600f805461ff001916610100179055565b60008281526020819052604090206002015461106c906110676125d4565b611737565b6110a75760405162461bcd60e51b815260040180806020018281038252602f815260200180613a97602f913960400191505060405180910390fd5b6110b18282612853565b5050565b6001600160a01b03821660009081526002602052604081206110dd908363ffffffff6128c216565b90505b92915050565b6110ee6125d4565b6001600160a01b0316816001600160a01b03161461113d5760405162461bcd60e51b815260040180806020018281038252602f815260200180613f65602f913960400191505060405180910390fd5b6110b182826128ce565b61114f6125d4565b6001600160a01b031661116061170a565b6001600160a01b0316146111a9576040805162461bcd60e51b81526020600482018190526024820152600080516020613d9b833981519152604482015290519081900360640190fd5b6040514790339082156108fc029083906000818181858888f193505050501580156110b1573d6000803e3d6000fd5b604080516a5041555345525f524f4c4560a81b8152905190819003600b019020611204906110676125d4565b61123f5760405162461bcd60e51b8152600401808060200182810382526040815260200180613f256040913960400191505060405180910390fd5b61124761293d565b565b610f2e83838360405180602001604052806000815250611ed1565b61126f610f756125d4565b6112aa5760405162461bcd60e51b8152600401808060200182810382526030815260200180613ef56030913960400191505060405180910390fd5b6112b3816129dd565b50565b6000806112ca60038463ffffffff612ab616565b509392505050565b600b5460ff1690565b6000818152600e6020526040812060018101546002820154606093928392839261130488611d51565b8354604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815291869183018282801561138a5780601f1061135f5761010080835404028352916020019161138a565b820191906000526020600020905b81548152906001019060200180831161136d57829003601f168201915b5050505050935093509350935093509193509193565b60306020526000908152604090205481565b60006110e082604051806060016040528060298152602001613ce0602991396003919063ffffffff612ad216565b600060036113ed83611d51565b60038111156113f857fe5b141592915050565b604080516a4d494e5445525f524f4c4560a81b8152905190819003600b01902061142c906110676125d4565b6114675760405162461bcd60e51b815260040180806020018281038252603d815260200180613eb8603d913960400191505060405180910390fd5b61147a81611475600c612ae9565b612aed565b6112b3600c612c27565b61271081565b600a8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610deb5780601f10610dc057610100808354040283529160200191610deb565b60006001600160a01b0382166115325760405162461bcd60e51b815260040180806020018281038252602a815260200180613cb6602a913960400191505060405180910390fd5b6001600160a01b03821660009081526002602052604090206110e090612646565b61155b6125d4565b6001600160a01b031661156c61170a565b6001600160a01b0316146115b5576040805162461bcd60e51b81526020600482018190526024820152600080516020613d9b833981519152604482015290519081900360640190fd5b600d546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600d80546001600160a01b0319169055565b600f54610100900460ff166116455760405162461bcd60e51b8152600401808060200182810382526027815260200180613b4c6027913960400191505060405180910390fd5b6116566116506125d4565b83612651565b6116915760405162461bcd60e51b815260040180806020018281038252602b815260200180613e8d602b913960400191505060405180910390fd5b610f2e8282612c30565b604080516a5041555345525f524f4c4560a81b8152905190819003600b0190206116c7906110676125d4565b6117025760405162461bcd60e51b815260040180806020018281038252603e815260200180613b73603e913960400191505060405180910390fd5b611247612c76565b600d546001600160a01b031690565b60008281526020819052604081206110dd908363ffffffff6128c216565b60008281526020819052604081206110dd908363ffffffff612cf916565b60088054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610deb5780601f10610dc057610100808354040283529160200191610deb565b600f5460ff16611805576040805162461bcd60e51b8152602060048201526015602482015274151a1948139d5c9cd95c9e481a5cc818db1bdcd959605a1b604482015290519081900360640190fd5b61180d610f3a565b6127100381111561185d576040805162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da08189d5b189cc81b19599d605a1b604482015290519081900360640190fd5b612710611868610f3a565b106118b3576040805162461bcd60e51b815260206004820152601660248201527514d85b19481a185cc8185b1c9958591e48195b99195960521b604482015290519081900360640190fd5b6000811180156118c4575060148111155b6118ff5760405162461bcd60e51b8152600401808060200182810382526030815260200180613de46030913960400191505060405180910390fd5b61271061191361190d610f3a565b83612d0e565b1115611966576040805162461bcd60e51b815260206004820152601860248201527f45786365656473204d41585f43525950544f5243484944530000000000000000604482015290519081900360640190fd5b611977611971611a5c565b82612d68565b3410156119b55760405162461bcd60e51b8152600401808060200182810382526023815260200180613d096023913960400191505060405180910390fd5b60005b818110156110b1576119ca602f612c27565b60006119d6602f612ae9565b6040805160a081018252600660608201908152656772616e756d60d01b608083015281526000196020808301919091526000828401819052848152600e8252929092208151805194955091939092611a32928492910190613954565b5060208201516001820155604090910151600290910155611a533382612dc1565b506001016119b8565b600080611a67610f3a565b90506126ac8110611a8357670de0b6b3a7640000915050610df3565b61251c8110611a9d576708e1bc9bf0400000915050610df3565b611d4c8110611ab757670470de4df8200000915050610df3565b610dac8110611ad1576702386f26fc100000915050610df3565b6105dc8110611aeb5767011c37937e080000915050610df3565b6101f48110611b045766d529ae9e860000915050610df3565b668e1bc9bf040000915050610df3565b5090565b600081565b611b256125d4565b6001600160a01b0316826001600160a01b03161415611b8b576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b8060066000611b986125d4565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611bdc6125d4565b60408051841515815290516001600160a01b0392909216917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319181900360200190a35050565b611c2d610f756125d4565b611c685760405162461bcd60e51b8152600401808060200182810382526027815260200180613bfb6027913960400191505060405180910390fd5b611c71816113e0565b611c7a576112b3565b6000818152600e602052604081206002810154600182015491929091611c9e612ddb565b0390506000611cb08262093a80612ddf565b905080831115611cc357505050506112b3565b6000611cd0846001612d0e565b6002909501949094555050505050565b611ce86125d4565b6001600160a01b0316611cf961170a565b6001600160a01b031614611d42576040805162461bcd60e51b81526020600482018190526024820152600080516020613d9b833981519152604482015290519081900360640190fd5b600f805460ff19166001179055565b6000611d5b6139ce565b6000838152600e60209081526040918290208251815460026001821615610100026000190190911604601f81018490049093028101608090810190945260608101838152909391928492849190840182828015611df95780601f10611dce57610100808354040283529160200191611df9565b820191906000526020600020905b815481529060010190602001808311611ddc57829003601f168201915b50505050508152602001600182015481526020016002820154815250509050806020015160001415611e2f576000915050610d5a565b60001981602001511415611e47576001915050610d5a565b60408101516020820151600090611e5c612ddb565b0390506000611e6e8262093a80612ddf565b90506000611e7f8362093a80612e46565b905081841415611e9757600295505050505050610d5a565b81611ea3856001612d0e565b148015611eb15750612a3081105b15611ec457600295505050505050610d5a565b5060039695505050505050565b611edc6116506125d4565b611f175760405162461bcd60e51b8152600401808060200182810382526031815260200180613e5c6031913960400191505060405180910390fd5b611f2384848484612ead565b50505050565b606080611f35836112db565b5091925060019150611f449050565b611f4d84611d51565b6003811115611f5857fe5b141561203657611f6661148a565b6040518060600160405280602e8152602001613b1e602e91396040516020018083805190602001908083835b60208310611fb15780518252601f199092019160209182019101611f92565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310611ff95780518252601f199092019160209182019101611fda565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050610d5a565b600261204184611d51565b600381111561204c57fe5b14156121bd5761205a61148a565b60316000836040516020018080602001828103825283818151815260200191508051906020019080838360005b8381101561209f578181015183820152602001612087565b50505050905090810190601f1680156120cc5780820380516001836020036101000a031916815260200191505b50925050506040516020818303038152906040528051906020012081526020019081526020016000206040516020018083805190602001908083835b602083106121275780518252601f199092019160209182019101612108565b6001836020036101000a038019825116818451168082178552505050505050905001828054600181600116156101000203166002900480156121a05780601f1061217e5761010080835404028352918201916121a0565b820191906000526020600020905b81548152906001019060200180831161218c575b505092505050604051602081830303815290604052915050610d5a565b6121c561148a565b60326000836040516020018080602001828103825283818151815260200191508051906020019080838360005b8381101561220a5781810151838201526020016121f2565b50505050905090810190601f1680156122375780820380516001836020036101000a031916815260200191505b50925050506040516020818303038152906040528051906020012081526020019081526020016000206040516020018083805190602001908083835b602083106122925780518252601f199092019160209182019101612273565b6001836020036101000a0380198251168184511680821785525050505050509050018280546001816001161561010002031660029004801561230b5780601f106122e957610100808354040283529182019161230b565b820191906000526020600020905b8154815290600101906020018083116122f7575b505060408051601f198184030181529190529695505050505050565b60008181526020819052604081206110e090612646565b600e6020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529092918391908301828280156123d55780601f106123aa576101008083540402835291602001916123d5565b820191906000526020600020905b8154815290600101906020018083116123b857829003601f168201915b5050505050908060010154908060020154905083565b604080516a4d494e5445525f524f4c4560a81b8152905190819003600b01902081565b60008281526020819052604090206002015461242c906110676125d4565b61113d5760405162461bcd60e51b8152600401808060200182810382526030815260200180613c4e6030913960400191505060405180910390fd5b604080516a5041555345525f524f4c4560a81b8152905190819003600b01902081565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6124c06125d4565b6001600160a01b03166124d161170a565b6001600160a01b03161461251a576040805162461bcd60e51b81526020600482018190526024820152600080516020613d9b833981519152604482015290519081900360640190fd5b6001600160a01b03811661255f5760405162461bcd60e51b8152600401808060200182810382526026815260200180613af86026913960400191505060405180910390fd5b600d546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600d80546001600160a01b0319166001600160a01b0392909216919091179055565b612a3081565b60006110e060038363ffffffff612eff16565b3390565b600081815260056020526040902080546001600160a01b0319166001600160a01b038416908117909155819061260d826113b2565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006110e082612ae9565b600061265c826125c1565b6126975760405162461bcd60e51b815260040180806020018281038252602c815260200180613c22602c913960400191505060405180910390fd5b60006126a2836113b2565b9050806001600160a01b0316846001600160a01b031614806126dd5750836001600160a01b03166126d284610df6565b6001600160a01b0316145b806126ed57506126ed818561248a565b949350505050565b826001600160a01b0316612708826113b2565b6001600160a01b03161461274d5760405162461bcd60e51b8152600401808060200182810382526029815260200180613dbb6029913960400191505060405180910390fd5b6001600160a01b0382166127925760405162461bcd60e51b8152600401808060200182810382526024815260200180613bb16024913960400191505060405180910390fd5b61279d838383612f0b565b6127a86000826125d8565b6001600160a01b03831660009081526002602052604090206127d0908263ffffffff612f6b16565b506001600160a01b03821660009081526002602052604090206127f9908263ffffffff612f7716565b5061280c6003828463ffffffff612f8316565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000828152602081905260409020612871908263ffffffff612f9916565b156110b15761287e6125d4565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006110dd8383612fae565b60008281526020819052604090206128ec908263ffffffff61301216565b156110b1576128f96125d4565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6129456112d2565b61298d576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b600b805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6129c06125d4565b604080516001600160a01b039092168252519081900360200190a1565b60006129e8826113b2565b90506129f681600084612f0b565b612a016000836125d8565b6000828152600960205260409020546002600019610100600184161502019091160415612a3f576000828152600960205260408120612a3f916139ef565b6001600160a01b0381166000908152600260205260409020612a67908363ffffffff612f6b16565b50612a7960038363ffffffff61302716565b5060405182906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000808080612ac58686613033565b9097909650945050505050565b6000612adf8484846130ae565b90505b9392505050565b5490565b6001600160a01b038216612b48576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b612b51816125c1565b15612ba3576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b612baf60008383612f0b565b6001600160a01b0382166000908152600260205260409020612bd7908263ffffffff612f7716565b50612bea6003828463ffffffff612f8316565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80546001019055565b6040805142602080830191909152448284015260608083018590528351808403909101815260809092019092528051910120600090612c6f8482613178565b5092915050565b612c7e6112d2565b15612cc3576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b600b805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586129c06125d4565b60006110dd836001600160a01b0384166131d2565b6000828201838110156110dd576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082612d77575060006110e0565b82820282848281612d8457fe5b04146110dd5760405162461bcd60e51b8152600401808060200182810382526021815260200180613d4e6021913960400191505060405180910390fd5b6110b18282604051806020016040528060008152506131ea565b4290565b6000808211612e35576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612e3e57fe5b049392505050565b6000808211612e9c576040805162461bcd60e51b815260206004820152601860248201527f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000604482015290519081900360640190fd5b818381612ea557fe5b069392505050565b612eb88484846126f5565b612ec48484848461323c565b611f235760405162461bcd60e51b8152600401808060200182810382526032815260200180613ac66032913960400191505060405180910390fd5b60006110dd83836131d2565b6001600160a01b0382161580612f255750612f25816113e0565b612f605760405162461bcd60e51b8152600401808060200182810382526027815260200180613e356027913960400191505060405180910390fd5b610f2e8383836133bc565b60006110dd83836133c7565b60006110dd838361348d565b6000612adf84846001600160a01b0385166134d7565b60006110dd836001600160a01b03841661348d565b81546000908210612ff05760405162461bcd60e51b8152600401808060200182810382526022815260200180613a4a6022913960400191505060405180910390fd5b826000018281548110612fff57fe5b9060005260206000200154905092915050565b60006110dd836001600160a01b0384166133c7565b60006110dd838361356e565b8154600090819083106130775760405162461bcd60e51b8152600401808060200182810382526022815260200180613d2c6022913960400191505060405180910390fd5b600084600001848154811061308857fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816131495760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561310e5781810151838201526020016130f6565b50505050905090810190601f16801561313b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061315c57fe5b9060005260206000209060020201600101549150509392505050565b6000828152600e60205260409020606061319c61319784612710612e46565b613642565b80519091506131b19083906020840190613954565b506131ba612ddb565b600183015560006131ca856113b2565b505050505050565b60009081526001919091016020526040902054151590565b6131f48383612aed565b613201600084848461323c565b610f2e5760405162461bcd60e51b8152600401808060200182810382526032815260200180613ac66032913960400191505060405180910390fd5b6000613250846001600160a01b031661372e565b61325c575060016126ed565b6060613382630a85bd0160e11b6132716125d4565b88878760405160240180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156132ea5781810151838201526020016132d2565b50505050905090810190601f1680156133175780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001613ac6603291396001600160a01b038816919063ffffffff61373416565b9050600081806020019051602081101561339b57600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b610f2e838383613743565b6000818152600183016020526040812054801561348357835460001980830191908101906000908790839081106133fa57fe5b906000526020600020015490508087600001848154811061341757fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061344757fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506110e0565b60009150506110e0565b600061349983836131d2565b6134cf575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556110e0565b5060006110e0565b60008281526001840160205260408120548061353c575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055612ae2565b8285600001600183038154811061354f57fe5b9060005260206000209060020201600101819055506000915050612ae2565b6000818152600183016020526040812054801561348357835460001980830191908101906000908790839081106135a157fe5b90600052602060002090600202019050808760000184815481106135c157fe5b60009182526020808320845460029093020191825560019384015491840191909155835482528983019052604090209084019055865487908061360057fe5b60008281526020808220600260001990940193840201828155600190810183905592909355888152898201909252604082209190915594506110e09350505050565b606060005b600a81101561372857601081600a811061365d57fe5b601091828204019190066002029054906101000a900461ffff1661ffff16831161372057601181600a811061368e57fe5b01805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156137135780601f106136e857610100808354040283529160200191613713565b820191906000526020600020905b8154815290600101906020018083116136f657829003601f168201915b5050505050915050610d5a565b600101613647565b50919050565b3b151590565b6060612adf8484600085613792565b61374e838383610f2e565b6137566112d2565b15610f2e5760405162461bcd60e51b815260040180806020018281038252602b815260200180613a6c602b913960400191505060405180910390fd5b6060824710156137d35760405162461bcd60e51b8152600401808060200182810382526026815260200180613bd56026913960400191505060405180910390fd5b6137dc8561372e565b61382d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061386c5780518252601f19909201916020918201910161384d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146138ce576040519150601f19603f3d011682016040523d82523d6000602084013e6138d3565b606091505b50915091506138e38282866138ee565b979650505050505050565b606083156138fd575081612ae2565b82511561390d5782518084602001fd5b60405162461bcd60e51b815260206004820181815284516024840152845185939192839260440191908501908083836000831561310e5781810151838201526020016130f6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061399557805160ff19168380011785556139c2565b828001600101855582156139c2579182015b828111156139c25782518255916020019190600101906139a7565b50611b14929150613a2f565b60405180606001604052806060815260200160008152602001600081525090565b50805460018160011615610100020316600290046000825580601f10613a1557506112b3565b601f0160209004906000526020600020908101906112b391905b610df391905b80821115611b145760008155600101613a3556fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732315061757361626c653a20746f6b656e207472616e73666572207768696c6520706175736564416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373516d5764316d6e374475477978394279664e6571437367645355734a5a316372616769746761796773714476456d4765726d696e6174696f6e2073746172747320323032312d30342d31325431363a30303a30305a4552433732315072657365744d696e7465725061757365724175746f49643a206d75737420686176652070617573657220726f6c6520746f2070617573654552433732313a207472616e7366657220746f20746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4f6e6c7920746865204f776e65722063616e20776174657220612043727970744f72636869642e4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b654552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e45746865722076616c75652073656e742069732062656c6f7720746865207072696365456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e6473536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e596f752063616e20706c616e74206d696e696d756d20312c206d6178696d756d2032302043727970744f7263686964734552433732313a20617070726f76616c20746f2063757272656e74206f776e6572446561642043727970744f7263686964732063616e6e6f74206265207472616e736665727265644552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644f6e6c7920746865204f776e65722063616e206765726d696e61746520612043727970744f72636869642e4552433732315072657365744d696e7465725061757365724175746f49643a206d7573742068617665206d696e74657220726f6c6520746f206d696e744552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644552433732315072657365744d696e7465725061757365724175746f49643a206d75737420686176652070617573657220726f6c6520746f20756e7061757365416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220669084c037e9e2730b31d45e8cd7d87fcb21b2d1237df1dee094b97b3922927264736f6c63430006060033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2E8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6C0360EB GT PUSH2 0x190 JUMPI DUP1 PUSH4 0xA7EEC44B GT PUSH2 0xDC JUMPI DUP1 PUSH4 0xCAC21C8F GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xE63AB1E9 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0xCA4 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0xCB9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xCF4 JUMPI DUP1 PUSH4 0xFFEE200C EQ PUSH2 0xD27 JUMPI PUSH2 0x2EF JUMP JUMPDEST DUP1 PUSH4 0xCAC21C8F EQ PUSH2 0xBA6 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0xC56 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0xC6B JUMPI PUSH2 0x2EF JUMP JUMPDEST DUP1 PUSH4 0xA7EEC44B EQ PUSH2 0x9F2 JUMPI DUP1 PUSH4 0xB66A0E5D EQ PUSH2 0xA1C JUMPI DUP1 PUSH4 0xB7AABA20 EQ PUSH2 0xA31 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0xA7F JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0xB52 JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0xB7C JUMPI PUSH2 0x2EF JUMP JUMPDEST DUP1 PUSH4 0x9010D07C GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x9981D4A1 GT PUSH2 0x123 JUMPI DUP1 PUSH4 0x9981D4A1 EQ PUSH2 0x970 JUMPI DUP1 PUSH4 0x9D1B464A EQ PUSH2 0x98D JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x9A2 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x9B7 JUMPI PUSH2 0x2EF JUMP JUMPDEST DUP1 PUSH4 0x9010D07C EQ PUSH2 0x8F2 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x922 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x95B JUMPI PUSH2 0x2EF JUMP JUMPDEST DUP1 PUSH4 0x6C0360EB EQ PUSH2 0x83B JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x850 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x883 JUMPI DUP1 PUSH4 0x7FD8D953 EQ PUSH2 0x898 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x8C8 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x8DD JUMPI PUSH2 0x2EF JUMP JUMPDEST DUP1 PUSH4 0x36568ABE GT PUSH2 0x24F JUMPI DUP1 PUSH4 0x5C975ABB GT PUSH2 0x208 JUMPI DUP1 PUSH4 0x6352211E GT PUSH2 0x1E2 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x79F JUMPI DUP1 PUSH4 0x6573C787 EQ PUSH2 0x7C9 JUMPI DUP1 PUSH4 0x6A627842 EQ PUSH2 0x7F3 JUMPI DUP1 PUSH4 0x6B0C004D EQ PUSH2 0x826 JUMPI PUSH2 0x2EF JUMP JUMPDEST DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x69B JUMPI DUP1 PUSH4 0x60316801 EQ PUSH2 0x6B0 JUMPI DUP1 PUSH4 0x62FF09D6 EQ PUSH2 0x775 JUMPI PUSH2 0x2EF JUMP JUMPDEST DUP1 PUSH4 0x36568ABE EQ PUSH2 0x5A1 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x5DA JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x5EF JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x604 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x647 JUMPI DUP1 PUSH4 0x4F6CCCE7 EQ PUSH2 0x671 JUMPI PUSH2 0x2EF JUMP JUMPDEST DUP1 PUSH4 0x182199CD GT PUSH2 0x2A1 JUMPI DUP1 PUSH4 0x182199CD EQ PUSH2 0x483 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x4AD JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x4F0 JUMPI DUP1 PUSH4 0x277DEC92 EQ PUSH2 0x51A JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x52F JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x568 JUMPI PUSH2 0x2EF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x2F4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x33C JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x40C JUMPI DUP1 PUSH4 0x179F0B0A EQ PUSH2 0x447 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x46E JUMPI PUSH2 0x2EF JUMP JUMPDEST CALLDATASIZE PUSH2 0x2EF JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x300 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x328 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0xD3C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x351 PUSH2 0xD5F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x38B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x373 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x3B8 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xDF6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x42F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xE58 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x453 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH2 0xF33 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH2 0xF3A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x328 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xF4B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x4D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0xF6A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x513 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xFC1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x526 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH2 0xFD6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x552 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1049 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x574 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x58B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x10B5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x5C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x10E6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH2 0x1147 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH2 0x11D8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x610 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x1249 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x653 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x66A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1264 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x694 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x12B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x328 PUSH2 0x12D2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x12DB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x6FA JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP7 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x737 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x71F JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x764 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x781 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x798 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x13A0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x13B2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x328 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x13E0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x816 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1400 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x832 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH2 0x1484 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x847 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x351 PUSH2 0x148A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x85C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x873 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x14EB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x88F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH2 0x1553 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x8BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x15FF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH2 0x169B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F0 PUSH2 0x170A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x915 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x1719 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x92E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x328 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x945 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1737 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x967 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x351 PUSH2 0x1755 JUMP JUMPDEST PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x986 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x17B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x999 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH2 0x1A5C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH2 0x1B18 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x9DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x1B1D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1C22 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH2 0x1CE0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA5B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1D51 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xA6B JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0xAA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD DUP2 AND SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x80 DUP2 ADD PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xADD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xAEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xB11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x1ED1 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x351 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1F29 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x2327 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBD0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xBC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x233E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC19 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC01 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xC46 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH2 0x23EB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xC8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x240E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH2 0x2467 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x328 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xCDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x248A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x24B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH2 0x25BB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xDEB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xDC0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDEB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xDCE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE01 DUP3 PUSH2 0x25C1 JUMP JUMPDEST PUSH2 0xE3C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3D6F PUSH1 0x2C SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE63 DUP3 PUSH2 0x13B2 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xEB6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3E14 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xEC8 PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xEE9 JUMPI POP PUSH2 0xEE9 DUP2 PUSH2 0xEE4 PUSH2 0x25D4 JUMP JUMPDEST PUSH2 0x248A JUMP JUMPDEST PUSH2 0xF24 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x38 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3C7E PUSH1 0x38 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF2E DUP4 DUP4 PUSH2 0x25D8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH3 0x93A80 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF46 PUSH1 0x3 PUSH2 0x2646 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH2 0xF58 DUP4 PUSH2 0x1D51 JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xF63 JUMPI INVALID JUMPDEST EQ SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xF7B PUSH2 0xF75 PUSH2 0x25D4 JUMP JUMPDEST DUP3 PUSH2 0x2651 JUMP JUMPDEST PUSH2 0xFB6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x31 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3E5C PUSH1 0x31 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF2E DUP4 DUP4 DUP4 PUSH2 0x26F5 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xFDE PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xFEF PUSH2 0x170A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1038 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D9B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xF DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x106C SWAP1 PUSH2 0x1067 PUSH2 0x25D4 JUMP JUMPDEST PUSH2 0x1737 JUMP JUMPDEST PUSH2 0x10A7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3A97 PUSH1 0x2F SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x10B1 DUP3 DUP3 PUSH2 0x2853 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x10DD SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x28C2 AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x10EE PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x113D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3F65 PUSH1 0x2F SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x10B1 DUP3 DUP3 PUSH2 0x28CE JUMP JUMPDEST PUSH2 0x114F PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1160 PUSH2 0x170A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x11A9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D9B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SELFBALANCE SWAP1 CALLER SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x10B1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH11 0x5041555345525F524F4C45 PUSH1 0xA8 SHL DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0xB ADD SWAP1 KECCAK256 PUSH2 0x1204 SWAP1 PUSH2 0x1067 PUSH2 0x25D4 JUMP JUMPDEST PUSH2 0x123F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x40 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3F25 PUSH1 0x40 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1247 PUSH2 0x293D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF2E DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1ED1 JUMP JUMPDEST PUSH2 0x126F PUSH2 0xF75 PUSH2 0x25D4 JUMP JUMPDEST PUSH2 0x12AA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3EF5 PUSH1 0x30 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x12B3 DUP2 PUSH2 0x29DD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x12CA PUSH1 0x3 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x2AB6 AND JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x60 SWAP4 SWAP3 DUP4 SWAP3 DUP4 SWAP3 PUSH2 0x1304 DUP9 PUSH2 0x1D51 JUMP JUMPDEST DUP4 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP2 DUP7 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x138A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x135F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x138A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x136D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH1 0x30 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10E0 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3CE0 PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x2AD2 AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH2 0x13ED DUP4 PUSH2 0x1D51 JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x13F8 JUMPI INVALID JUMPDEST EQ ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH11 0x4D494E5445525F524F4C45 PUSH1 0xA8 SHL DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0xB ADD SWAP1 KECCAK256 PUSH2 0x142C SWAP1 PUSH2 0x1067 PUSH2 0x25D4 JUMP JUMPDEST PUSH2 0x1467 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x3D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3EB8 PUSH1 0x3D SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x147A DUP2 PUSH2 0x1475 PUSH1 0xC PUSH2 0x2AE9 JUMP JUMPDEST PUSH2 0x2AED JUMP JUMPDEST PUSH2 0x12B3 PUSH1 0xC PUSH2 0x2C27 JUMP JUMPDEST PUSH2 0x2710 DUP2 JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xDEB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xDC0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1532 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3CB6 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x10E0 SWAP1 PUSH2 0x2646 JUMP JUMPDEST PUSH2 0x155B PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x156C PUSH2 0x170A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x15B5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D9B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0xD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xF SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1645 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3B4C PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1656 PUSH2 0x1650 PUSH2 0x25D4 JUMP JUMPDEST DUP4 PUSH2 0x2651 JUMP JUMPDEST PUSH2 0x1691 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3E8D PUSH1 0x2B SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF2E DUP3 DUP3 PUSH2 0x2C30 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH11 0x5041555345525F524F4C45 PUSH1 0xA8 SHL DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0xB ADD SWAP1 KECCAK256 PUSH2 0x16C7 SWAP1 PUSH2 0x1067 PUSH2 0x25D4 JUMP JUMPDEST PUSH2 0x1702 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x3E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3B73 PUSH1 0x3E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1247 PUSH2 0x2C76 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x10DD SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x28C2 AND JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x10DD SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x2CF9 AND JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xDEB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xDC0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0xFF AND PUSH2 0x1805 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x151A1948139D5C9CD95C9E481A5CC818DB1BDCD959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x180D PUSH2 0xF3A JUMP JUMPDEST PUSH2 0x2710 SUB DUP2 GT ISZERO PUSH2 0x185D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x139BDD08195B9BDD59DA08189D5B189CC81B19599D PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x2710 PUSH2 0x1868 PUSH2 0xF3A JUMP JUMPDEST LT PUSH2 0x18B3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x14D85B19481A185CC8185B1C9958591E48195B991959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x18C4 JUMPI POP PUSH1 0x14 DUP2 GT ISZERO JUMPDEST PUSH2 0x18FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3DE4 PUSH1 0x30 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2710 PUSH2 0x1913 PUSH2 0x190D PUSH2 0xF3A JUMP JUMPDEST DUP4 PUSH2 0x2D0E JUMP JUMPDEST GT ISZERO PUSH2 0x1966 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45786365656473204D41585F43525950544F5243484944530000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1977 PUSH2 0x1971 PUSH2 0x1A5C JUMP JUMPDEST DUP3 PUSH2 0x2D68 JUMP JUMPDEST CALLVALUE LT ISZERO PUSH2 0x19B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3D09 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x10B1 JUMPI PUSH2 0x19CA PUSH1 0x2F PUSH2 0x2C27 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19D6 PUSH1 0x2F PUSH2 0x2AE9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x6 PUSH1 0x60 DUP3 ADD SWAP1 DUP2 MSTORE PUSH6 0x6772616E756D PUSH1 0xD0 SHL PUSH1 0x80 DUP4 ADD MSTORE DUP2 MSTORE PUSH1 0x0 NOT PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP3 DUP5 ADD DUP2 SWAP1 MSTORE DUP5 DUP2 MSTORE PUSH1 0xE DUP3 MSTORE SWAP3 SWAP1 SWAP3 KECCAK256 DUP2 MLOAD DUP1 MLOAD SWAP5 SWAP6 POP SWAP2 SWAP4 SWAP1 SWAP3 PUSH2 0x1A32 SWAP3 DUP5 SWAP3 SWAP2 ADD SWAP1 PUSH2 0x3954 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE PUSH2 0x1A53 CALLER DUP3 PUSH2 0x2DC1 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x19B8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1A67 PUSH2 0xF3A JUMP JUMPDEST SWAP1 POP PUSH2 0x26AC DUP2 LT PUSH2 0x1A83 JUMPI PUSH8 0xDE0B6B3A7640000 SWAP2 POP POP PUSH2 0xDF3 JUMP JUMPDEST PUSH2 0x251C DUP2 LT PUSH2 0x1A9D JUMPI PUSH8 0x8E1BC9BF0400000 SWAP2 POP POP PUSH2 0xDF3 JUMP JUMPDEST PUSH2 0x1D4C DUP2 LT PUSH2 0x1AB7 JUMPI PUSH8 0x470DE4DF8200000 SWAP2 POP POP PUSH2 0xDF3 JUMP JUMPDEST PUSH2 0xDAC DUP2 LT PUSH2 0x1AD1 JUMPI PUSH8 0x2386F26FC100000 SWAP2 POP POP PUSH2 0xDF3 JUMP JUMPDEST PUSH2 0x5DC DUP2 LT PUSH2 0x1AEB JUMPI PUSH8 0x11C37937E080000 SWAP2 POP POP PUSH2 0xDF3 JUMP JUMPDEST PUSH2 0x1F4 DUP2 LT PUSH2 0x1B04 JUMPI PUSH7 0xD529AE9E860000 SWAP2 POP POP PUSH2 0xDF3 JUMP JUMPDEST PUSH7 0x8E1BC9BF040000 SWAP2 POP POP PUSH2 0xDF3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1B25 PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1B8B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6 PUSH1 0x0 PUSH2 0x1B98 PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP8 AND DUP1 DUP3 MSTORE SWAP2 SWAP1 SWAP4 MSTORE SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP3 ISZERO ISZERO SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH2 0x1BDC PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 ISZERO ISZERO DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x1C2D PUSH2 0xF75 PUSH2 0x25D4 JUMP JUMPDEST PUSH2 0x1C68 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3BFB PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C71 DUP2 PUSH2 0x13E0 JUMP JUMPDEST PUSH2 0x1C7A JUMPI PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x1C9E PUSH2 0x2DDB JUMP JUMPDEST SUB SWAP1 POP PUSH1 0x0 PUSH2 0x1CB0 DUP3 PUSH3 0x93A80 PUSH2 0x2DDF JUMP JUMPDEST SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 0x1CC3 JUMPI POP POP POP POP PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CD0 DUP5 PUSH1 0x1 PUSH2 0x2D0E JUMP JUMPDEST PUSH1 0x2 SWAP1 SWAP6 ADD SWAP5 SWAP1 SWAP5 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1CE8 PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1CF9 PUSH2 0x170A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1D42 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D9B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xF DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D5B PUSH2 0x39CE JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP2 SLOAD PUSH1 0x2 PUSH1 0x1 DUP3 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP2 AND DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV SWAP1 SWAP4 MUL DUP2 ADD PUSH1 0x80 SWAP1 DUP2 ADD SWAP1 SWAP5 MSTORE PUSH1 0x60 DUP2 ADD DUP4 DUP2 MSTORE SWAP1 SWAP4 SWAP2 SWAP3 DUP5 SWAP3 DUP5 SWAP2 SWAP1 DUP5 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1DF9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1DCE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1DF9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1DDC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1E2F JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xD5A JUMP JUMPDEST PUSH1 0x0 NOT DUP2 PUSH1 0x20 ADD MLOAD EQ ISZERO PUSH2 0x1E47 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0xD5A JUMP JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x0 SWAP1 PUSH2 0x1E5C PUSH2 0x2DDB JUMP JUMPDEST SUB SWAP1 POP PUSH1 0x0 PUSH2 0x1E6E DUP3 PUSH3 0x93A80 PUSH2 0x2DDF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1E7F DUP4 PUSH3 0x93A80 PUSH2 0x2E46 JUMP JUMPDEST SWAP1 POP DUP2 DUP5 EQ ISZERO PUSH2 0x1E97 JUMPI PUSH1 0x2 SWAP6 POP POP POP POP POP POP PUSH2 0xD5A JUMP JUMPDEST DUP2 PUSH2 0x1EA3 DUP6 PUSH1 0x1 PUSH2 0x2D0E JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x1EB1 JUMPI POP PUSH2 0x2A30 DUP2 LT JUMPDEST ISZERO PUSH2 0x1EC4 JUMPI PUSH1 0x2 SWAP6 POP POP POP POP POP POP PUSH2 0xD5A JUMP JUMPDEST POP PUSH1 0x3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1EDC PUSH2 0x1650 PUSH2 0x25D4 JUMP JUMPDEST PUSH2 0x1F17 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x31 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3E5C PUSH1 0x31 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F23 DUP5 DUP5 DUP5 DUP5 PUSH2 0x2EAD JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x1F35 DUP4 PUSH2 0x12DB JUMP JUMPDEST POP SWAP2 SWAP3 POP PUSH1 0x1 SWAP2 POP PUSH2 0x1F44 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F4D DUP5 PUSH2 0x1D51 JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1F58 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2036 JUMPI PUSH2 0x1F66 PUSH2 0x148A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3B1E PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1FB1 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1F92 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE DUP6 MLOAD SWAP2 SWAP1 SWAP4 ADD SWAP3 DUP6 ADD SWAP2 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1FF9 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1FDA JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP PUSH2 0xD5A JUMP JUMPDEST PUSH1 0x2 PUSH2 0x2041 DUP5 PUSH2 0x1D51 JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x204C JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x21BD JUMPI PUSH2 0x205A PUSH2 0x148A JUMP JUMPDEST PUSH1 0x31 PUSH1 0x0 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x209F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2087 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x20CC JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2127 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2108 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x21A0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x217E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 DUP3 ADD SWAP2 PUSH2 0x21A0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x218C JUMPI JUMPDEST POP POP SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP PUSH2 0xD5A JUMP JUMPDEST PUSH2 0x21C5 PUSH2 0x148A JUMP JUMPDEST PUSH1 0x32 PUSH1 0x0 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x220A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x21F2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x2237 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2292 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2273 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x230B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x22E9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 DUP3 ADD SWAP2 PUSH2 0x230B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x22F7 JUMPI JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x10E0 SWAP1 PUSH2 0x2646 JUMP JUMPDEST PUSH1 0xE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP7 AND ISZERO MUL ADD SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 DIV SWAP2 DUP3 ADD DUP5 SWAP1 DIV DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE SWAP1 SWAP3 SWAP2 DUP4 SWAP2 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x23D5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x23AA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x23D5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x23B8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH11 0x4D494E5445525F524F4C45 PUSH1 0xA8 SHL DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0xB ADD SWAP1 KECCAK256 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x242C SWAP1 PUSH2 0x1067 PUSH2 0x25D4 JUMP JUMPDEST PUSH2 0x113D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3C4E PUSH1 0x30 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH11 0x5041555345525F524F4C45 PUSH1 0xA8 SHL DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0xB ADD SWAP1 KECCAK256 DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x24C0 PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x24D1 PUSH2 0x170A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x251A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D9B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x255F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3AF8 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0xD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2A30 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10E0 PUSH1 0x3 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x2EFF AND JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x260D DUP3 PUSH2 0x13B2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10E0 DUP3 PUSH2 0x2AE9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x265C DUP3 PUSH2 0x25C1 JUMP JUMPDEST PUSH2 0x2697 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3C22 PUSH1 0x2C SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x26A2 DUP4 PUSH2 0x13B2 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x26DD JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x26D2 DUP5 PUSH2 0xDF6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x26ED JUMPI POP PUSH2 0x26ED DUP2 DUP6 PUSH2 0x248A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2708 DUP3 PUSH2 0x13B2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x274D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3DBB PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2792 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3BB1 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x279D DUP4 DUP4 DUP4 PUSH2 0x2F0B JUMP JUMPDEST PUSH2 0x27A8 PUSH1 0x0 DUP3 PUSH2 0x25D8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x27D0 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2F6B AND JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x27F9 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2F77 AND JUMP JUMPDEST POP PUSH2 0x280C PUSH1 0x3 DUP3 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x2F83 AND JUMP JUMPDEST POP DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2871 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2F99 AND JUMP JUMPDEST ISZERO PUSH2 0x10B1 JUMPI PUSH2 0x287E PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10DD DUP4 DUP4 PUSH2 0x2FAE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x28EC SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x3012 AND JUMP JUMPDEST ISZERO PUSH2 0x10B1 JUMPI PUSH2 0x28F9 PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x2945 PUSH2 0x12D2 JUMP JUMPDEST PUSH2 0x298D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x29C0 PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29E8 DUP3 PUSH2 0x13B2 JUMP JUMPDEST SWAP1 POP PUSH2 0x29F6 DUP2 PUSH1 0x0 DUP5 PUSH2 0x2F0B JUMP JUMPDEST PUSH2 0x2A01 PUSH1 0x0 DUP4 PUSH2 0x25D8 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP5 AND ISZERO MUL ADD SWAP1 SWAP2 AND DIV ISZERO PUSH2 0x2A3F JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x2A3F SWAP2 PUSH2 0x39EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2A67 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x2F6B AND JUMP JUMPDEST POP PUSH2 0x2A79 PUSH1 0x3 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x3027 AND JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP4 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH2 0x2AC5 DUP7 DUP7 PUSH2 0x3033 JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2ADF DUP5 DUP5 DUP5 PUSH2 0x30AE JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2B48 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x2B51 DUP2 PUSH2 0x25C1 JUMP JUMPDEST ISZERO PUSH2 0x2BA3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x2BAF PUSH1 0x0 DUP4 DUP4 PUSH2 0x2F0B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2BD7 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2F77 AND JUMP JUMPDEST POP PUSH2 0x2BEA PUSH1 0x3 DUP3 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x2F83 AND JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD TIMESTAMP PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DIFFICULTY DUP3 DUP5 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x80 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x0 SWAP1 PUSH2 0x2C6F DUP5 DUP3 PUSH2 0x3178 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C7E PUSH2 0x12D2 JUMP JUMPDEST ISZERO PUSH2 0x2CC3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x29C0 PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10DD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x31D2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x10DD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2D77 JUMPI POP PUSH1 0x0 PUSH2 0x10E0 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x2D84 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x10DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3D4E PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x10B1 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x31EA JUMP JUMPDEST TIMESTAMP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x2E35 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x2E3E JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x2E9C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206D6F64756C6F206279207A65726F0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x2EA5 JUMPI INVALID JUMPDEST MOD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2EB8 DUP5 DUP5 DUP5 PUSH2 0x26F5 JUMP JUMPDEST PUSH2 0x2EC4 DUP5 DUP5 DUP5 DUP5 PUSH2 0x323C JUMP JUMPDEST PUSH2 0x1F23 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x32 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3AC6 PUSH1 0x32 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x10DD DUP4 DUP4 PUSH2 0x31D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO DUP1 PUSH2 0x2F25 JUMPI POP PUSH2 0x2F25 DUP2 PUSH2 0x13E0 JUMP JUMPDEST PUSH2 0x2F60 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3E35 PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF2E DUP4 DUP4 DUP4 PUSH2 0x33BC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10DD DUP4 DUP4 PUSH2 0x33C7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10DD DUP4 DUP4 PUSH2 0x348D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2ADF DUP5 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x34D7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10DD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x348D JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 DUP3 LT PUSH2 0x2FF0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3A4A PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2FFF JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10DD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x33C7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10DD DUP4 DUP4 PUSH2 0x356E JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP4 LT PUSH2 0x3077 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3D2C PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x3088 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD DUP2 PUSH1 0x1 ADD SLOAD SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP3 DUP2 PUSH2 0x3149 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x310E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x30F6 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x313B JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP5 PUSH1 0x0 ADD PUSH1 0x1 DUP3 SUB DUP2 SLOAD DUP2 LT PUSH2 0x315C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x60 PUSH2 0x319C PUSH2 0x3197 DUP5 PUSH2 0x2710 PUSH2 0x2E46 JUMP JUMPDEST PUSH2 0x3642 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH2 0x31B1 SWAP1 DUP4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x3954 JUMP JUMPDEST POP PUSH2 0x31BA PUSH2 0x2DDB JUMP JUMPDEST PUSH1 0x1 DUP4 ADD SSTORE PUSH1 0x0 PUSH2 0x31CA DUP6 PUSH2 0x13B2 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x31F4 DUP4 DUP4 PUSH2 0x2AED JUMP JUMPDEST PUSH2 0x3201 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x323C JUMP JUMPDEST PUSH2 0xF2E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x32 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3AC6 PUSH1 0x32 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3250 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x372E JUMP JUMPDEST PUSH2 0x325C JUMPI POP PUSH1 0x1 PUSH2 0x26ED JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3382 PUSH4 0xA85BD01 PUSH1 0xE1 SHL PUSH2 0x3271 PUSH2 0x25D4 JUMP JUMPDEST DUP9 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x32EA JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x32D2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x3317 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x32 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3AC6 PUSH1 0x32 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x3734 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x339B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xF2E DUP4 DUP4 DUP4 PUSH2 0x3743 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x3483 JUMPI DUP4 SLOAD PUSH1 0x0 NOT DUP1 DUP4 ADD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x0 SWAP1 DUP8 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x33FA JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x3417 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE DUP3 DUP2 MSTORE PUSH1 0x1 DUP10 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP5 ADD SWAP1 SSTORE DUP7 SLOAD DUP8 SWAP1 DUP1 PUSH2 0x3447 JUMPI INVALID JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP7 PUSH1 0x1 ADD PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP5 POP POP POP POP POP PUSH2 0x10E0 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x10E0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3499 DUP4 DUP4 PUSH2 0x31D2 JUMP JUMPDEST PUSH2 0x34CF JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x10E0 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x10E0 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 PUSH2 0x353C JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP5 DUP2 MSTORE DUP7 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP10 SSTORE PUSH1 0x0 DUP10 DUP2 MSTORE DUP5 DUP2 KECCAK256 SWAP6 MLOAD PUSH1 0x2 SWAP1 SWAP4 MUL SWAP1 SWAP6 ADD SWAP2 DUP3 SSTORE SWAP2 MLOAD SWAP1 DUP3 ADD SSTORE DUP7 SLOAD DUP7 DUP5 MSTORE DUP2 DUP9 ADD SWAP1 SWAP3 MSTORE SWAP3 SWAP1 SWAP2 KECCAK256 SSTORE PUSH2 0x2AE2 JUMP JUMPDEST DUP3 DUP6 PUSH1 0x0 ADD PUSH1 0x1 DUP4 SUB DUP2 SLOAD DUP2 LT PUSH2 0x354F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 SWAP2 POP POP PUSH2 0x2AE2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x3483 JUMPI DUP4 SLOAD PUSH1 0x0 NOT DUP1 DUP4 ADD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x0 SWAP1 DUP8 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x35A1 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x35C1 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 DUP5 SLOAD PUSH1 0x2 SWAP1 SWAP4 MUL ADD SWAP2 DUP3 SSTORE PUSH1 0x1 SWAP4 DUP5 ADD SLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP4 SLOAD DUP3 MSTORE DUP10 DUP4 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP5 ADD SWAP1 SSTORE DUP7 SLOAD DUP8 SWAP1 DUP1 PUSH2 0x3600 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 PUSH1 0x2 PUSH1 0x0 NOT SWAP1 SWAP5 ADD SWAP4 DUP5 MUL ADD DUP3 DUP2 SSTORE PUSH1 0x1 SWAP1 DUP2 ADD DUP4 SWAP1 SSTORE SWAP3 SWAP1 SWAP4 SSTORE DUP9 DUP2 MSTORE DUP10 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE SWAP5 POP PUSH2 0x10E0 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 JUMPDEST PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3728 JUMPI PUSH1 0x10 DUP2 PUSH1 0xA DUP2 LT PUSH2 0x365D JUMPI INVALID JUMPDEST PUSH1 0x10 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x2 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP4 GT PUSH2 0x3720 JUMPI PUSH1 0x11 DUP2 PUSH1 0xA DUP2 LT PUSH2 0x368E JUMPI INVALID JUMPDEST ADD DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x2 PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x3713 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x36E8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3713 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x36F6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP PUSH2 0xD5A JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x3647 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2ADF DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x3792 JUMP JUMPDEST PUSH2 0x374E DUP4 DUP4 DUP4 PUSH2 0xF2E JUMP JUMPDEST PUSH2 0x3756 PUSH2 0x12D2 JUMP JUMPDEST ISZERO PUSH2 0xF2E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3A6C PUSH1 0x2B SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x37D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3BD5 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x37DC DUP6 PUSH2 0x372E JUMP JUMPDEST PUSH2 0x382D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x386C JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x384D JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x38CE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x38D3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x38E3 DUP3 DUP3 DUP7 PUSH2 0x38EE JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x38FD JUMPI POP DUP2 PUSH2 0x2AE2 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x390D JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 DUP2 MSTORE DUP5 MLOAD PUSH1 0x24 DUP5 ADD MSTORE DUP5 MLOAD DUP6 SWAP4 SWAP2 SWAP3 DUP4 SWAP3 PUSH1 0x44 ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 DUP4 ISZERO PUSH2 0x310E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x30F6 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x3995 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x39C2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x39C2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x39C2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x39A7 JUMP JUMPDEST POP PUSH2 0x1B14 SWAP3 SWAP2 POP PUSH2 0x3A2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x3A15 JUMPI POP PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x12B3 SWAP2 SWAP1 JUMPDEST PUSH2 0xDF3 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1B14 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3A35 JUMP INVALID GASLIMIT PUSH15 0x756D657261626C655365743A20696E PUSH5 0x6578206F75 PUSH21 0x206F6620626F756E64734552433732315061757361 PUSH3 0x6C653A KECCAK256 PUSH21 0x6F6B656E207472616E73666572207768696C652070 PUSH2 0x7573 PUSH6 0x644163636573 PUSH20 0x436F6E74726F6C3A2073656E646572206D757374 KECCAK256 PUSH3 0x652061 PUSH15 0x2061646D696E20746F206772616E74 GASLIMIT MSTORE NUMBER CALLDATACOPY ORIGIN BALANCE GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F206E6F6E20455243373231 MSTORE PUSH6 0x636569766572 KECCAK256 PUSH10 0x6D706C656D656E746572 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F2061646472657373516D5764316D6E374475477978394279 PUSH7 0x4E657143736764 MSTORE8 SSTORE PUSH20 0x4A5A316372616769746761796773714476456D47 PUSH6 0x726D696E6174 PUSH10 0x6F6E2073746172747320 ORIGIN ADDRESS ORIGIN BALANCE 0x2D ADDRESS CALLVALUE 0x2D BALANCE ORIGIN SLOAD BALANCE CALLDATASIZE GASPRICE ADDRESS ADDRESS GASPRICE ADDRESS ADDRESS GAS GASLIMIT MSTORE NUMBER CALLDATACOPY ORIGIN BALANCE POP PUSH19 0x657365744D696E746572506175736572417574 PUSH16 0x49643A206D7573742068617665207061 PUSH22 0x73657220726F6C6520746F2070617573654552433732 BALANCE GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH10 0x6E73756666696369656E PUSH21 0x2062616C616E636520666F722063616C6C4F6E6C79 KECCAK256 PUSH21 0x6865204F776E65722063616E207761746572206120 NUMBER PUSH19 0x7970744F72636869642E4552433732313A206F PUSH17 0x657261746F7220717565727920666F7220 PUSH15 0x6F6E6578697374656E7420746F6B65 PUSH15 0x416363657373436F6E74726F6C3A20 PUSH20 0x656E646572206D75737420626520616E2061646D PUSH10 0x6E20746F207265766F6B PUSH6 0x455243373231 GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F76652063616C6C6572206973206E6F74206F PUSH24 0x6E6572206E6F7220617070726F76656420666F7220616C6C GASLIMIT MSTORE NUMBER CALLDATACOPY ORIGIN BALANCE GASPRICE KECCAK256 PUSH3 0x616C61 PUSH15 0x636520717565727920666F72207468 PUSH6 0x207A65726F20 PUSH2 0x6464 PUSH19 0x6573734552433732313A206F776E6572207175 PUSH6 0x727920666F72 KECCAK256 PUSH15 0x6F6E6578697374656E7420746F6B65 PUSH15 0x45746865722076616C75652073656E PUSH21 0x2069732062656C6F7720746865207072696365456E PUSH22 0x6D657261626C654D61703A20696E646578206F757420 PUSH16 0x6620626F756E6473536166654D617468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F774552433732313A2061 PUSH17 0x70726F76656420717565727920666F7220 PUSH15 0x6F6E6578697374656E7420746F6B65 PUSH15 0x4F776E61626C653A2063616C6C6572 KECCAK256 PUSH10 0x73206E6F742074686520 PUSH16 0x776E65724552433732313A207472616E PUSH20 0x666572206F6620746F6B656E2074686174206973 KECCAK256 PUSH15 0x6F74206F776E596F752063616E2070 PUSH13 0x616E74206D696E696D756D2031 0x2C KECCAK256 PUSH14 0x6178696D756D2032302043727970 PUSH21 0x4F7263686964734552433732313A20617070726F76 PUSH2 0x6C20 PUSH21 0x6F2063757272656E74206F776E6572446561642043 PUSH19 0x7970744F7263686964732063616E6E6F742062 PUSH6 0x207472616E73 PUSH7 0x65727265644552 NUMBER CALLDATACOPY ORIGIN BALANCE GASPRICE KECCAK256 PUSH21 0x72616E736665722063616C6C6572206973206E6F74 KECCAK256 PUSH16 0x776E6572206E6F7220617070726F7665 PUSH5 0x4F6E6C7920 PUSH21 0x6865204F776E65722063616E206765726D696E6174 PUSH6 0x206120437279 PUSH17 0x744F72636869642E455243373231507265 PUSH20 0x65744D696E7465725061757365724175746F4964 GASPRICE KECCAK256 PUSH14 0x7573742068617665206D696E7465 PUSH19 0x20726F6C6520746F206D696E74455243373231 TIMESTAMP PUSH22 0x726E61626C653A2063616C6C6572206973206E6F7420 PUSH16 0x776E6572206E6F7220617070726F7665 PUSH5 0x4552433732 BALANCE POP PUSH19 0x657365744D696E746572506175736572417574 PUSH16 0x49643A206D7573742068617665207061 PUSH22 0x73657220726F6C6520746F20756E7061757365416363 PUSH6 0x7373436F6E74 PUSH19 0x6F6C3A2063616E206F6E6C792072656E6F756E PUSH4 0x6520726F PUSH13 0x657320666F722073656C66A264 PUSH10 0x70667358221220669084 0xC0 CALLDATACOPY 0xE9 0xE2 PUSH20 0xB31D45E8CD7D87FCB21B2D1237DF1DEE094B97B CODECOPY 0x22 SWAP3 PUSH19 0x64736F6C634300060600330000000000000000 ",
          "sourceMap": "622:10061:37:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;965:148:8;;5:9:-1;2:2;;;27:1;24;17:12;2:2;965:148:8;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;965:148:8;-1:-1:-1;;;;;;965:148:8;;:::i;:::-;;;;;;;;;;;;;;;;;;4517:98:20;;5:9:-1;2:2;;;27:1;24;17:12;2:2;4517:98:20;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;4517:98:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7222:217;;5:9:-1;2:2;;;27:1;24;17:12;2:2;7222:217:20;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;7222:217:20;;:::i;:::-;;;;-1:-1:-1;;;;;7222:217:20;;;;;;;;;;;;;;6766:395;;5:9:-1;2:2;;;27:1;24;17:12;2:2;6766:395:20;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;;6766:395:20;;;;;;;;:::i;:::-;;1164:45:37;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1164:45:37;;;:::i;:::-;;;;;;;;;;;;;;;;6260:208:20;;5:9:-1;2:2;;;27:1;24;17:12;2:2;6260:208:20;;;:::i;8379:123:37:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;8379:123:37;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;8379:123:37;;:::i;8086:300:20:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;8086:300:20;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;;8086:300:20;;;;;;;;;;;;;;;;;:::i;4282:112:6:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;4282:112:6;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;4282:112:6;;:::i;6081:79:37:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;6081:79:37;;;:::i;4644:223:6:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;4644:223:6;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;4644:223:6;;;;;;-1:-1:-1;;;;;4644:223:6;;:::i;6029:160:20:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;6029:160:20;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;;6029:160:20;;;;;;;;:::i;5818:205:6:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;5818:205:6;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;5818:205:6;;;;;;-1:-1:-1;;;;;5818:205:6;;:::i;6253:131:37:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;6253:131:37;;;:::i;3141:182:11:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;3141:182:11;;;:::i;8452:149:20:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;8452:149:20;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;;8452:149:20;;;;;;;;;;;;;;;;;:::i;455:241:21:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;455:241:21;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;455:241:21;;:::i;6540:169:20:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;6540:169:20;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;6540:169:20;;:::i;1052:84:32:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1052:84:32;;;:::i;9921:392:37:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;9921:392:37;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;9921:392:37;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;9921:392:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3770:49;;5:9:-1;2:2;;;27:1;24;17:12;2:2;3770:49:37;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;3770:49:37;;:::i;4280:175:20:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;4280:175:20;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;4280:175:20;;:::i;8256:117:37:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;8256:117:37;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;8256:117:37;;:::i;2153:400:11:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;2153:400:11;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;2153:400:11;-1:-1:-1;;;;;2153:400:11;;:::i;1110:48:37:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1110:48:37;;;:::i;5855:95:20:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;5855:95:20;;;:::i;4005:218::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;4005:218:20;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;4005:218:20;-1:-1:-1;;;;;4005:218:20;;:::i;1717:145:7:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1717:145:7;;;:::i;7308:310:37:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;7308:310:37;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;7308:310:37;;;;;;;:::i;2757:176:11:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;2757:176:11;;;:::i;1085:85:7:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1085:85:7;;;:::i;3965:136:6:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;3965:136:6;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;3965:136:6;;;;;;;:::i;2950:137::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;2950:137:6;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;2950:137:6;;;;;;-1:-1:-1;;;;;2950:137:6;;:::i;4679:102:20:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;4679:102:20;;;:::i;6425:877:37:-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;6425:877:37;;:::i;5165:831::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;5165:831:37;;;:::i;1727:49:6:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1727:49:6;;;:::i;7506:290:20:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;7506:290:20;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;;7506:290:20;;;;;;;;;;:::i;9275:640:37:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;9275:640:37;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;9275:640:37;;:::i;6002:73::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;6002:73:37;;;:::i;8508:761::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;8508:761:37;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;8508:761:37;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8667:282:20;;5:9:-1;2:2;;;27:1;24;17:12;2:2;8667:282:20;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;;;;;8667:282:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;8667:282:20;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;8667:282:20;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;8667:282:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;8667:282:20;;-1:-1:-1;8667:282:20;;-1:-1:-1;;;;;8667:282:20:i;4308:558:37:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;4308:558:37;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;4308:558:37;;:::i;3255:125:6:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;3255:125:6;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;3255:125:6;;:::i;925:51:37:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;925:51:37;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;925:51:37;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;925:51:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1047:62:11;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1047:62:11;;;:::i;5101:226:6:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;5101:226:6;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;5101:226:6;;;;;;-1:-1:-1;;;;;5101:226:6;;:::i;1115:62:11:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1115:62:11;;;:::i;7862:162:20:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;7862:162:20;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;;7862:162:20;;;;;;;;;;:::i;2011:240:7:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;2011:240:7;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;2011:240:7;-1:-1:-1;;;;;2011:240:7;;:::i;1225:47:37:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1225:47:37;;;:::i;965:148:8:-;-1:-1:-1;;;;;;1073:33:8;;1050:4;1073:33;;;:20;:33;;;;;;;;965:148;;;;:::o;4517:98:20:-;4603:5;4596:12;;;;;;;;-1:-1:-1;;4596:12:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4571:13;;4596:12;;4603:5;;4596:12;;4603:5;4596:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4517:98;;:::o;7222:217::-;7298:7;7325:16;7333:7;7325;:16::i;:::-;7317:73;;;;-1:-1:-1;;;7317:73:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7408:24:20;;;;:15;:24;;;;;;-1:-1:-1;;;;;7408:24:20;;7222:217::o;6766:395::-;6846:13;6862:23;6877:7;6862:14;:23::i;:::-;6846:39;;6909:5;-1:-1:-1;;;;;6903:11:20;:2;-1:-1:-1;;;;;6903:11:20;;;6895:57;;;;-1:-1:-1;;;6895:57:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6987:5;-1:-1:-1;;;;;6971:21:20;:12;:10;:12::i;:::-;-1:-1:-1;;;;;6971:21:20;;:69;;;;6996:44;7020:5;7027:12;:10;:12::i;:::-;6996:23;:44::i;:::-;6963:159;;;;-1:-1:-1;;;6963:159:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7133:21;7142:2;7146:7;7133:8;:21::i;:::-;6766:395;;;:::o;1164:45:37:-;1203:6;1164:45;:::o;6260:208:20:-;6321:7;6440:21;:12;:19;:21::i;:::-;6433:28;;6260:208;:::o;8379:123:37:-;8436:4;8483:12;8459:20;8471:7;8459:11;:20::i;:::-;:36;;;;;;;;;;8379:123;-1:-1:-1;;8379:123:37:o;8086:300:20:-;8245:41;8264:12;:10;:12::i;:::-;8278:7;8245:18;:41::i;:::-;8237:103;;;;-1:-1:-1;;;8237:103:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8351:28;8361:4;8367:2;8371:7;8351:9;:28::i;4282:112:6:-;4339:7;4365:12;;;;;;;;;;:22;;;;4282:112::o;6081:79:37:-;1308:12:7;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:7;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:7;;1289:68;;;;;-1:-1:-1;;;1289:68:7;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1289:68:7;;;;;;;;;;;;;;;6132:14:37::1;:21:::0;;-1:-1:-1;;6132:21:37::1;;;::::0;;6081:79::o;4644:223:6:-;4735:6;:12;;;;;;;;;;:22;;;4727:45;;4759:12;:10;:12::i;:::-;4727:7;:45::i;:::-;4719:105;;;;-1:-1:-1;;;4719:105:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4835:25;4846:4;4852:7;4835:10;:25::i;:::-;4644:223;;:::o;6029:160:20:-;-1:-1:-1;;;;;6152:20:20;;6126:7;6152:20;;;:13;:20;;;;;:30;;6176:5;6152:30;:23;:30;:::i;:::-;6145:37;;6029:160;;;;;:::o;5818:205:6:-;5915:12;:10;:12::i;:::-;-1:-1:-1;;;;;5904:23:6;:7;-1:-1:-1;;;;;5904:23:6;;5896:83;;;;-1:-1:-1;;;5896:83:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5990:26;6002:4;6008:7;5990:11;:26::i;6253:131:37:-;1308:12:7;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:7;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:7;;1289:68;;;;;-1:-1:-1;;;1289:68:7;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1289:68:7;;;;;;;;;;;;;;;6349:28:37::1;::::0;6318:21:::1;::::0;6349:10:::1;::::0;:28;::::1;;;::::0;6318:21;;6300:15:::1;6349:28:::0;6300:15;6349:28;6318:21;6349:10;:28;::::1;;;;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;3141:182:11::0;1153:24;;;-1:-1:-1;;;1153:24:11;;;;;;;;;;;;3193:34;;3214:12;:10;:12::i;3193:34::-;3185:111;;;;-1:-1:-1;;;3185:111:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3306:10;:8;:10::i;:::-;3141:182::o;8452:149:20:-;8555:39;8572:4;8578:2;8582:7;8555:39;;;;;;;;;;;;:16;:39::i;455:241:21:-;571:41;590:12;:10;:12::i;571:41::-;563:102;;;;-1:-1:-1;;;563:102:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;675:14;681:7;675:5;:14::i;:::-;455:241;:::o;6540:169:20:-;6615:7;;6656:22;:12;6672:5;6656:22;:15;:22;:::i;:::-;-1:-1:-1;6634:44:20;6540:169;-1:-1:-1;;;6540:169:20:o;1052:84:32:-;1122:7;;;;1052:84;:::o;9921:392:37:-;10049:7;10142:21;;;:12;:21;;;;;10185:31;;;;10230:32;;;;10022:13;;10049:7;;;;;10276:20;10155:7;10276:11;:20::i;:::-;10121:185;;;;;;;;-1:-1:-1;;10121:185:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9921:392;;;;;:::o;3770:49::-;;;;;;;;;;;;;:::o;4280:175:20:-;4352:7;4378:70;4395:7;4378:70;;;;;;;;;;;;;;;;;:12;;:70;;:16;:70;:::i;8256:117:37:-;8309:4;8356:10;8332:20;8344:7;8332:11;:20::i;:::-;:34;;;;;;;;;;;8256:117;-1:-1:-1;;8256:117:37:o;2153:400:11:-;1085:24;;;-1:-1:-1;;;1085:24:11;;;;;;;;;;;;2212:34;;2233:12;:10;:12::i;2212:34::-;2204:108;;;;-1:-1:-1;;;2204:108:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2473:36;2479:2;2483:25;:15;:23;:25::i;:::-;2473:5;:36::i;:::-;2519:27;:15;:25;:27::i;1110:48:37:-;1153:5;1110:48;:::o;5855:95:20:-;5935:8;5928:15;;;;;;;;-1:-1:-1;;5928:15:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5903:13;;5928:15;;5935:8;;5928:15;;5935:8;5928:15;;;;;;;;;;;;;;;;;;;;;;;;4005:218;4077:7;-1:-1:-1;;;;;4104:19:20;;4096:74;;;;-1:-1:-1;;;4096:74:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4187:20:20;;;;;;:13;:20;;;;;:29;;:27;:29::i;1717:145:7:-;1308:12;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:7;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:7;;1289:68;;;;;-1:-1:-1;;;1289:68:7;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1289:68:7;;;;;;;;;;;;;;;1807:6:::1;::::0;1786:40:::1;::::0;1823:1:::1;::::0;-1:-1:-1;;;;;1807:6:7::1;::::0;1786:40:::1;::::0;1823:1;;1786:40:::1;1836:6;:19:::0;;-1:-1:-1;;;;;;1836:19:7::1;::::0;;1717:145::o;7308:310:37:-;7395:14;;;;;;;7387:66;;;;-1:-1:-1;;;7387:66:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7471:41;7490:12;:10;:12::i;:::-;7504:7;7471:18;:41::i;:::-;7463:97;;;;-1:-1:-1;;;7463:97:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7570:41;7585:7;7594:16;7570:14;:41::i;2757:176:11:-;1153:24;;;-1:-1:-1;;;1153:24:11;;;;;;;;;;;;2807:34;;2828:12;:10;:12::i;2807:34::-;2799:109;;;;-1:-1:-1;;;2799:109:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2918:8;:6;:8::i;1085:85:7:-;1157:6;;-1:-1:-1;;;;;1157:6:7;1085:85;:::o;3965:136:6:-;4038:7;4064:12;;;;;;;;;;:30;;4088:5;4064:30;:23;:30;:::i;2950:137::-;3019:4;3042:12;;;;;;;;;;:38;;3072:7;3042:38;:29;:38;:::i;4679:102:20:-;4767:7;4760:14;;;;;;;;-1:-1:-1;;4760:14:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4735:13;;4760:14;;4767:7;;4760:14;;4767:7;4760:14;;;;;;;;;;;;;;;;;;;;;;;;6425:877:37;6490:11;;;;6482:45;;;;;-1:-1:-1;;;6482:45:37;;;;;;;;;;;;-1:-1:-1;;;6482:45:37;;;;;;;;;;;;;;;6573:13;:11;:13::i;:::-;1153:5;6554:32;6545:5;:41;;6537:75;;;;;-1:-1:-1;;;6537:75:37;;;;;;;;;;;;-1:-1:-1;;;6537:75:37;;;;;;;;;;;;;;;1153:5;6630:13;:11;:13::i;:::-;:32;6622:67;;;;;-1:-1:-1;;;6622:67:37;;;;;;;;;;;;-1:-1:-1;;;6622:67:37;;;;;;;;;;;;;;;6715:1;6707:5;:9;:24;;;;;6729:2;6720:5;:11;;6707:24;6699:85;;;;-1:-1:-1;;;6699:85:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1153:5;6802:34;6815:13;:11;:13::i;:::-;6830:5;6802:12;:34::i;:::-;:54;;6794:91;;;;;-1:-1:-1;;;6794:91:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;6916:35;6929:14;:12;:14::i;:::-;6945:5;6916:12;:35::i;:::-;6903:9;:48;;6895:96;;;;-1:-1:-1;;;6895:96:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7007:9;7002:294;7026:5;7022:1;:9;7002:294;;;7052:21;:9;:19;:21::i;:::-;7087:17;7107:19;:9;:17;:19::i;:::-;7166:73;;;;;;;;;;;;;;;-1:-1:-1;;;7166:73:37;;;;;;-1:-1:-1;;7166:73:37;;;;;;;;-1:-1:-1;7166:73:37;;;;;;7140:23;;;:12;:23;;;;;;:99;;;;7087:39;;-1:-1:-1;7166:73:37;;7140:23;;:99;;:23;;:99;;;;:::i;:::-;-1:-1:-1;7140:99:37;;;;;;;;;;;;;;;;;;7253:32;7263:10;7275:9;7253;:32::i;:::-;-1:-1:-1;7033:3:37;;7002:294;;5165:831;5210:13;5235:21;5259:13;:11;:13::i;:::-;5235:37;;5303:4;5286:13;:21;5282:708;;5330:19;5323:26;;;;;5282:708;5406:4;5389:13;:21;5385:605;;5433:18;5426:25;;;;;5385:605;5513:4;5496:13;:21;5492:498;;5540:18;5533:25;;;;;5492:498;5620:4;5603:13;:21;5599:391;;5647:18;5640:25;;;;;5599:391;5727:4;5710:13;:21;5706:284;;5754:17;5747:24;;;;;5706:284;5833:3;5816:13;:20;5812:178;;5859:17;5852:24;;;;;5812:178;5938:17;5931:24;;;;;5812:178;5165:831;;:::o;1727:49:6:-;1772:4;1727:49;:::o;7506:290:20:-;7620:12;:10;:12::i;:::-;-1:-1:-1;;;;;7608:24:20;:8;-1:-1:-1;;;;;7608:24:20;;;7600:62;;;;;-1:-1:-1;;;7600:62:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;7718:8;7673:18;:32;7692:12;:10;:12::i;:::-;-1:-1:-1;;;;;7673:32:20;;;;;;;;;;;;;;;;;-1:-1:-1;7673:32:20;;;:42;;;;;;;;;;;;:53;;-1:-1:-1;;7673:53:20;;;;;;;;;;;7756:12;:10;:12::i;:::-;7741:48;;;;;;;;;;-1:-1:-1;;;;;7741:48:20;;;;;;;;;;;;;;7506:290;;:::o;9275:640:37:-;9332:41;9351:12;:10;:12::i;9332:41::-;9324:93;;;;-1:-1:-1;;;9324:93:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9433:14;9439:7;9433:5;:14::i;:::-;9428:52;;9463:7;;9428:52;9490:26;9519:21;;;:12;:21;;;;;9575:17;;;;9636:16;;;;9519:21;;9575:17;;9620:13;:11;:13::i;:::-;:32;9602:50;;9662:18;9683:44;9704:7;1203:6;9683:12;:44::i;:::-;9662:65;;9758:10;9742:13;:26;9738:63;;;9784:7;;;;;;9738:63;9811:21;9835:30;9848:13;9863:1;9835:12;:30::i;:::-;9875:17;;;;:33;;;;-1:-1:-1;;;;9275:640:37;:::o;6002:73::-;1308:12:7;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:7;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:7;;1289:68;;;;;-1:-1:-1;;;1289:68:7;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1289:68:7;;;;;;;;;;;;;;;6050:11:37::1;:18:::0;;-1:-1:-1;;6050:18:37::1;6064:4;6050:18;::::0;;6002:73::o;8508:761::-;8567:5;8584:25;;:::i;:::-;8612:21;;;;:12;:21;;;;;;;;;8584:49;;;;;;;;;;;-1:-1:-1;;8584:49:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8612:21;;8584:49;;8612:21;;8584:49;;;8612:21;8584:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8647:6;:16;;;8667:1;8647:21;8643:46;;;8677:12;8670:19;;;;;8643:46;-1:-1:-1;;8703:6:37;:16;;;:33;8699:56;;;8745:10;8738:17;;;;;8699:56;8793:17;;;;8854:16;;;;8765:25;;8838:13;:11;:13::i;:::-;:32;8820:50;;8880:18;8901:44;8922:7;1203:6;8901:12;:44::i;:::-;8880:65;;8955:14;8972:35;8985:7;1203:6;8972:12;:35::i;:::-;8955:52;;9043:10;9022:17;:31;9018:81;;;9076:12;9069:19;;;;;;;;;9018:81;9151:10;9113:34;9126:17;9145:1;9113:12;:34::i;:::-;:48;:76;;;;;1267:5;9165:6;:24;9113:76;9109:126;;;9212:12;9205:19;;;;;;;;;9109:126;-1:-1:-1;9252:10:37;;8508:761;-1:-1:-1;;;;;;8508:761:37:o;8667:282:20:-;8798:41;8817:12;:10;:12::i;8798:41::-;8790:103;;;;-1:-1:-1;;;8790:103:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8903:39;8917:4;8923:2;8927:7;8936:5;8903:13;:39::i;:::-;8667:282;;;;:::o;4308:558:37:-;4381:13;4407:21;4438:25;4455:7;4438:16;:25::i;:::-;-1:-1:-1;4406:57:37;;-1:-1:-1;4502:10:37;;-1:-1:-1;4478:34:37;;-1:-1:-1;4478:34:37;;:20;4490:7;4478:11;:20::i;:::-;:34;;;;;;;;;4474:120;;;4559:9;:7;:9::i;:::-;4570:11;;;;;;;;;;;;;;;;;4542:40;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;4542:40:37;;;;;;;;;;-1:-1:-1;4542:40:37;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;4542:40:37;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4542:40:37;;;4528:55;;;;;4474:120;4632:12;4608:20;4620:7;4608:11;:20::i;:::-;:36;;;;;;;;;4604:154;;;4691:9;:7;:9::i;:::-;4702:11;:43;4735:7;4724:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;4724:19:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4724:19:37;;;4714:30;;;;;;4702:43;;;;;;;;;;;4674:72;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;4674:72:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4674:72:37;;;4660:87;;;;;4604:154;4799:9;:7;:9::i;:::-;4810:15;:47;4847:7;4836:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;4836:19:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4836:19:37;;;4826:30;;;;;;4810:47;;;;;;;;;;;4782:76;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;4782:76:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4782:76:37;;;-1:-1:-1;;26:21;;;22:32;6:49;;4782:76:37;;;;4308:558;-1:-1:-1;;;;;;4308:558:37:o;3255:125:6:-;3318:7;3344:12;;;;;;;;;;:29;;:27;:29::i;925:51:37:-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;925:51:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1047:62:11:-;1085:24;;;-1:-1:-1;;;1085:24:11;;;;;;;;;;;;1047:62;:::o;5101:226:6:-;5193:6;:12;;;;;;;;;;:22;;;5185:45;;5217:12;:10;:12::i;5185:45::-;5177:106;;;;-1:-1:-1;;;5177:106:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1115:62:11;1153:24;;;-1:-1:-1;;;1153:24:11;;;;;;;;;;;;1115:62;:::o;7862:162:20:-;-1:-1:-1;;;;;7982:25:20;;;7959:4;7982:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;7862:162::o;2011:240:7:-;1308:12;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:7;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:7;;1289:68;;;;;-1:-1:-1;;;1289:68:7;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1289:68:7;;;;;;;;;;;;;;;-1:-1:-1;;;;;2099:22:7;::::1;2091:73;;;;-1:-1:-1::0;;;2091:73:7::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2200:6;::::0;2179:38:::1;::::0;-1:-1:-1;;;;;2179:38:7;;::::1;::::0;2200:6:::1;::::0;2179:38:::1;::::0;2200:6:::1;::::0;2179:38:::1;2227:6;:17:::0;;-1:-1:-1;;;;;;2227:17:7::1;-1:-1:-1::0;;;;;2227:17:7;;;::::1;::::0;;;::::1;::::0;;2011:240::o;1225:47:37:-;1267:5;1225:47;:::o;10383:125:20:-;10448:4;10471:30;:12;10493:7;10471:30;:21;:30;:::i;598:104:28:-;685:10;598:104;:::o;16225:189:20:-;16299:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;16299:29:20;-1:-1:-1;;;;;16299:29:20;;;;;;;;:24;;16352:23;16299:24;16352:14;:23::i;:::-;-1:-1:-1;;;;;16343:46:20;;;;;;;;;;;16225:189;;:::o;7820:121:30:-;7889:7;7915:19;7923:3;7915:7;:19::i;10666:351:20:-;10759:4;10783:16;10791:7;10783;:16::i;:::-;10775:73;;;;-1:-1:-1;;;10775:73:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10858:13;10874:23;10889:7;10874:14;:23::i;:::-;10858:39;;10926:5;-1:-1:-1;;;;;10915:16:20;:7;-1:-1:-1;;;;;10915:16:20;;:51;;;;10959:7;-1:-1:-1;;;;;10935:31:20;:20;10947:7;10935:11;:20::i;:::-;-1:-1:-1;;;;;10935:31:20;;10915:51;:94;;;;10970:39;10994:5;11001:7;10970:23;:39::i;:::-;10907:103;10666:351;-1:-1:-1;;;;10666:351:20:o;13707:584::-;13831:4;-1:-1:-1;;;;;13804:31:20;:23;13819:7;13804:14;:23::i;:::-;-1:-1:-1;;;;;13804:31:20;;13796:85;;;;-1:-1:-1;;;13796:85:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;13917:16:20;;13909:65;;;;-1:-1:-1;;;13909:65:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13985:39;14006:4;14012:2;14016:7;13985:20;:39::i;:::-;14086:29;14103:1;14107:7;14086:8;:29::i;:::-;-1:-1:-1;;;;;14126:19:20;;;;;;:13;:19;;;;;:35;;14153:7;14126:35;:26;:35;:::i;:::-;-1:-1:-1;;;;;;14171:17:20;;;;;;:13;:17;;;;;:30;;14193:7;14171:30;:21;:30;:::i;:::-;-1:-1:-1;14212:29:20;:12;14229:7;14238:2;14212:29;:16;:29;:::i;:::-;;14276:7;14272:2;-1:-1:-1;;;;;14257:27:20;14266:4;-1:-1:-1;;;;;14257:27:20;;;;;;;;;;;13707:584;;;:::o;7025:184:6:-;7098:6;:12;;;;;;;;;;:33;;7123:7;7098:33;:24;:33;:::i;:::-;7094:109;;;7179:12;:10;:12::i;:::-;-1:-1:-1;;;;;7152:40:6;7170:7;-1:-1:-1;;;;;7152:40:6;7164:4;7152:40;;;;;;;;;;7025:184;;:::o;9250:135:31:-;9321:7;9355:22;9359:3;9371:5;9355:3;:22::i;7215:188:6:-;7289:6;:12;;;;;;;;;;:36;;7317:7;7289:36;:27;:36;:::i;:::-;7285:112;;;7373:12;:10;:12::i;:::-;-1:-1:-1;;;;;7346:40:6;7364:7;-1:-1:-1;;;;;7346:40:6;7358:4;7346:40;;;;;;;;;;7215:188;;:::o;2064:117:32:-;1631:8;:6;:8::i;:::-;1623:41;;;;;-1:-1:-1;;;1623:41:32;;;;;;;;;;;;-1:-1:-1;;;1623:41:32;;;;;;;;;;;;;;;2122:7:::1;:15:::0;;-1:-1:-1;;2122:15:32::1;::::0;;2152:22:::1;2161:12;:10;:12::i;:::-;2152:22;::::0;;-1:-1:-1;;;;;2152:22:32;;::::1;::::0;;;;;;;::::1;::::0;;::::1;2064:117::o:0;12856:527:20:-;12915:13;12931:23;12946:7;12931:14;:23::i;:::-;12915:39;;12983:48;13004:5;13019:1;13023:7;12983:20;:48::i;:::-;13069:29;13086:1;13090:7;13069:8;:29::i;:::-;13154:19;;;;:10;:19;;;;;13148:33;;-1:-1:-1;;13148:33:20;;;;;;;;;;;:38;13144:95;;13209:19;;;;:10;:19;;;;;13202:26;;;:::i;:::-;-1:-1:-1;;;;;13249:20:20;;;;;;:13;:20;;;;;:36;;13277:7;13249:36;:27;:36;:::i;:::-;-1:-1:-1;13296:28:20;:12;13316:7;13296:28;:19;:28;:::i;:::-;-1:-1:-1;13340:36:20;;13368:7;;13364:1;;-1:-1:-1;;;;;13340:36:20;;;;;13364:1;;13340:36;12856:527;;:::o;8269:233:30:-;8349:7;;;;8408:22;8412:3;8424:5;8408:3;:22::i;:::-;8377:53;;;;-1:-1:-1;8269:233:30;-1:-1:-1;;;;;8269:233:30:o;9522:211::-;9629:7;9679:44;9684:3;9704;9710:12;9679:4;:44::i;:::-;9671:53;-1:-1:-1;9522:211:30;;;;;;:::o;1106:112:29:-;1197:14;;1106:112::o;12246:393:20:-;-1:-1:-1;;;;;12325:16:20;;12317:61;;;;;-1:-1:-1;;;12317:61:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12397:16;12405:7;12397;:16::i;:::-;12396:17;12388:58;;;;;-1:-1:-1;;;12388:58:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;12457:45;12486:1;12490:2;12494:7;12457:20;:45::i;:::-;-1:-1:-1;;;;;12513:17:20;;;;;;:13;:17;;;;;:30;;12535:7;12513:30;:21;:30;:::i;:::-;-1:-1:-1;12554:29:20;:12;12571:7;12580:2;12554:29;:16;:29;:::i;:::-;-1:-1:-1;12599:33:20;;12624:7;;-1:-1:-1;;;;;12599:33:20;;;12616:1;;12599:33;;12616:1;;12599:33;12246:393;;:::o;1224:178:29:-;1376:19;;1394:1;1376:19;;;1224:178::o;7624:279:37:-;7777:69;;;7794:15;7777:69;;;;;;;;7811:16;7777:69;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;7777:69:37;;;;;;;7767:80;;;;;7709:17;;7858:38;7876:7;7767:80;7858:17;:38::i;:::-;7624:279;;;;;:::o;1817:115:32:-;1366:8;:6;:8::i;:::-;1365:9;1357:38;;;;;-1:-1:-1;;;1357:38:32;;;;;;;;;;;;-1:-1:-1;;;1357:38:32;;;;;;;;;;;;;;;1876:7:::1;:14:::0;;-1:-1:-1;;1876:14:32::1;1886:4;1876:14;::::0;;1905:20:::1;1912:12;:10;:12::i;6984:165:31:-:0;7064:4;7087:55;7097:3;-1:-1:-1;;;;;7117:23:31;;7087:9;:55::i;2690:175:10:-;2748:7;2779:5;;;2802:6;;;;2794:46;;;;;-1:-1:-1;;;2794:46:10;;;;;;;;;;;;;;;;;;;;;;;;;;;3538:215;3596:7;3619:6;3615:20;;-1:-1:-1;3634:1:10;3627:8;;3615:20;3657:5;;;3661:1;3657;:5;:1;3680:5;;;;;:10;3672:56;;;;-1:-1:-1;;;3672:56:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11348:108:20;11423:26;11433:2;11437:7;11423:26;;;;;;;;;;;;:9;:26::i;93:102:39:-;173:15;93:102;:::o;4217:150:10:-;4275:7;4306:1;4302;:5;4294:44;;;;;-1:-1:-1;;;4294:44:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;4359:1;4355;:5;;;;;;;4217:150;-1:-1:-1;;;4217:150:10:o;4820:148::-;4878:7;4909:1;4905;:5;4897:42;;;;;-1:-1:-1;;;4897:42:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;4960:1;4956;:5;;;;;;;4820:148;-1:-1:-1;;;4820:148:10:o;9811:269:20:-;9924:28;9934:4;9940:2;9944:7;9924:9;:28::i;:::-;9970:48;9993:4;9999:2;10003:7;10012:5;9970:22;:48::i;:::-;9962:111;;;;-1:-1:-1;;;9962:111:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7588:149:30;7672:4;7695:35;7705:3;7725;7695:9;:35::i;4872:287:37:-;-1:-1:-1;;;;;5019:16:37;;;;:34;;;5039:14;5045:7;5039:5;:14::i;:::-;5011:86;;;;-1:-1:-1;;;5011:86:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5107:45;5134:4;5140:2;5144:7;5107:26;:45::i;8365:135:31:-;8435:4;8458:35;8466:3;8486:5;8458:7;:35::i;8068:129::-;8135:4;8158:32;8163:3;8183:5;8158:4;:32::i;7027:183:30:-;7116:4;7139:64;7144:3;7164;-1:-1:-1;;;;;7178:23:30;;7139:4;:64::i;6429:150:31:-;6499:4;6522:50;6527:3;-1:-1:-1;;;;;6547:23:31;;6522:4;:50::i;4452:201::-;4546:18;;4519:7;;4546:26;-1:-1:-1;4538:73:31;;;;-1:-1:-1;;;4538:73:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4628:3;:11;;4640:5;4628:18;;;;;;;;;;;;;;;;4621:25;;4452:201;;;;:::o;6747:156::-;6820:4;6843:53;6851:3;-1:-1:-1;;;;;6871:23:31;;6843:7;:53::i;7369:140:30:-;7446:4;7469:33;7477:3;7497;7469:7;:33::i;4942:274::-;5045:19;;5009:7;;;;5045:27;-1:-1:-1;5037:74:30;;;;-1:-1:-1;;;5037:74:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5122:22;5147:3;:12;;5160:5;5147:19;;;;;;;;;;;;;;;;;;5122:44;;5184:5;:10;;;5196:5;:12;;;5176:33;;;;;4942:274;;;;;:::o;6403:315::-;6497:7;6535:17;;;:12;;;:17;;;;;;6585:12;6570:13;6562:36;;;;-1:-1:-1;;;6562:36:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;6562:36:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6651:3;:12;;6675:1;6664:8;:12;6651:26;;;;;;;;;;;;;;;;;;:33;;;6644:40;;;6403:315;;;;;:::o;7909:341:37:-;7992:26;8021:21;;;:12;:21;;;;;8052;8076:44;8088:31;8101:10;8113:5;8088:12;:31::i;:::-;8076:11;:44::i;:::-;8130:24;;8052:68;;-1:-1:-1;8130:24:37;;:6;;:24;;;;;:::i;:::-;;8183:13;:11;:13::i;:::-;8164:16;;;:32;8206:18;8227:16;8235:7;8227;:16::i;:::-;-1:-1:-1;;;;;;7909:341:37:o;3805:127:31:-;3878:4;3901:19;;;:12;;;;;:19;;;;;;:24;;;3805:127::o;11677:247:20:-;11772:18;11778:2;11782:7;11772:5;:18::i;:::-;11808:54;11839:1;11843:2;11847:7;11856:5;11808:22;:54::i;:::-;11800:117;;;;-1:-1:-1;;;11800:117:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15524:589;15644:4;15669:15;:2;-1:-1:-1;;;;;15669:13:20;;:15::i;:::-;15664:58;;-1:-1:-1;15707:4:20;15700:11;;15664:58;15731:23;15757:246;-1:-1:-1;;;15868:12:20;:10;:12::i;:::-;15894:4;15912:7;15933:5;15773:175;;;;;;-1:-1:-1;;;;;15773:175:20;-1:-1:-1;;;;;15773:175:20;;;;;;-1:-1:-1;;;;;15773:175:20;-1:-1:-1;;;;;15773:175:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;15773:175:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;15773:175:20;;;;-1:-1:-1;;;;;15773:175:20;;38:4:-1;29:7;25:18;67:10;61:17;-1:-1;;;;;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;15773:175:20;15757:246;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;15757:15:20;;;:246;;:15;:246;:::i;:::-;15731:272;;16013:13;16040:10;16029:32;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;16029:32:20;-1:-1:-1;;;;;;16079:26:20;-1:-1:-1;;;16079:26:20;;-1:-1:-1;;;15524:589:20;;;;;;:::o;3329:185:11:-;3462:45;3489:4;3495:2;3499:7;3462:26;:45::i;2212:1512:31:-;2278:4;2415:19;;;:12;;;:19;;;;;;2449:15;;2445:1273;;2878:18;;-1:-1:-1;;2830:14:31;;;;2878:22;;;;2806:21;;2878:3;;:22;;3160;;;;;;;;;;;;;;3140:42;;3303:9;3274:3;:11;;3286:13;3274:26;;;;;;;;;;;;;;;;;;;:38;;;;3378:23;;;3420:1;3378:12;;;:23;;;;;;3404:17;;;3378:43;;3527:17;;3378:3;;3527:17;;;;;;;;;;;;;;;;;;;;;;3619:3;:12;;:19;3632:5;3619:19;;;;;;;;;;;3612:26;;;3660:4;3653:11;;;;;;;;2445:1273;3702:5;3695:12;;;;;1640:404;1703:4;1724:21;1734:3;1739:5;1724:9;:21::i;:::-;1719:319;;-1:-1:-1;27:10;;39:1;23:18;;;45:23;;1761:11:31;:23;;;;;;;;;;;;;1941:18;;1919:19;;;:12;;;:19;;;;;;:40;;;;1973:11;;1719:319;-1:-1:-1;2022:5:31;2015:12;;1836:678:30;1912:4;2045:17;;;:12;;;:17;;;;;;2077:13;2073:435;;-1:-1:-1;;2161:38:30;;;;;;;;;;;;;;;;;;27:10:-1;;39:1;23:18;;;45:23;;2143:12:30;:57;;;;;;;;;;;;;;;;;;;;;;;;2355:19;;2335:17;;;:12;;;:17;;;;;;;:39;2388:11;;2073:435;2466:5;2430:3;:12;;2454:1;2443:8;:12;2430:26;;;;;;;;;;;;;;;;;;:33;;:41;;;;2492:5;2485:12;;;;;2682:1517;2746:4;2879:17;;;:12;;;:17;;;;;;2911:13;;2907:1286;;3337:19;;-1:-1:-1;;3291:12:30;;;;3337:23;;;;3267:21;;3337:3;;:23;;3629;;;;;;;;;;;;;;;;3600:52;;3774:9;3744:3;:12;;3757:13;3744:27;;;;;;;;;;;;;;;;:39;;:27;;;;;:39;;;;;;;;;;;;;;;3862:14;;3849:28;;:12;;;:28;;;;;3880:17;;;3849:48;;4003:18;;3849:3;;4003:18;;;;;;;;;;;;;;-1:-1:-1;;4003:18:30;;;;;;;;;;;;;;;;;;;;;4096:17;;;:12;;;:17;;;;;;4089:24;;;;4003:18;-1:-1:-1;4128:11:30;;-1:-1:-1;;;;4128:11:30;10451:230:37;10515:13;10545:9;10540:135;10564:2;10560:1;:6;10540:135;;;10606:6;10613:1;10606:9;;;;;;;;;;;;;;;;;;;;;;;;;;;10591:24;;:11;:24;10587:78;;10642:5;10648:1;10642:8;;;;;;;;10635:15;;;;;;;;;;;;;-1:-1:-1;;10635:15:37;;;;;;;;;;;;;;;;;;;;;;;;;;;10642:8;10635:15;;10642:8;10635:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10587:78;10568:3;;10540:135;;;;10451:230;;;:::o;726:413:27:-;1086:20;1124:8;;;726:413::o;3581:193::-;3684:12;3715:52;3737:6;3745:4;3751:1;3754:12;3715:21;:52::i;595:237:22:-;704:45;731:4;737:2;741:7;704:26;:45::i;:::-;769:8;:6;:8::i;:::-;768:9;760:65;;;;-1:-1:-1;;;760:65:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4608:523:27;4735:12;4792:5;4767:21;:30;;4759:81;;;;-1:-1:-1;;;4759:81:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4858:18;4869:6;4858:10;:18::i;:::-;4850:60;;;;;-1:-1:-1;;;4850:60:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;4981:12;4995:23;5022:6;-1:-1:-1;;;;;5022:11:27;5042:5;5050:4;5022:33;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;5022:33:27;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;;4980:75:27;;;;5072:52;5090:7;5099:10;5111:12;5072:17;:52::i;:::-;5065:59;4608:523;-1:-1:-1;;;;;;;4608:523:27:o;7091:725::-;7206:12;7234:7;7230:580;;;-1:-1:-1;7264:10:27;7257:17;;7230:580;7375:17;;:21;7371:429;;7633:10;7627:17;7693:15;7680:10;7676:2;7672:19;7665:44;7582:145;7765:20;;-1:-1:-1;;;7765:20:27;;;;;;;;;;;;;;;;;7772:12;;7765:20;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;622:10061:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;622:10061:37;;;-1:-1:-1;622:10061:37;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "3265800",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "DEFAULT_ADMIN_ROLE()": "309",
            "GROWTH_CYCLE()": "333",
            "MAX_CRYPTORCHIDS()": "331",
            "MINTER_ROLE()": "371",
            "PAUSER_ROLE()": "348",
            "WATERING_WINDOW()": "330",
            "alive(uint256)": "infinite",
            "approve(address,uint256)": "infinite",
            "balanceOf(address)": "infinite",
            "baseURI()": "infinite",
            "burn(uint256)": "infinite",
            "cryptorchids(uint256)": "infinite",
            "currentPrice()": "1360",
            "flowering(uint256)": "infinite",
            "germinate(uint256,uint256)": "infinite",
            "getApproved(uint256)": "infinite",
            "getRoleAdmin(bytes32)": "1205",
            "getRoleMember(bytes32,uint256)": "infinite",
            "getRoleMemberCount(bytes32)": "infinite",
            "getTokenMetadata(uint256)": "infinite",
            "grantRole(bytes32,address)": "infinite",
            "growthStage(uint256)": "infinite",
            "hasRole(bytes32,address)": "infinite",
            "isApprovedForAll(address,address)": "1350",
            "mint(address)": "infinite",
            "name()": "infinite",
            "owner()": "1193",
            "ownerOf(uint256)": "infinite",
            "pause()": "infinite",
            "paused()": "1078",
            "renounceOwnership()": "infinite",
            "renounceRole(bytes32,address)": "infinite",
            "requestToToken(bytes32)": "1218",
            "revokeRole(bytes32,address)": "infinite",
            "safeTransferFrom(address,address,uint256)": "infinite",
            "safeTransferFrom(address,address,uint256,bytes)": "infinite",
            "setApprovalForAll(address,bool)": "infinite",
            "startGrowing()": "infinite",
            "startSale()": "infinite",
            "supportsInterface(bytes4)": "1216",
            "symbol()": "infinite",
            "tokenByIndex(uint256)": "infinite",
            "tokenOfOwnerByIndex(address,uint256)": "infinite",
            "tokenURI(uint256)": "infinite",
            "totalSupply()": "1230",
            "transferFrom(address,address,uint256)": "infinite",
            "transferOwnership(address)": "infinite",
            "unpause()": "infinite",
            "water(uint256)": "infinite",
            "webMint(uint256)": "infinite",
            "withdraw()": "infinite"
          },
          "internal": {
            "_beforeTokenTransfer(address,address,uint256)": "infinite",
            "_requestRandom(uint256,uint256)": "infinite",
            "fulfillRandomness(uint256,uint256)": "infinite",
            "pickSpecies(uint256)": "infinite"
          }
        },
        "methodIdentifiers": {
          "DEFAULT_ADMIN_ROLE()": "a217fddf",
          "GROWTH_CYCLE()": "179f0b0a",
          "MAX_CRYPTORCHIDS()": "6b0c004d",
          "MINTER_ROLE()": "d5391393",
          "PAUSER_ROLE()": "e63ab1e9",
          "WATERING_WINDOW()": "ffee200c",
          "alive(uint256)": "6573c787",
          "approve(address,uint256)": "095ea7b3",
          "balanceOf(address)": "70a08231",
          "baseURI()": "6c0360eb",
          "burn(uint256)": "42966c68",
          "cryptorchids(uint256)": "cac21c8f",
          "currentPrice()": "9d1b464a",
          "flowering(uint256)": "182199cd",
          "germinate(uint256,uint256)": "7fd8d953",
          "getApproved(uint256)": "081812fc",
          "getRoleAdmin(bytes32)": "248a9ca3",
          "getRoleMember(bytes32,uint256)": "9010d07c",
          "getRoleMemberCount(bytes32)": "ca15c873",
          "getTokenMetadata(uint256)": "60316801",
          "grantRole(bytes32,address)": "2f2ff15d",
          "growthStage(uint256)": "b7aaba20",
          "hasRole(bytes32,address)": "91d14854",
          "isApprovedForAll(address,address)": "e985e9c5",
          "mint(address)": "6a627842",
          "name()": "06fdde03",
          "owner()": "8da5cb5b",
          "ownerOf(uint256)": "6352211e",
          "pause()": "8456cb59",
          "paused()": "5c975abb",
          "renounceOwnership()": "715018a6",
          "renounceRole(bytes32,address)": "36568abe",
          "requestToToken(bytes32)": "62ff09d6",
          "revokeRole(bytes32,address)": "d547741f",
          "safeTransferFrom(address,address,uint256)": "42842e0e",
          "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
          "setApprovalForAll(address,bool)": "a22cb465",
          "startGrowing()": "277dec92",
          "startSale()": "b66a0e5d",
          "supportsInterface(bytes4)": "01ffc9a7",
          "symbol()": "95d89b41",
          "tokenByIndex(uint256)": "4f6ccce7",
          "tokenOfOwnerByIndex(address,uint256)": "2f745c59",
          "tokenURI(uint256)": "c87b56dd",
          "totalSupply()": "18160ddd",
          "transferFrom(address,address,uint256)": "23b872dd",
          "transferOwnership(address)": "f2fde38b",
          "unpause()": "3f4ba83a",
          "water(uint256)": "a7eec44b",
          "webMint(uint256)": "9981d4a1",
          "withdraw()": "3ccfd60b"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GROWTH_CYCLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CRYPTORCHIDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WATERING_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"alive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cryptorchids\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"species\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"plantedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waterLevel\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flowering\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userProvidedSeed\",\"type\":\"uint256\"}],\"name\":\"germinate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum CryptOrchidGoerli.Stage\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"growthStage\",\"outputs\":[{\"internalType\":\"enum CryptOrchidGoerli.Stage\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startGrowing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"water\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"webMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"baseURI()\":{\"details\":\"Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}.     * Requirements:     * - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(address)\":{\"details\":\"Creates a new token for `to`. Its token ID will be automatically assigned (and available on the emitted {IERC721-Transfer} event), and the token URI autogenerated based on the base URI passed at construction.     * See {ERC721-_mint}.     * Requirements:     * - the caller must have the `MINTER_ROLE`.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pause()\":{\"details\":\"Pauses all token transfers.     * See {ERC721Pausable} and {Pausable-_pause}.     * Requirements:     * - the caller must have the `PAUSER_ROLE`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpauses all token transfers.     * See {ERC721Pausable} and {Pausable-_unpause}.     * Requirements:     * - the caller must have the `PAUSER_ROLE`.\"},\"withdraw()\":{\"details\":\"Withdraw ether from this contract (Callable by owner only)\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol\":\"CryptOrchidGoerli\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\"},\"@openzeppelin/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x24141d2f6b98d4cb77a8936eae8cbaad2e261d9062bdc08036096f4550092501\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\"},\"@openzeppelin/contracts/presets/ERC721PresetMinterPauserAutoId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../access/AccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Counters.sol\\\";\\nimport \\\"../token/ERC721/ERC721.sol\\\";\\nimport \\\"../token/ERC721/ERC721Burnable.sol\\\";\\nimport \\\"../token/ERC721/ERC721Pausable.sol\\\";\\n\\n/**\\n * @dev {ERC721} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *  - token ID and URI autogeneration\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract ERC721PresetMinterPauserAutoId is Context, AccessControl, ERC721Burnable, ERC721Pausable {\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    Counters.Counter private _tokenIdTracker;\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\\n     * See {ERC721-tokenURI}.\\n     */\\n    constructor(string memory name, string memory symbol, string memory baseURI) public ERC721(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n\\n        _setBaseURI(baseURI);\\n    }\\n\\n    /**\\n     * @dev Creates a new token for `to`. Its token ID will be automatically\\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\\n     * URI autogenerated based on the base URI passed at construction.\\n     *\\n     * See {ERC721-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have minter role to mint\\\");\\n\\n        // We cannot just use balanceOf to create the new tokenId because tokens\\n        // can be burned (destroyed), so we need a separate counter.\\n        _mint(to, _tokenIdTracker.current());\\n        _tokenIdTracker.increment();\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721, ERC721Pausable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x4b87b14833eeb61239208c31ea10bd73fdcd49a693c87f038b9429871f82a412\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/EnumerableSet.sol\\\";\\nimport \\\"../../utils/EnumerableMap.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId); // internal owner\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x118ed7540f56b21ff92e21ebaa73584048e98d2ac04ca67571329bb8dbd9032f\"},\"@openzeppelin/contracts/token/ERC721/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC721.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x060925a04766df64ac29f56aaa3a38aafd71424ba4d996ca0f14363828b97056\"},\"@openzeppelin/contracts/token/ERC721/ERC721Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"../../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1c31a4c2ad1af9e25cd8f4ea941ebd6a6a932426183ab39c160cb8e51cfc704f\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962\"},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6bd1b1218338b6f9fe17776f48623b4ac3d8a40405f74a44bc23c00abe2ca13\"},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xccb917776f826ac6b68bd5a15a5f711e3967848a52ba11e6104d9a4f593314a7\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x52146049d6709c870e8ddcd988b5155cb6c5d640cfcd8978aee52bc1ba2ec4eb\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\",\"keccak256\":\"0x21662e4254ce4ac8570b30cc7ab31435966b3cb778a56ba4d09276881cfb2437\"},\"@openzeppelin/contracts/utils/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x4b087f06b6670a131a5a14e53b1d2a5ef19c034cc5ec42eeebcf9554325744ad\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xa1e12f97981f1d0964b1c048978606a57127c56c438bab61cdfe269cad859a74\"},\"contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// NB: this is only meant to deploy to goerli, where chainlink VRF is unavailable.\\n// goerli connects to polygon mumbai, which is what we need to test PoS bridging.\\n// Deploy scripts prevent other contracts from goerli deploy, and this contract from\\n// anything other than goerlui\\npragma solidity >=0.6.6 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/presets/ERC721PresetMinterPauserAutoId.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"../Libraries/CurrentTime.sol\\\";\\n\\ncontract CryptOrchidGoerli is ERC721PresetMinterPauserAutoId, Ownable, CurrentTime {\\n    using SafeMath for uint256;\\n    using Strings for string;\\n    using Counters for Counters.Counter;\\n\\n    struct CryptOrchid {\\n        string species;\\n        uint256 plantedAt;\\n        uint256 waterLevel;\\n    }\\n    mapping(uint256 => CryptOrchid) public cryptorchids;\\n\\n    enum Stage {Unsold, Seed, Flower, Dead}\\n\\n    bool internal saleStarted = false;\\n    bool internal growingStarted = false;\\n\\n    uint256 public constant MAX_CRYPTORCHIDS = 10000;\\n    uint256 public constant GROWTH_CYCLE = 604800; // 7 days\\n    uint256 public constant WATERING_WINDOW = 10800; // 3 hours\\n    uint256 internal constant MAX_TIMESTAMP = 2**256 - 1;\\n    string internal constant GRANUM_IPFS = \\\"QmWd1mn7DuGyx9ByfNeqCsgdSUsJZ1cragitgaygsqDvEm\\\";\\n\\n    uint16[10] private limits = [0, 3074, 6074, 8074, 9074, 9574, 9824, 9924, 9974, 9999];\\n    string[10] private genum = [\\n        \\\"shenzhenica orchidaceae\\\",\\n        \\\"phalaenopsis micholitzii\\\",\\n        \\\"guarianthe aurantiaca\\\",\\n        \\\"vanda coerulea\\\",\\n        \\\"cypripedium calceolus\\\",\\n        \\\"paphiopedilum vietnamense\\\",\\n        \\\"miltonia kayasimae\\\",\\n        \\\"platanthera azorica\\\",\\n        \\\"dendrophylax lindenii\\\",\\n        \\\"paphiopedilum rothschildianum\\\"\\n    ];\\n\\n    string[10] private speciesIPFSConstant = [\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/shenzhenica-orchidaceae.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/phalaenopsis-micholitzii.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/guarianthe-aurantiaca.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/vanda-coerulea.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/cypripedium-calceolus.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/paphiopedilum-vietnamense.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/miltonia-kayasimae.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/platanthera-azorica.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/dendrophylax-lindenii.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/paphiopedilum-rothschildianum.json\\\"\\n    ];\\n\\n    string[10] private deadSpeciesIPFSConstant = [\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/shenzhenica-orchidaceae.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/phalaenopsis-micholitzii.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/guarianthe-aurantiaca.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/vanda-coerulea.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/cypripedium-calceolus.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/paphiopedilum-vietnamense.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/miltonia-kayasimae.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/platanthera-azorica.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/dendrophylax-lindenii.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/paphiopedilum-rothschildianum.json\\\"\\n    ];\\n\\n    Counters.Counter private _tokenIds;\\n\\n    mapping(bytes32 => uint256) public requestToToken;\\n    mapping(bytes32 => string) private speciesIPFS;\\n    mapping(bytes32 => string) private deadSpeciesIPFS;\\n\\n    constructor() public payable ERC721PresetMinterPauserAutoId(\\\"CryptOrchids\\\", \\\"ORCHD\\\", \\\"ipfs://\\\") {\\n        for (uint256 index = 0; index < genum.length; index++) {\\n            speciesIPFS[keccak256(abi.encode(genum[index]))] = speciesIPFSConstant[index];\\n            deadSpeciesIPFS[keccak256(abi.encode(genum[index]))] = deadSpeciesIPFSConstant[index];\\n        }\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        (string memory species, , , ) = getTokenMetadata(tokenId);\\n\\n        if (growthStage(tokenId) == Stage.Seed) {\\n            return string(abi.encodePacked(baseURI(), GRANUM_IPFS));\\n        }\\n\\n        if (growthStage(tokenId) == Stage.Flower) {\\n            return string(abi.encodePacked(baseURI(), speciesIPFS[keccak256(abi.encode(species))]));\\n        }\\n\\n        return string(abi.encodePacked(baseURI(), deadSpeciesIPFS[keccak256(abi.encode(species))]));\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        require(address(0) == to || alive(tokenId), \\\"Dead CryptOrchids cannot be transferred\\\");\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function currentPrice() public view returns (uint256 price) {\\n        uint256 currentSupply = totalSupply();\\n        if (currentSupply >= 9900) {\\n            return 1000000000000000000; // 9900+: 1.00 ETH\\n        } else if (currentSupply >= 9500) {\\n            return 640000000000000000; // 9500-9500:  0.64 ETH\\n        } else if (currentSupply >= 7500) {\\n            return 320000000000000000; // 7500-9500:  0.32 ETH\\n        } else if (currentSupply >= 3500) {\\n            return 160000000000000000; // 3500-7500:  0.16 ETH\\n        } else if (currentSupply >= 1500) {\\n            return 80000000000000000; // 1500-3500:  0.08 ETH\\n        } else if (currentSupply >= 500) {\\n            return 60000000000000000; // 500-1500:   0.06 ETH\\n        } else {\\n            return 40000000000000000; // 0 - 500     0.04 ETH\\n        }\\n    }\\n\\n    function startSale() public onlyOwner {\\n        saleStarted = true;\\n    }\\n\\n    function startGrowing() public onlyOwner {\\n        growingStarted = true;\\n    }\\n\\n    /**\\n     * @dev Withdraw ether from this contract (Callable by owner only)\\n     */\\n    function withdraw() public onlyOwner {\\n        uint256 balance = address(this).balance;\\n        msg.sender.transfer(balance);\\n    }\\n\\n    receive() external payable {}\\n\\n    function webMint(uint256 units) public payable {\\n        require(saleStarted, \\\"The Nursery is closed\\\");\\n        require(units <= MAX_CRYPTORCHIDS - totalSupply(), \\\"Not enough bulbs left\\\");\\n        require(totalSupply() < MAX_CRYPTORCHIDS, \\\"Sale has already ended\\\");\\n        require(units > 0 && units <= 20, \\\"You can plant minimum 1, maximum 20 CryptOrchids\\\");\\n        require(SafeMath.add(totalSupply(), units) <= MAX_CRYPTORCHIDS, \\\"Exceeds MAX_CRYPTORCHIDS\\\");\\n        require(msg.value >= SafeMath.mul(currentPrice(), units), \\\"Ether value sent is below the price\\\");\\n\\n        for (uint256 i = 0; i < units; i++) {\\n            _tokenIds.increment();\\n            uint256 newItemId = _tokenIds.current();\\n            cryptorchids[newItemId] = CryptOrchid({species: \\\"granum\\\", plantedAt: MAX_TIMESTAMP, waterLevel: 0});\\n            _safeMint(msg.sender, newItemId);\\n        }\\n    }\\n\\n    function germinate(uint256 tokenId, uint256 userProvidedSeed) public {\\n        require(growingStarted, \\\"Germination starts 2021-04-12T16:00:00Z\\\");\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Only the Owner can germinate a CryptOrchid.\\\");\\n        _requestRandom(tokenId, userProvidedSeed);\\n    }\\n\\n    function _requestRandom(uint256 tokenId, uint256 userProvidedSeed) internal returns (bytes32 requestId) {\\n        uint256 pseudoRand = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, userProvidedSeed)));\\n        fulfillRandomness(tokenId, pseudoRand);\\n    }\\n\\n    function fulfillRandomness(uint256 tokenId, uint256 randomness) internal {\\n        CryptOrchid storage orchid = cryptorchids[tokenId];\\n        string memory species = pickSpecies(SafeMath.mod(randomness, 10000));\\n        orchid.species = species;\\n        orchid.plantedAt = currentTime();\\n        address tokenOwner = ownerOf(tokenId);\\n    }\\n\\n    function alive(uint256 tokenId) public view returns (bool) {\\n        return growthStage(tokenId) != Stage.Dead;\\n    }\\n\\n    function flowering(uint256 tokenId) public view returns (bool) {\\n        return growthStage(tokenId) == Stage.Flower;\\n    }\\n\\n    function growthStage(uint256 tokenId) public view returns (Stage) {\\n        CryptOrchid memory orchid = cryptorchids[tokenId];\\n        if (orchid.plantedAt == 0) return Stage.Unsold;\\n        if (orchid.plantedAt == MAX_TIMESTAMP) return Stage.Seed;\\n        uint256 currentWaterLevel = orchid.waterLevel;\\n        uint256 elapsed = currentTime() - orchid.plantedAt;\\n        uint256 fullCycles = SafeMath.div(uint256(elapsed), GROWTH_CYCLE);\\n        uint256 modulo = SafeMath.mod(elapsed, GROWTH_CYCLE);\\n\\n        if (currentWaterLevel == fullCycles) {\\n            return Stage.Flower;\\n        }\\n\\n        if (SafeMath.add(currentWaterLevel, 1) == fullCycles && modulo < WATERING_WINDOW) {\\n            return Stage.Flower;\\n        }\\n\\n        return Stage.Dead;\\n    }\\n\\n    function water(uint256 tokenId) public {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Only the Owner can water a CryptOrchid.\\\");\\n\\n        if (!alive(tokenId)) {\\n            return;\\n        }\\n\\n        CryptOrchid storage orchid = cryptorchids[tokenId];\\n\\n        uint256 wateringLevel = orchid.waterLevel;\\n        uint256 elapsed = currentTime() - orchid.plantedAt;\\n        uint256 fullCycles = SafeMath.div(uint256(elapsed), GROWTH_CYCLE);\\n\\n        if (wateringLevel > fullCycles) {\\n            return;\\n        }\\n\\n        uint256 newWaterLevel = SafeMath.add(wateringLevel, 1);\\n        orchid.waterLevel = newWaterLevel;\\n    }\\n\\n    function getTokenMetadata(uint256 tokenId)\\n        public\\n        view\\n        returns (\\n            string memory,\\n            uint256,\\n            uint256,\\n            Stage\\n        )\\n    {\\n        return (\\n            cryptorchids[tokenId].species,\\n            cryptorchids[tokenId].plantedAt,\\n            cryptorchids[tokenId].waterLevel,\\n            growthStage(tokenId)\\n        );\\n    }\\n\\n    /**\\n     * @notice Pick species for random number index\\n     * @param randomIndex uint256\\n     * @return species string\\n     */\\n    function pickSpecies(uint256 randomIndex) private view returns (string memory) {\\n        for (uint256 i = 0; i < 10; i++) {\\n            if (randomIndex <= limits[i]) {\\n                return genum[i];\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b1f3e914311c7a69ad3795e877e316b1740b2f4da01bf1bb3a1100f83af446\"},\"contracts/Libraries/CurrentTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.6 <0.9.0;\\n\\ncontract CurrentTime {\\n    function currentTime() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xa9a311d0f67d3d7aabd318210bed7051401151fa5f45e75071d7a52c50214cee\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 549,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "_roles",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)545_storage)"
          },
          {
            "astId": 932,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "_supportedInterfaces",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes4,t_bool)"
          },
          {
            "astId": 3555,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "_holderTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_struct(UintSet)6038_storage)"
          },
          {
            "astId": 3557,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "_tokenOwners",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(UintToAddressMap)5415_storage"
          },
          {
            "astId": 3561,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 3567,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 3569,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "_name",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 3571,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "_symbol",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 3575,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "_tokenURIs",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 3577,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "_baseURI",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 6151,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "_paused",
            "offset": 0,
            "slot": "11",
            "type": "t_bool"
          },
          {
            "astId": 1374,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "12",
            "type": "t_struct(Counter)5041_storage"
          },
          {
            "astId": 817,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "_owner",
            "offset": 0,
            "slot": "13",
            "type": "t_address"
          },
          {
            "astId": 8299,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "cryptorchids",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_struct(CryptOrchid)8295_storage)"
          },
          {
            "astId": 8307,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "saleStarted",
            "offset": 0,
            "slot": "15",
            "type": "t_bool"
          },
          {
            "astId": 8310,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "growingStarted",
            "offset": 1,
            "slot": "15",
            "type": "t_bool"
          },
          {
            "astId": 8344,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "limits",
            "offset": 0,
            "slot": "16",
            "type": "t_array(t_uint16)10_storage"
          },
          {
            "astId": 8359,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "genum",
            "offset": 0,
            "slot": "17",
            "type": "t_array(t_string_storage)10_storage"
          },
          {
            "astId": 8374,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "speciesIPFSConstant",
            "offset": 0,
            "slot": "27",
            "type": "t_array(t_string_storage)10_storage"
          },
          {
            "astId": 8389,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "deadSpeciesIPFSConstant",
            "offset": 0,
            "slot": "37",
            "type": "t_array(t_string_storage)10_storage"
          },
          {
            "astId": 8391,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "_tokenIds",
            "offset": 0,
            "slot": "47",
            "type": "t_struct(Counter)5041_storage"
          },
          {
            "astId": 8395,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "requestToToken",
            "offset": 0,
            "slot": "48",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 8399,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "speciesIPFS",
            "offset": 0,
            "slot": "49",
            "type": "t_mapping(t_bytes32,t_string_storage)"
          },
          {
            "astId": 8403,
            "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
            "label": "deadSpeciesIPFS",
            "offset": 0,
            "slot": "50",
            "type": "t_mapping(t_bytes32,t_string_storage)"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "base": "t_bytes32",
            "encoding": "dynamic_array",
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)10_storage": {
            "base": "t_string_storage",
            "encoding": "inplace",
            "label": "string[10]",
            "numberOfBytes": "320"
          },
          "t_array(t_struct(MapEntry)5089_storage)dyn_storage": {
            "base": "t_struct(MapEntry)5089_storage",
            "encoding": "dynamic_array",
            "label": "struct EnumerableMap.MapEntry[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint16)10_storage": {
            "base": "t_uint16",
            "encoding": "inplace",
            "label": "uint16[10]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "encoding": "inplace",
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_bytes4": {
            "encoding": "inplace",
            "label": "bytes4",
            "numberOfBytes": "4"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_bool)"
          },
          "t_mapping(t_address,t_struct(UintSet)6038_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => struct EnumerableSet.UintSet)",
            "numberOfBytes": "32",
            "value": "t_struct(UintSet)6038_storage"
          },
          "t_mapping(t_bytes32,t_string_storage)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => string)",
            "numberOfBytes": "32",
            "value": "t_string_storage"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)545_storage)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => struct AccessControl.RoleData)",
            "numberOfBytes": "32",
            "value": "t_struct(RoleData)545_storage"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "encoding": "mapping",
            "key": "t_bytes4",
            "label": "mapping(bytes4 => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_uint256,t_address)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32",
            "value": "t_address"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32",
            "value": "t_string_storage"
          },
          "t_mapping(t_uint256,t_struct(CryptOrchid)8295_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct CryptOrchidGoerli.CryptOrchid)",
            "numberOfBytes": "32",
            "value": "t_struct(CryptOrchid)8295_storage"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)5917_storage": {
            "encoding": "inplace",
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "astId": 5916,
                "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
                "label": "_inner",
                "offset": 0,
                "slot": "0",
                "type": "t_struct(Set)5652_storage"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)5041_storage": {
            "encoding": "inplace",
            "label": "struct Counters.Counter",
            "members": [
              {
                "astId": 5040,
                "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
                "label": "_value",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(CryptOrchid)8295_storage": {
            "encoding": "inplace",
            "label": "struct CryptOrchidGoerli.CryptOrchid",
            "members": [
              {
                "astId": 8290,
                "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
                "label": "species",
                "offset": 0,
                "slot": "0",
                "type": "t_string_storage"
              },
              {
                "astId": 8292,
                "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
                "label": "plantedAt",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 8294,
                "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
                "label": "waterLevel",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Map)5097_storage": {
            "encoding": "inplace",
            "label": "struct EnumerableMap.Map",
            "members": [
              {
                "astId": 5092,
                "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
                "label": "_entries",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_struct(MapEntry)5089_storage)dyn_storage"
              },
              {
                "astId": 5096,
                "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
                "label": "_indexes",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(MapEntry)5089_storage": {
            "encoding": "inplace",
            "label": "struct EnumerableMap.MapEntry",
            "members": [
              {
                "astId": 5086,
                "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
                "label": "_key",
                "offset": 0,
                "slot": "0",
                "type": "t_bytes32"
              },
              {
                "astId": 5088,
                "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
                "label": "_value",
                "offset": 0,
                "slot": "1",
                "type": "t_bytes32"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)545_storage": {
            "encoding": "inplace",
            "label": "struct AccessControl.RoleData",
            "members": [
              {
                "astId": 542,
                "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
                "label": "members",
                "offset": 0,
                "slot": "0",
                "type": "t_struct(AddressSet)5917_storage"
              },
              {
                "astId": 544,
                "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
                "label": "adminRole",
                "offset": 0,
                "slot": "2",
                "type": "t_bytes32"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Set)5652_storage": {
            "encoding": "inplace",
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "astId": 5647,
                "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
                "label": "_values",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "astId": 5651,
                "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
                "label": "_indexes",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(UintSet)6038_storage": {
            "encoding": "inplace",
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "astId": 6037,
                "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
                "label": "_inner",
                "offset": 0,
                "slot": "0",
                "type": "t_struct(Set)5652_storage"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(UintToAddressMap)5415_storage": {
            "encoding": "inplace",
            "label": "struct EnumerableMap.UintToAddressMap",
            "members": [
              {
                "astId": 5414,
                "contract": "contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol:CryptOrchidGoerli",
                "label": "_inner",
                "offset": 0,
                "slot": "0",
                "type": "t_struct(Map)5097_storage"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint16": {
            "encoding": "inplace",
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "methods": {}
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/Coupon/Coupon.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.6 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol\\\";\\nimport \\\"../Interfaces/ERC721.sol\\\";\\nimport \\\"../Libraries/CurrentTime.sol\\\";\\n\\ncontract Coupon is Ownable, VRFConsumerBase, CurrentTime {\\n    using SafeMath for uint256;\\n    mapping(uint256 => bool) internal redemptions;\\n    mapping(address => uint256) public addressEntriesCount;\\n\\n    uint256 public constant PROMOTION_END = 1622520000;\\n    uint256 internal constant REBATE_AMOUNT = 20000000000000000;\\n    uint256 internal constant MINT_FLOOR = 40000000000000000;\\n\\n    uint256 public promotionStart;\\n    address public cryptorchidsERC721;\\n\\n    uint256 public drawingEntriesCount;\\n    uint256 public pot;\\n    address[] internal drawingEntries;\\n    bytes32 internal randomWinnerRequestId;\\n    bool public winnerRequested;\\n    address public winner;\\n\\n    bytes32 internal keyHash;\\n    uint256 internal vrfFee;\\n    address public VRFCoordinator;\\n    address public LinkToken;\\n\\n    constructor(\\n        address cryptorchidsAddress,\\n        address _VRFCoordinator,\\n        address _LinkToken,\\n        bytes32 _keyhash\\n    ) public payable VRFConsumerBase(_VRFCoordinator, _LinkToken) {\\n        VRFCoordinator = _VRFCoordinator;\\n        LinkToken = _LinkToken;\\n        keyHash = _keyhash;\\n        vrfFee = 2000000000000000000; // 2 LINK\\n        cryptorchidsERC721 = cryptorchidsAddress;\\n        promotionStart = block.timestamp;\\n    }\\n\\n    /** Public function for whether the promotion is open. The promotion is only\\n     * open if the contract balance is greater than the currentRebate. Displayed\\n     * on CryptOrchids nursery for transparency.\\n     * @dev\\n     * @return bool Whether promotion is open for entries.\\n     */\\n    function promotionOpen() public view returns (bool) {\\n        if (currentTime() > PROMOTION_END) return false;\\n        if (pot > address(this).balance + currentRebate()) return false;\\n        if (currentRebate() > address(this).balance) return false;\\n\\n        return true;\\n    }\\n\\n    /** Check rebate value and eligible tokens. Tokens are valid if they are planted\\n     * after this contract is deployed, alive, and not yet redeemed.\\n     * @dev calls public functions on the CryptOrchids contract to build\\n     * an array of eligible token IDs and a rebate amount.\\n     * @return eligibleTokens uint256[] Uncompacted array of 0s and eligible token IDs\\n     * @return rebateAmount uint256 Eligible tokens * currentRebate\\n     */\\n    function checkEligibility()\\n        public\\n        view\\n        returns (\\n            uint256[] memory eligibleTokens,\\n            uint256 rebateAmount,\\n            uint256 count\\n        )\\n    {\\n        require(promotionOpen(), \\\"Promotion over\\\");\\n\\n        uint256 _rebateAmount = 0;\\n        uint256 tokenCount = ERC721(cryptorchidsERC721).balanceOf(msg.sender);\\n        uint256[] memory _eligibleTokens = new uint256[](tokenCount);\\n\\n        for (uint256 index = 0; index < tokenCount; index++) {\\n            uint256 tokenId = ERC721(cryptorchidsERC721).tokenOfOwnerByIndex(msg.sender, index);\\n            bool flowering = ERC721(cryptorchidsERC721).flowering(tokenId);\\n            (, uint256 plantedAt, , ) = ERC721(cryptorchidsERC721).getTokenMetadata(tokenId);\\n\\n            if (redemptions[tokenId] != true && flowering && plantedAt > promotionStart) {\\n                _eligibleTokens[index] = tokenId;\\n                _rebateAmount += tokenRebate(tokenId);\\n                count += 1;\\n            }\\n        }\\n\\n        if (_rebateAmount > safeBalance()) {\\n            uint256[] memory empty = new uint256[](0);\\n            return (empty, _rebateAmount, uint256(0));\\n        }\\n        return (_eligibleTokens, _rebateAmount, count);\\n    }\\n\\n    /** Claim ETH for valid tokens. Check for valid tokens before claming.\\n     * @dev calls checkEligibility and sets all eligibleTokens as redeemed.\\n     * Then transfers caller rebateAmount.\\n     */\\n    function redeem() public virtual returns (uint256) {\\n        require(currentTime() < PROMOTION_END, \\\"Promotion over\\\");\\n        (uint256[] memory redeeming, uint256 rebateAmount, ) = checkEligibility();\\n        require(safeBalance() >= rebateAmount, \\\"COC:rdm:paused\\\");\\n\\n        for (uint256 index = 0; index < redeeming.length - 1; index++) {\\n            uint256 tokenId = redeeming[index];\\n            if (tokenId > 0) redemptions[tokenId] = true;\\n        }\\n\\n        payable(msg.sender).transfer(rebateAmount);\\n\\n        return rebateAmount;\\n    }\\n\\n    /** Redeem tokens for entries in drawing.\\n     * @dev Adds address to drawingEntries, increments entriesCount, and\\n     * increases pot for each eligible token, while marking each token redeemed.\\n     */\\n    function enter() public virtual {\\n        require(currentTime() < PROMOTION_END, \\\"Promotion over\\\");\\n        (uint256[] memory redeeming, uint256 rebateAmount, uint256 count) = checkEligibility();\\n\\n        require(safeBalance() >= rebateAmount, \\\"COC:enr:paused\\\");\\n\\n        for (uint256 index = 0; index < redeeming.length; index++) {\\n            uint256 tokenId = redeeming[index];\\n            if (tokenId > 0) {\\n                redemptions[tokenId] = true;\\n                drawingEntriesCount += 1;\\n                addressEntriesCount[msg.sender] += 1;\\n                drawingEntries.push(address(msg.sender));\\n                pot += tokenRebate(tokenId);\\n            }\\n        }\\n    }\\n\\n    /** Current rebate amount for new, mintable token. Based on CryptOrchids current price,\\n     * the ramping rebate is intended to address the regrettable FOMO ramp pricing.\\n     * Starts at 0.02ETH, and increases with inverse correlation to price ramp to\\n     * offer effectively straight 0.04 ETH for seeds.\\n     * @dev calls CryptOrchids.currentPrice and finds difference with MINT_FLOOR to return rebate.\\n     */\\n    function currentRebate() public view returns (uint256) {\\n        uint256 currentPrice = ERC721(cryptorchidsERC721).currentPrice();\\n\\n        if (currentPrice == MINT_FLOOR) return REBATE_AMOUNT;\\n\\n        return currentPrice - MINT_FLOOR;\\n    }\\n\\n    /** Redeemable rebate amount for existing token. Based on the price the token was sold at,\\n     * this prevents a seed holder from redeeming a seed for more than it was purchased for.\\n     * @dev Copies currentPrice and returns rebate amount for tokenId\\n     */\\n    function tokenRebate(uint256 tokenId) public view returns (uint256) {\\n        if (tokenId > 9900) {\\n            return 1000000000000000000 - MINT_FLOOR; // 9900+: 0.960 ETH\\n        } else if (tokenId > 9500) {\\n            return 640000000000000000 - MINT_FLOOR; // 9500-9500:  0.60 ETH\\n        } else if (tokenId > 7500) {\\n            return 320000000000000000 - MINT_FLOOR; // 7500-9500:  0.28 ETH\\n        } else if (tokenId > 3500) {\\n            return 160000000000000000 - MINT_FLOOR; // 3500-7500:  0.12 ETH\\n        } else if (tokenId > 1500) {\\n            return 80000000000000000 - MINT_FLOOR; // 1500-3500:  0.04 ETH\\n        } else if (tokenId > 500) {\\n            return 60000000000000000 - MINT_FLOOR; // 500-1500:   0.02 ETH\\n        } else {\\n            return REBATE_AMOUNT; // 0 - 500     0.02 ETH\\n        }\\n    }\\n\\n    /** Current count of rebates available as determined by safeBalance and currentRebate\\n     */\\n    function rebatesAvailable() public view returns (uint256) {\\n        return SafeMath.div(safeBalance(), currentRebate());\\n    }\\n\\n    /** Current rebate amount for eligible token. Based on CryptOrchids current price,\\n     * the ramping rebate is intended to address the regrettable FOMO ramp pricing.\\n     * Starts at 0.02ETH,\\n     * @dev calls CryptOrchids.currentPrice and finds difference to .\\n     * Then transfers caller rebateAmount.\\n     */\\n    function safeBalance() internal view returns (uint256) {\\n        return address(this).balance - pot;\\n    }\\n\\n    function selectWinner(uint256 userProvidedSeed) public virtual {\\n        require(currentTime() > PROMOTION_END, \\\"COC:wW:promotion running\\\");\\n        require(randomWinnerRequestId[0] == 0, \\\"COC:wW:winner requested\\\");\\n        require(LINK.balanceOf(address(this)) >= vrfFee, \\\"COC:sW:no LINK\\\");\\n\\n        randomWinnerRequestId = requestRandomness(keyHash, vrfFee, userProvidedSeed);\\n    }\\n\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        require(requestId == randomWinnerRequestId, \\\"COC:fR:invalid request ID\\\");\\n        uint256 winnerIndex = SafeMath.mod(randomness, drawingEntriesCount);\\n        winner = drawingEntries[winnerIndex];\\n    }\\n\\n    /** Winner may withdraw ether from the contract once the promotion is over.\\n     *\\n     */\\n    function withdrawWinner() public {\\n        require(currentTime() > PROMOTION_END, \\\"COC:wW:promotion running\\\");\\n        require(msg.sender == winner, \\\"COC:wW:not winner\\\");\\n        uint256 txAmount = pot;\\n        pot = 0;\\n        payable(msg.sender).transfer(txAmount);\\n    }\\n\\n    /** Withdraw ether from this contract once the promotion is over.\\n     * @dev Transfer remaining balance to owner if after PROMOTION_END.\\n     *\\n     */\\n    function withdrawUnclaimed() public onlyOwner {\\n        require(currentTime() > PROMOTION_END, \\\"COC:wU:promotion running\\\");\\n        require(pot == 0, \\\"COC:wU:winnings unclaimed\\\");\\n\\n        uint256 balance = address(this).balance;\\n        payable(msg.sender).transfer(balance);\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./vendor/SafeMathChainlink.sol\\\";\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  using SafeMathChainlink for uint256;\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness)\\n    internal virtual;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   * @param _seed seed mixed into the input of the VRF.\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee, uint256 _seed)\\n    internal returns (bytes32 requestId)\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash].add(1);\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) public {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\"\n    },\n    \"contracts/Interfaces/ERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6 <0.9.0;\\n\\ninterface ERC721 {\\n    enum Stage {Unsold, Seed, Flower, Dead}\\n\\n    struct CryptOrchid {\\n        string species;\\n        uint256 plantedAt;\\n        uint256 waterLevel;\\n    }\\n\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\n    ///  may be created and assigned without emitting Transfer. At the time of\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when the approved address for an NFT is changed or\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\n    ///  When a Transfer event emits, this also indicates that the approved\\n    ///  address for that NFT (if any) is reset to none.\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\n    ///  The operator can manage all NFTs of the owner.\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n    /// @notice Count all NFTs assigned to an owner\\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\\n    ///  function throws for queries about the zero address.\\n    /// @param _owner An address for whom to query the balance\\n    /// @return The number of NFTs owned by `_owner`, possibly zero\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Find the owner of an NFT\\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\\n    ///  about them do throw.\\n    /// @param _tokenId The identifier for an NFT\\n    /// @return The address of the owner of the NFT\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n    ///  `onERC721Received` on `_to` and throws if the return value is not\\n    ///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev This works identically to the other function with an extra data parameter,\\n    ///  except this function just sets data to \\\"\\\".\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external payable;\\n\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n    ///  THEY MAY BE PERMANENTLY LOST\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external payable;\\n\\n    /// @notice Change or reaffirm the approved address for an NFT\\n    /// @dev The zero address indicates there is no approved address.\\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\n    ///  operator of the current owner.\\n    /// @param _approved The new approved NFT controller\\n    /// @param _tokenId The NFT to approve\\n    function approve(address _approved, uint256 _tokenId) external payable;\\n\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\n    ///  all of `msg.sender`'s assets\\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\\n    ///  multiple operators per owner.\\n    /// @param _operator Address to add to the set of authorized operators\\n    /// @param _approved True if the operator is approved, false to revoke approval\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /// @notice Get the approved address for a single NFT\\n    /// @dev Throws if `_tokenId` is not a valid NFT.\\n    /// @param _tokenId The NFT to find the approved address for\\n    /// @return The approved address for this NFT, or the zero address if there is none\\n    function getApproved(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Query if an address is an authorized operator for another address\\n    /// @param _owner The address that owns the NFTs\\n    /// @param _operator The address that acts on behalf of the owner\\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n\\n    function flowering(uint256 tokenId) external view returns (bool);\\n\\n    function currentPrice() external view returns (uint256 price);\\n\\n    function getTokenMetadata(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            string memory,\\n            uint256,\\n            uint256,\\n            Stage\\n        );\\n}\\n\"\n    },\n    \"contracts/Libraries/CurrentTime.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.6 <0.9.0;\\n\\ncontract CurrentTime {\\n    function currentTime() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathChainlink {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/VRFRequestIDBase.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\\n    address _requester, uint256 _nonce)\\n    internal pure returns (uint256)\\n  {\\n    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\"\n    },\n    \"contracts/test/CouponMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.6 <0.9.0;\\n\\nimport \\\"../Coupon/Coupon.sol\\\";\\n\\n// DEBUG\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract CouponMock is Coupon {\\n    event Redemption(address account, uint256 rebate);\\n    event RequestedRandomness(bytes32 requestId);\\n\\n    uint256 internal secondsToAdd = 0;\\n\\n    constructor(\\n        address cryptorchidsAddress,\\n        address _VRFCoordinator,\\n        address _LinkToken,\\n        bytes32 _keyhash\\n    ) public payable Coupon(cryptorchidsAddress, _VRFCoordinator, _LinkToken, _keyhash) {}\\n\\n    /**\\n     * @dev calls checkEligibility and sets all eligibleTokens as redeemed.\\n     * Then transfers caller rebateAmount.\\n     */\\n    function redeem() public virtual override returns (uint256) {\\n        uint256 rebateAmount = super.redeem();\\n        emit Redemption(msg.sender, rebateAmount);\\n        return rebateAmount;\\n    }\\n\\n    function selectWinner(uint256 userProvidedSeed) public override {\\n        super.selectWinner(userProvidedSeed);\\n        emit RequestedRandomness(randomWinnerRequestId);\\n    }\\n\\n    function timeTravel(uint256 s) public {\\n        secondsToAdd = s;\\n    }\\n\\n    function currentTime() internal view virtual override returns (uint256) {\\n        return block.timestamp + secondsToAdd;\\n    }\\n}\\n\"\n    },\n    \"hardhat/console.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\"\n    },\n    \"contracts/test/CurrentTimeMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.6 <0.9.0;\\n\\nimport \\\"../Libraries/CurrentTime.sol\\\";\\n\\ncontract CurrentTimeMock is CurrentTime {\\n    uint256 internal secondsToAdd = 0;\\n}\\n\"\n    },\n    \"contracts/CryptOrchidGoerli/CryptOrchidGoerli.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// NB: this is only meant to deploy to goerli, where chainlink VRF is unavailable.\\n// goerli connects to polygon mumbai, which is what we need to test PoS bridging.\\n// Deploy scripts prevent other contracts from goerli deploy, and this contract from\\n// anything other than goerlui\\npragma solidity >=0.6.6 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/presets/ERC721PresetMinterPauserAutoId.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"../Libraries/CurrentTime.sol\\\";\\n\\ncontract CryptOrchidGoerli is ERC721PresetMinterPauserAutoId, Ownable, CurrentTime {\\n    using SafeMath for uint256;\\n    using Strings for string;\\n    using Counters for Counters.Counter;\\n\\n    struct CryptOrchid {\\n        string species;\\n        uint256 plantedAt;\\n        uint256 waterLevel;\\n    }\\n    mapping(uint256 => CryptOrchid) public cryptorchids;\\n\\n    enum Stage {Unsold, Seed, Flower, Dead}\\n\\n    bool internal saleStarted = false;\\n    bool internal growingStarted = false;\\n\\n    uint256 public constant MAX_CRYPTORCHIDS = 10000;\\n    uint256 public constant GROWTH_CYCLE = 604800; // 7 days\\n    uint256 public constant WATERING_WINDOW = 10800; // 3 hours\\n    uint256 internal constant MAX_TIMESTAMP = 2**256 - 1;\\n    string internal constant GRANUM_IPFS = \\\"QmWd1mn7DuGyx9ByfNeqCsgdSUsJZ1cragitgaygsqDvEm\\\";\\n\\n    uint16[10] private limits = [0, 3074, 6074, 8074, 9074, 9574, 9824, 9924, 9974, 9999];\\n    string[10] private genum = [\\n        \\\"shenzhenica orchidaceae\\\",\\n        \\\"phalaenopsis micholitzii\\\",\\n        \\\"guarianthe aurantiaca\\\",\\n        \\\"vanda coerulea\\\",\\n        \\\"cypripedium calceolus\\\",\\n        \\\"paphiopedilum vietnamense\\\",\\n        \\\"miltonia kayasimae\\\",\\n        \\\"platanthera azorica\\\",\\n        \\\"dendrophylax lindenii\\\",\\n        \\\"paphiopedilum rothschildianum\\\"\\n    ];\\n\\n    string[10] private speciesIPFSConstant = [\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/shenzhenica-orchidaceae.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/phalaenopsis-micholitzii.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/guarianthe-aurantiaca.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/vanda-coerulea.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/cypripedium-calceolus.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/paphiopedilum-vietnamense.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/miltonia-kayasimae.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/platanthera-azorica.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/dendrophylax-lindenii.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/paphiopedilum-rothschildianum.json\\\"\\n    ];\\n\\n    string[10] private deadSpeciesIPFSConstant = [\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/shenzhenica-orchidaceae.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/phalaenopsis-micholitzii.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/guarianthe-aurantiaca.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/vanda-coerulea.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/cypripedium-calceolus.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/paphiopedilum-vietnamense.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/miltonia-kayasimae.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/platanthera-azorica.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/dendrophylax-lindenii.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/paphiopedilum-rothschildianum.json\\\"\\n    ];\\n\\n    Counters.Counter private _tokenIds;\\n\\n    mapping(bytes32 => uint256) public requestToToken;\\n    mapping(bytes32 => string) private speciesIPFS;\\n    mapping(bytes32 => string) private deadSpeciesIPFS;\\n\\n    constructor() public payable ERC721PresetMinterPauserAutoId(\\\"CryptOrchids\\\", \\\"ORCHD\\\", \\\"ipfs://\\\") {\\n        for (uint256 index = 0; index < genum.length; index++) {\\n            speciesIPFS[keccak256(abi.encode(genum[index]))] = speciesIPFSConstant[index];\\n            deadSpeciesIPFS[keccak256(abi.encode(genum[index]))] = deadSpeciesIPFSConstant[index];\\n        }\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        (string memory species, , , ) = getTokenMetadata(tokenId);\\n\\n        if (growthStage(tokenId) == Stage.Seed) {\\n            return string(abi.encodePacked(baseURI(), GRANUM_IPFS));\\n        }\\n\\n        if (growthStage(tokenId) == Stage.Flower) {\\n            return string(abi.encodePacked(baseURI(), speciesIPFS[keccak256(abi.encode(species))]));\\n        }\\n\\n        return string(abi.encodePacked(baseURI(), deadSpeciesIPFS[keccak256(abi.encode(species))]));\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        require(address(0) == to || alive(tokenId), \\\"Dead CryptOrchids cannot be transferred\\\");\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function currentPrice() public view returns (uint256 price) {\\n        uint256 currentSupply = totalSupply();\\n        if (currentSupply >= 9900) {\\n            return 1000000000000000000; // 9900+: 1.00 ETH\\n        } else if (currentSupply >= 9500) {\\n            return 640000000000000000; // 9500-9500:  0.64 ETH\\n        } else if (currentSupply >= 7500) {\\n            return 320000000000000000; // 7500-9500:  0.32 ETH\\n        } else if (currentSupply >= 3500) {\\n            return 160000000000000000; // 3500-7500:  0.16 ETH\\n        } else if (currentSupply >= 1500) {\\n            return 80000000000000000; // 1500-3500:  0.08 ETH\\n        } else if (currentSupply >= 500) {\\n            return 60000000000000000; // 500-1500:   0.06 ETH\\n        } else {\\n            return 40000000000000000; // 0 - 500     0.04 ETH\\n        }\\n    }\\n\\n    function startSale() public onlyOwner {\\n        saleStarted = true;\\n    }\\n\\n    function startGrowing() public onlyOwner {\\n        growingStarted = true;\\n    }\\n\\n    /**\\n     * @dev Withdraw ether from this contract (Callable by owner only)\\n     */\\n    function withdraw() public onlyOwner {\\n        uint256 balance = address(this).balance;\\n        msg.sender.transfer(balance);\\n    }\\n\\n    receive() external payable {}\\n\\n    function webMint(uint256 units) public payable {\\n        require(saleStarted, \\\"The Nursery is closed\\\");\\n        require(units <= MAX_CRYPTORCHIDS - totalSupply(), \\\"Not enough bulbs left\\\");\\n        require(totalSupply() < MAX_CRYPTORCHIDS, \\\"Sale has already ended\\\");\\n        require(units > 0 && units <= 20, \\\"You can plant minimum 1, maximum 20 CryptOrchids\\\");\\n        require(SafeMath.add(totalSupply(), units) <= MAX_CRYPTORCHIDS, \\\"Exceeds MAX_CRYPTORCHIDS\\\");\\n        require(msg.value >= SafeMath.mul(currentPrice(), units), \\\"Ether value sent is below the price\\\");\\n\\n        for (uint256 i = 0; i < units; i++) {\\n            _tokenIds.increment();\\n            uint256 newItemId = _tokenIds.current();\\n            cryptorchids[newItemId] = CryptOrchid({species: \\\"granum\\\", plantedAt: MAX_TIMESTAMP, waterLevel: 0});\\n            _safeMint(msg.sender, newItemId);\\n        }\\n    }\\n\\n    function germinate(uint256 tokenId, uint256 userProvidedSeed) public {\\n        require(growingStarted, \\\"Germination starts 2021-04-12T16:00:00Z\\\");\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Only the Owner can germinate a CryptOrchid.\\\");\\n        _requestRandom(tokenId, userProvidedSeed);\\n    }\\n\\n    function _requestRandom(uint256 tokenId, uint256 userProvidedSeed) internal returns (bytes32 requestId) {\\n        uint256 pseudoRand = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, userProvidedSeed)));\\n        fulfillRandomness(tokenId, pseudoRand);\\n    }\\n\\n    function fulfillRandomness(uint256 tokenId, uint256 randomness) internal {\\n        CryptOrchid storage orchid = cryptorchids[tokenId];\\n        string memory species = pickSpecies(SafeMath.mod(randomness, 10000));\\n        orchid.species = species;\\n        orchid.plantedAt = currentTime();\\n        address tokenOwner = ownerOf(tokenId);\\n    }\\n\\n    function alive(uint256 tokenId) public view returns (bool) {\\n        return growthStage(tokenId) != Stage.Dead;\\n    }\\n\\n    function flowering(uint256 tokenId) public view returns (bool) {\\n        return growthStage(tokenId) == Stage.Flower;\\n    }\\n\\n    function growthStage(uint256 tokenId) public view returns (Stage) {\\n        CryptOrchid memory orchid = cryptorchids[tokenId];\\n        if (orchid.plantedAt == 0) return Stage.Unsold;\\n        if (orchid.plantedAt == MAX_TIMESTAMP) return Stage.Seed;\\n        uint256 currentWaterLevel = orchid.waterLevel;\\n        uint256 elapsed = currentTime() - orchid.plantedAt;\\n        uint256 fullCycles = SafeMath.div(uint256(elapsed), GROWTH_CYCLE);\\n        uint256 modulo = SafeMath.mod(elapsed, GROWTH_CYCLE);\\n\\n        if (currentWaterLevel == fullCycles) {\\n            return Stage.Flower;\\n        }\\n\\n        if (SafeMath.add(currentWaterLevel, 1) == fullCycles && modulo < WATERING_WINDOW) {\\n            return Stage.Flower;\\n        }\\n\\n        return Stage.Dead;\\n    }\\n\\n    function water(uint256 tokenId) public {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Only the Owner can water a CryptOrchid.\\\");\\n\\n        if (!alive(tokenId)) {\\n            return;\\n        }\\n\\n        CryptOrchid storage orchid = cryptorchids[tokenId];\\n\\n        uint256 wateringLevel = orchid.waterLevel;\\n        uint256 elapsed = currentTime() - orchid.plantedAt;\\n        uint256 fullCycles = SafeMath.div(uint256(elapsed), GROWTH_CYCLE);\\n\\n        if (wateringLevel > fullCycles) {\\n            return;\\n        }\\n\\n        uint256 newWaterLevel = SafeMath.add(wateringLevel, 1);\\n        orchid.waterLevel = newWaterLevel;\\n    }\\n\\n    function getTokenMetadata(uint256 tokenId)\\n        public\\n        view\\n        returns (\\n            string memory,\\n            uint256,\\n            uint256,\\n            Stage\\n        )\\n    {\\n        return (\\n            cryptorchids[tokenId].species,\\n            cryptorchids[tokenId].plantedAt,\\n            cryptorchids[tokenId].waterLevel,\\n            growthStage(tokenId)\\n        );\\n    }\\n\\n    /**\\n     * @notice Pick species for random number index\\n     * @param randomIndex uint256\\n     * @return species string\\n     */\\n    function pickSpecies(uint256 randomIndex) private view returns (string memory) {\\n        for (uint256 i = 0; i < 10; i++) {\\n            if (randomIndex <= limits[i]) {\\n                return genum[i];\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/presets/ERC721PresetMinterPauserAutoId.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../access/AccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Counters.sol\\\";\\nimport \\\"../token/ERC721/ERC721.sol\\\";\\nimport \\\"../token/ERC721/ERC721Burnable.sol\\\";\\nimport \\\"../token/ERC721/ERC721Pausable.sol\\\";\\n\\n/**\\n * @dev {ERC721} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *  - token ID and URI autogeneration\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract ERC721PresetMinterPauserAutoId is Context, AccessControl, ERC721Burnable, ERC721Pausable {\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    Counters.Counter private _tokenIdTracker;\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\\n     * See {ERC721-tokenURI}.\\n     */\\n    constructor(string memory name, string memory symbol, string memory baseURI) public ERC721(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n\\n        _setBaseURI(baseURI);\\n    }\\n\\n    /**\\n     * @dev Creates a new token for `to`. Its token ID will be automatically\\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\\n     * URI autogenerated based on the base URI passed at construction.\\n     *\\n     * See {ERC721-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have minter role to mint\\\");\\n\\n        // We cannot just use balanceOf to create the new tokenId because tokens\\n        // can be burned (destroyed), so we need a separate counter.\\n        _mint(to, _tokenIdTracker.current());\\n        _tokenIdTracker.increment();\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721, ERC721Pausable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/EnumerableSet.sol\\\";\\nimport \\\"../../utils/EnumerableMap.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId); // internal owner\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/ERC721Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC721.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/ERC721Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"../../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/EnumerableMap.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/tunnel/BaseRootTunnel.sol\": {\n      \"content\": \"pragma solidity ^0.6.6;\\n\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport {AccessControlMixin} from \\\"../common/AccessControlMixin.sol\\\";\\nimport {IStateSender} from \\\"../root/StateSender/IStateSender.sol\\\";\\nimport {RLPReader} from \\\"../lib/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"../lib/MerklePatriciaProof.sol\\\";\\nimport {ICheckpointManager} from \\\"../root/ICheckpointManager.sol\\\";\\nimport {RLPReader} from \\\"../lib/RLPReader.sol\\\";\\nimport {Merkle} from \\\"../lib/Merkle.sol\\\";\\n\\nabstract contract BaseRootTunnel is AccessControlMixin {\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n    using Merkle for bytes32;\\n    using SafeMath for uint256;\\n\\n    // keccak256(MessageSent(bytes))\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n    // state sender contract\\n    IStateSender public stateSender;\\n    // root chain manager\\n    ICheckpointManager public checkpointManager;\\n    // child tunnel contract which receives and sends messages \\n    address public childTunnel;\\n    // storage to avoid duplicate exits\\n    mapping(bytes32 => bool) public processedExits;\\n\\n    constructor() internal {\\n      _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n      _setupContractId(\\\"RootTunnel\\\");\\n    }\\n\\n    /**\\n     * @notice Set the state sender, callable only by admins\\n     * @dev This should be the state sender from plasma contracts\\n     * It is used to send bytes from root to child chain\\n     * @param newStateSender address of state sender contract\\n     */\\n    function setStateSender(address newStateSender)\\n        external\\n        only(DEFAULT_ADMIN_ROLE)\\n    {\\n        stateSender = IStateSender(newStateSender);\\n    }\\n\\n    /**\\n     * @notice Set the checkpoint manager, callable only by admins\\n     * @dev This should be the plasma contract responsible for keeping track of checkpoints\\n     * @param newCheckpointManager address of checkpoint manager contract\\n     */\\n    function setCheckpointManager(address newCheckpointManager)\\n        external\\n        only(DEFAULT_ADMIN_ROLE)\\n    {\\n        checkpointManager = ICheckpointManager(newCheckpointManager);\\n    }\\n\\n    /**\\n     * @notice Set the child chain tunnel, callable only by admins\\n     * @dev This should be the contract responsible to receive data bytes on child chain\\n     * @param newChildTunnel address of child tunnel contract\\n     */\\n    function setChildTunnel(address newChildTunnel)\\n        external\\n        only(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(newChildTunnel != address(0x0), \\\"RootTunnel: INVALID_CHILD_TUNNEL_ADDRESS\\\");\\n        childTunnel = newChildTunnel;\\n    }\\n\\n    /**\\n     * @notice Send bytes message to Child Tunnel\\n     * @param message bytes message that will be sent to Child Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToChild(bytes memory message) internal {\\n        stateSender.syncState(childTunnel, message);\\n    }\\n\\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n        RLPReader.RLPItem[] memory inputDataRLPList = inputData\\n            .toRlpItem()\\n            .toList();\\n\\n        // checking if exit has already been processed\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n        bytes32 exitHash = keccak256(\\n            abi.encodePacked(\\n                inputDataRLPList[2].toUint(), // blockNumber\\n                // first 2 nibbles are dropped while generating nibble array\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n                // so converting to nibble array and then hashing it\\n                MerklePatriciaProof._getNibbleArray(inputDataRLPList[8].toBytes()), // branchMask\\n                inputDataRLPList[9].toUint() // receiptLogIndex\\n            )\\n        );\\n        require(\\n            processedExits[exitHash] == false,\\n            \\\"RootTunnel: EXIT_ALREADY_PROCESSED\\\"\\n        );\\n        processedExits[exitHash] = true;\\n\\n        RLPReader.RLPItem[] memory receiptRLPList = inputDataRLPList[6]\\n            .toBytes()\\n            .toRlpItem()\\n            .toList();\\n        RLPReader.RLPItem memory logRLP = receiptRLPList[3]\\n            .toList()[\\n                inputDataRLPList[9].toUint() // receiptLogIndex\\n            ];\\n\\n        RLPReader.RLPItem[] memory logRLPList = logRLP.toList();\\n        \\n        // check child tunnel\\n        require(childTunnel == RLPReader.toAddress(logRLPList[0]), \\\"RootTunnel: INVALID_CHILD_TUNNEL\\\");\\n\\n        // verify receipt inclusion\\n        require(\\n            MerklePatriciaProof.verify(\\n                inputDataRLPList[6].toBytes(), // receipt\\n                inputDataRLPList[8].toBytes(), // branchMask\\n                inputDataRLPList[7].toBytes(), // receiptProof\\n                bytes32(inputDataRLPList[5].toUint()) // receiptRoot\\n            ),\\n            \\\"RootTunnel: INVALID_RECEIPT_PROOF\\\"\\n        );\\n\\n        // verify checkpoint inclusion\\n        _checkBlockMembershipInCheckpoint(\\n            inputDataRLPList[2].toUint(), // blockNumber\\n            inputDataRLPList[3].toUint(), // blockTime\\n            bytes32(inputDataRLPList[4].toUint()), // txRoot\\n            bytes32(inputDataRLPList[5].toUint()), // receiptRoot\\n            inputDataRLPList[0].toUint(), // headerNumber\\n            inputDataRLPList[1].toBytes() // blockProof\\n        );\\n\\n        RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList(); // topics\\n\\n        require(\\n            bytes32(logTopicRLPList[0].toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n            \\\"RootTunnel: INVALID_SIGNATURE\\\"\\n        );\\n\\n        // received message data\\n        bytes memory receivedData = logRLPList[2].toBytes();\\n        (bytes memory message) = abi.decode(receivedData, (bytes)); // event decodes params again, so decoding bytes to get message\\n        return message;\\n    }\\n\\n    function _checkBlockMembershipInCheckpoint(\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        bytes32 txRoot,\\n        bytes32 receiptRoot,\\n        uint256 headerNumber,\\n        bytes memory blockProof\\n    ) private view returns (uint256) {\\n        (\\n            bytes32 headerRoot,\\n            uint256 startBlock,\\n            ,\\n            uint256 createdAt,\\n\\n        ) = checkpointManager.headerBlocks(headerNumber);\\n\\n        require(\\n            keccak256(\\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\\n            )\\n                .checkMembership(\\n                blockNumber.sub(startBlock),\\n                headerRoot,\\n                blockProof\\n            ),\\n            \\\"RootTunnel: INVALID_HEADER\\\"\\n        );\\n        return createdAt;\\n    }\\n\\n    /**\\n     * @notice receive message from  L2 to L1, validated by proof\\n     * @dev This function verifies if the transaction actually happened on child chain\\n     *\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\n     *  3 - blockTime - Reference tx block time\\n     *  4 - txRoot - Transactions root of block\\n     *  5 - receiptRoot - Receipts root of block\\n     *  6 - receipt - Receipt of the reference transaction\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\n     */\\n    function receiveMessage(bytes memory inputData) public virtual {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Child Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Child Tunnel\\n     */\\n    function _processMessageFromChild(bytes memory message) virtual internal;\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/common/AccessControlMixin.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract AccessControlMixin is AccessControl {\\n    string private _revertMsg;\\n    function _setupContractId(string memory contractId) internal {\\n        _revertMsg = string(abi.encodePacked(contractId, \\\": INSUFFICIENT_PERMISSIONS\\\"));\\n    }\\n\\n    modifier only(bytes32 role) {\\n        require(\\n            hasRole(role, _msgSender()),\\n            _revertMsg\\n        );\\n        _;\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/StateSender/IStateSender.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\ninterface IStateSender {\\n    function syncState(address receiver, bytes calldata data) external;\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/lib/RLPReader.sol\": {\n      \"content\": \"/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n * https://github.com/hamdiallam/Solidity-RLP/blob/e681e25a376dbd5426b509380bc03446f05d0f97/contracts/RLPReader.sol\\n */\\npragma solidity 0.6.6;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item)\\n        internal\\n        pure\\n        returns (RLPItem memory)\\n    {\\n        require(item.length > 0, \\\"RLPReader: INVALID_BYTES_LENGTH\\\");\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @param item RLP encoded list in bytes\\n     */\\n    function toList(RLPItem memory item)\\n        internal\\n        pure\\n        returns (RLPItem[] memory)\\n    {\\n        require(isList(item), \\\"RLPReader: ITEM_NOT_LIST\\\");\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n        uint256 listLength = _itemLength(item.memPtr);\\n        require(listLength == item.len, \\\"RLPReader: LIST_DECODED_LENGTH_MISMATCH\\\");\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory result = new bytes(item.len);\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        require(!isList(item), \\\"RLPReader: DECODING_LIST_AS_ADDRESS\\\");\\n        // 1 byte for the length prefix\\n        require(item.len == 21, \\\"RLPReader: INVALID_ADDRESS_LENGTH\\\");\\n\\n        return address(toUint(item));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(!isList(item), \\\"RLPReader: DECODING_LIST_AS_UINT\\\");\\n        require(item.len <= 33, \\\"RLPReader: INVALID_UINT_LENGTH\\\");\\n\\n        uint256 itemLength = _itemLength(item.memPtr);\\n        require(itemLength == item.len, \\\"RLPReader: UINT_DECODED_LENGTH_MISMATCH\\\");\\n\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 len = item.len - offset;\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        uint256 itemLength = _itemLength(item.memPtr);\\n        require(itemLength == item.len, \\\"RLPReader: UINT_STRICT_DECODED_LENGTH_MISMATCH\\\");\\n        // one byte prefix\\n        require(item.len == 33, \\\"RLPReader: INVALID_UINT_STRICT_LENGTH\\\");\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        uint256 listLength = _itemLength(item.memPtr);\\n        require(listLength == item.len, \\\"RLPReader: BYTES_DECODED_LENGTH_MISMATCH\\\");\\n        uint256 offset = _payloadOffset(item.memPtr);\\n\\n        uint256 len = item.len - offset; // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        // add `isList` check if `item` is expected to be passsed without a check from calling function\\n        // require(isList(item), \\\"RLPReader: NUM_ITEMS_NOT_LIST\\\");\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            require(currPtr <= endPtr, \\\"RLPReader: NUM_ITEMS_DECODED_LENGTH_MISMATCH\\\");\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (\\n            byte0 < STRING_LONG_START ||\\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\n        ) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/lib/MerklePatriciaProof.sol\": {\n      \"content\": \"/*\\n * @title MerklePatriciaVerifier\\n * @author Sam Mayo (sammayo888@gmail.com)\\n *\\n * @dev Library for verifing merkle patricia proofs.\\n */\\npragma solidity 0.6.6;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n    /*\\n     * @dev Verifies a merkle patricia proof.\\n     * @param value The terminating value in the trie.\\n     * @param encodedPath The path in the trie leading to value.\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\n     * @param root The root hash of the trie.\\n     * @return The boolean validity of the proof.\\n     */\\n    function verify(\\n        bytes memory value,\\n        bytes memory encodedPath,\\n        bytes memory rlpParentNodes,\\n        bytes32 root\\n    ) internal pure returns (bool) {\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n        bytes memory currentNode;\\n        RLPReader.RLPItem[] memory currentNodeList;\\n\\n        bytes32 nodeKey = root;\\n        uint256 pathPtr = 0;\\n\\n        bytes memory path = _getNibbleArray(encodedPath);\\n        if (path.length == 0) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\n            if (pathPtr > path.length) {\\n                return false;\\n            }\\n\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n            if (nodeKey != keccak256(currentNode)) {\\n                return false;\\n            }\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n            if (currentNodeList.length == 17) {\\n                if (pathPtr == path.length) {\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\n                if (nextPathNibble > 16) {\\n                    return false;\\n                }\\n                nodeKey = bytes32(\\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\\n                );\\n                pathPtr += 1;\\n            } else if (currentNodeList.length == 2) {\\n                uint256 traversed = _nibblesToTraverse(\\n                    RLPReader.toBytes(currentNodeList[0]),\\n                    path,\\n                    pathPtr\\n                );\\n                if (pathPtr + traversed == path.length) {\\n                    //leaf node\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                //extension node\\n                if (traversed == 0) {\\n                    return false;\\n                }\\n\\n                pathPtr += traversed;\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    function _nibblesToTraverse(\\n        bytes memory encodedPartialPath,\\n        bytes memory path,\\n        uint256 pathPtr\\n    ) private pure returns (uint256) {\\n        uint256 len = 0;\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n        bytes memory slicedPath = new bytes(partialPath.length);\\n\\n        // pathPtr counts nibbles in path\\n        // partialPath.length is a number of nibbles\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\n            bytes1 pathNibble = path[i];\\n            slicedPath[i - pathPtr] = pathNibble;\\n        }\\n\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\n            len = partialPath.length;\\n        } else {\\n            len = 0;\\n        }\\n        return len;\\n    }\\n\\n    // bytes b must be hp encoded\\n    function _getNibbleArray(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory nibbles = \\\"\\\";\\n        if (b.length > 0) {\\n            uint8 offset;\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n            if (hpNibble == 1 || hpNibble == 3) {\\n                nibbles = new bytes(b.length * 2 - 1);\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n                nibbles[0] = oddNibble;\\n                offset = 1;\\n            } else {\\n                nibbles = new bytes(b.length * 2 - 2);\\n                offset = 0;\\n            }\\n\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n            }\\n        }\\n        return nibbles;\\n    }\\n\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\\n        private\\n        pure\\n        returns (bytes1)\\n    {\\n        return\\n            bytes1(\\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\\n            );\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/ICheckpointManager.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\ncontract ICheckpointManager {\\n    struct HeaderBlock {\\n        bytes32 root;\\n        uint256 start;\\n        uint256 end;\\n        uint256 createdAt;\\n        address proposer;\\n    }\\n\\n    /**\\n     * @notice mapping of checkpoint header numbers to block details\\n     * @dev These checkpoints are submited by plasma contracts\\n     */\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/lib/Merkle.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nlibrary Merkle {\\n    function checkMembership(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n        uint256 proofHeight = proof.length / 32;\\n        // Proof of size n means, height of the tree is n+1.\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\n        require(index < 2 ** proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n            if (index % 2 == 0) {\\n                computedHash = keccak256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n            } else {\\n                computedHash = keccak256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n\\n            index = index / 2;\\n        }\\n        return computedHash == rootHash;\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/tunnel/RootTunnel.sol\": {\n      \"content\": \"pragma solidity ^0.6.6;\\n\\nimport {BaseRootTunnel} from \\\"./BaseRootTunnel.sol\\\";\\n\\n\\ncontract RootTunnel is BaseRootTunnel {\\n    function _processMessageFromChild(bytes memory message) internal override {\\n      // implement your core logic here\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/RootChainManager/RootChainManager.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IRootChainManager} from \\\"./IRootChainManager.sol\\\";\\nimport {RootChainManagerStorage} from \\\"./RootChainManagerStorage.sol\\\";\\nimport {IStateSender} from \\\"../StateSender/IStateSender.sol\\\";\\nimport {ICheckpointManager} from \\\"../ICheckpointManager.sol\\\";\\nimport {RLPReader} from \\\"../../lib/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"../../lib/MerklePatriciaProof.sol\\\";\\nimport {Merkle} from \\\"../../lib/Merkle.sol\\\";\\nimport {ITokenPredicate} from \\\"../TokenPredicates/ITokenPredicate.sol\\\";\\nimport {Initializable} from \\\"../../common/Initializable.sol\\\";\\nimport {NativeMetaTransaction} from \\\"../../common/NativeMetaTransaction.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {AccessControlMixin} from \\\"../../common/AccessControlMixin.sol\\\";\\nimport {ContextMixin} from \\\"../../common/ContextMixin.sol\\\";\\n\\ncontract RootChainManager is\\n    IRootChainManager,\\n    Initializable,\\n    AccessControl, // included to match old storage layout while upgrading\\n    RootChainManagerStorage, // created to match old storage layout while upgrading\\n    AccessControlMixin,\\n    NativeMetaTransaction,\\n    ContextMixin\\n{\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n    using Merkle for bytes32;\\n    using SafeMath for uint256;\\n\\n    // maybe DEPOSIT and MAP_TOKEN can be reduced to bytes4\\n    bytes32 public constant DEPOSIT = keccak256(\\\"DEPOSIT\\\");\\n    bytes32 public constant MAP_TOKEN = keccak256(\\\"MAP_TOKEN\\\");\\n    address public constant ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    bytes32 public constant MAPPER_ROLE = keccak256(\\\"MAPPER_ROLE\\\");\\n\\n    function _msgSender()\\n        internal\\n        override\\n        view\\n        returns (address payable sender)\\n    {\\n        return ContextMixin.msgSender();\\n    }\\n\\n    /**\\n     * @notice Deposit ether by directly sending to the contract\\n     * The account sending ether receives WETH on child chain\\n     */\\n    receive() external payable {\\n        _depositEtherFor(_msgSender());\\n    }\\n\\n    /**\\n     * @notice Initialize the contract after it has been proxified\\n     * @dev meant to be called once immediately after deployment\\n     * @param _owner the account that should be granted admin role\\n     */\\n    function initialize(\\n        address _owner\\n    )\\n        external\\n        initializer\\n    {\\n        _initializeEIP712(\\\"RootChainManager\\\");\\n        _setupContractId(\\\"RootChainManager\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n        _setupRole(MAPPER_ROLE, _owner);\\n    }\\n\\n    // adding seperate function setupContractId since initialize is already called with old implementation\\n    function setupContractId()\\n        external\\n        only(DEFAULT_ADMIN_ROLE)\\n    {\\n        _setupContractId(\\\"RootChainManager\\\");\\n    }\\n\\n    // adding seperate function initializeEIP712 since initialize is already called with old implementation\\n    function initializeEIP712()\\n        external\\n        only(DEFAULT_ADMIN_ROLE)\\n    {\\n        _setDomainSeperator(\\\"RootChainManager\\\");\\n    }\\n\\n    /**\\n     * @notice Set the state sender, callable only by admins\\n     * @dev This should be the state sender from plasma contracts\\n     * It is used to send bytes from root to child chain\\n     * @param newStateSender address of state sender contract\\n     */\\n    function setStateSender(address newStateSender)\\n        external\\n        only(DEFAULT_ADMIN_ROLE)\\n    {\\n        _stateSender = IStateSender(newStateSender);\\n    }\\n\\n    /**\\n     * @notice Get the address of contract set as state sender\\n     * @return The address of state sender contract\\n     */\\n    function stateSenderAddress() external view returns (address) {\\n        return address(_stateSender);\\n    }\\n\\n    /**\\n     * @notice Set the checkpoint manager, callable only by admins\\n     * @dev This should be the plasma contract responsible for keeping track of checkpoints\\n     * @param newCheckpointManager address of checkpoint manager contract\\n     */\\n    function setCheckpointManager(address newCheckpointManager)\\n        external\\n        only(DEFAULT_ADMIN_ROLE)\\n    {\\n        _checkpointManager = ICheckpointManager(newCheckpointManager);\\n    }\\n\\n    /**\\n     * @notice Get the address of contract set as checkpoint manager\\n     * @return The address of checkpoint manager contract\\n     */\\n    function checkpointManagerAddress() external view returns (address) {\\n        return address(_checkpointManager);\\n    }\\n\\n    /**\\n     * @notice Set the child chain manager, callable only by admins\\n     * @dev This should be the contract responsible to receive deposit bytes on child chain\\n     * @param newChildChainManager address of child chain manager contract\\n     */\\n    function setChildChainManagerAddress(address newChildChainManager)\\n        external\\n        only(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(newChildChainManager != address(0x0), \\\"RootChainManager: INVALID_CHILD_CHAIN_ADDRESS\\\");\\n        childChainManagerAddress = newChildChainManager;\\n    }\\n\\n    /**\\n     * @notice Register a token predicate address against its type, callable only by mappers\\n     * @dev A predicate is a contract responsible to process the token specific logic while locking or exiting tokens\\n     * @param tokenType bytes32 unique identifier for the token type\\n     * @param predicateAddress address of token predicate address\\n     */\\n    function registerPredicate(bytes32 tokenType, address predicateAddress)\\n        external\\n        override\\n        only(DEFAULT_ADMIN_ROLE)\\n    {\\n        typeToPredicate[tokenType] = predicateAddress;\\n        emit PredicateRegistered(tokenType, predicateAddress);\\n    }\\n\\n    /**\\n     * @notice Map a token to enable its movement via the PoS Portal, callable only by mappers\\n     * @param rootToken address of token on root chain\\n     * @param childToken address of token on child chain\\n     * @param tokenType bytes32 unique identifier for the token type\\n     */\\n    function mapToken(\\n        address rootToken,\\n        address childToken,\\n        bytes32 tokenType\\n    ) external override only(MAPPER_ROLE) {\\n        // explicit check if token is already mapped to avoid accidental remaps\\n        require(\\n            rootToChildToken[rootToken] == address(0) &&\\n            childToRootToken[childToken] == address(0),\\n            \\\"RootChainManager: ALREADY_MAPPED\\\"\\n        );\\n        _mapToken(rootToken, childToken, tokenType);\\n    }\\n\\n    /**\\n     * @notice Clean polluted token mapping\\n     * @param rootToken address of token on root chain. Since rename token was introduced later stage, \\n     * clean method is used to clean pollulated mapping\\n     */\\n    function cleanMapToken(\\n        address rootToken,\\n        address childToken\\n    ) external override only(DEFAULT_ADMIN_ROLE) {\\n        rootToChildToken[rootToken] = address(0);\\n        childToRootToken[childToken] = address(0);\\n        tokenToType[rootToken] = bytes32(0);\\n\\n        emit TokenMapped(rootToken, childToken, tokenToType[rootToken]);\\n    }\\n\\n    /**\\n     * @notice Remap a token that has already been mapped, properly cleans up old mapping\\n     * Callable only by mappers\\n     * @param rootToken address of token on root chain\\n     * @param childToken address of token on child chain\\n     * @param tokenType bytes32 unique identifier for the token type\\n     */\\n    function remapToken(\\n        address rootToken,\\n        address childToken,\\n        bytes32 tokenType\\n    ) external override only(DEFAULT_ADMIN_ROLE) {\\n        // cleanup old mapping\\n        address oldChildToken = rootToChildToken[rootToken];\\n        address oldRootToken = childToRootToken[childToken];\\n\\n        if (rootToChildToken[oldRootToken] != address(0)) {\\n            rootToChildToken[oldRootToken] = address(0);\\n            tokenToType[oldRootToken] = bytes32(0);\\n        }\\n\\n        if (childToRootToken[oldChildToken] != address(0)) {\\n            childToRootToken[oldChildToken] = address(0);\\n        }\\n\\n        _mapToken(rootToken, childToken, tokenType);\\n    }\\n\\n    function _mapToken(\\n        address rootToken,\\n        address childToken,\\n        bytes32 tokenType\\n    ) private {\\n        require(\\n            typeToPredicate[tokenType] != address(0x0),\\n            \\\"RootChainManager: TOKEN_TYPE_NOT_SUPPORTED\\\"\\n        );\\n\\n        rootToChildToken[rootToken] = childToken;\\n        childToRootToken[childToken] = rootToken;\\n        tokenToType[rootToken] = tokenType;\\n\\n        emit TokenMapped(rootToken, childToken, tokenType);\\n\\n        bytes memory syncData = abi.encode(rootToken, childToken, tokenType);\\n        _stateSender.syncState(\\n            childChainManagerAddress,\\n            abi.encode(MAP_TOKEN, syncData)\\n        );\\n    }\\n\\n    /**\\n     * @notice Move ether from root to child chain, accepts ether transfer\\n     * Keep in mind this ether cannot be used to pay gas on child chain\\n     * Use Matic tokens deposited using plasma mechanism for that\\n     * @param user address of account that should receive WETH on child chain\\n     */\\n    function depositEtherFor(address user) external override payable {\\n        _depositEtherFor(user);\\n    }\\n\\n    /**\\n     * @notice Move tokens from root to child chain\\n     * @dev This mechanism supports arbitrary tokens as long as its predicate has been registered and the token is mapped\\n     * @param user address of account that should receive this deposit on child chain\\n     * @param rootToken address of token that is being deposited\\n     * @param depositData bytes data that is sent to predicate and child token contracts to handle deposit\\n     */\\n    function depositFor(\\n        address user,\\n        address rootToken,\\n        bytes calldata depositData\\n    ) external override {\\n        require(\\n            rootToken != ETHER_ADDRESS,\\n            \\\"RootChainManager: INVALID_ROOT_TOKEN\\\"\\n        );\\n        _depositFor(user, rootToken, depositData);\\n    }\\n\\n    function _depositEtherFor(address user) private {\\n        bytes memory depositData = abi.encode(msg.value);\\n        _depositFor(user, ETHER_ADDRESS, depositData);\\n\\n        // payable(typeToPredicate[tokenToType[ETHER_ADDRESS]]).transfer(msg.value);\\n        // transfer doesn't work as expected when receiving contract is proxified so using call\\n        (bool success, /* bytes memory data */) = typeToPredicate[tokenToType[ETHER_ADDRESS]].call{value: msg.value}(\\\"\\\");\\n        if (!success) {\\n            revert(\\\"RootChainManager: ETHER_TRANSFER_FAILED\\\");\\n        }\\n    }\\n\\n    function _depositFor(\\n        address user,\\n        address rootToken,\\n        bytes memory depositData\\n    ) private {\\n        bytes32 tokenType = tokenToType[rootToken];\\n        require(\\n            rootToChildToken[rootToken] != address(0x0) &&\\n               tokenType != 0,\\n            \\\"RootChainManager: TOKEN_NOT_MAPPED\\\"\\n        );\\n        address predicateAddress = typeToPredicate[tokenType];\\n        require(\\n            predicateAddress != address(0),\\n            \\\"RootChainManager: INVALID_TOKEN_TYPE\\\"\\n        );\\n        require(\\n            user != address(0),\\n            \\\"RootChainManager: INVALID_USER\\\"\\n        );\\n\\n        ITokenPredicate(predicateAddress).lockTokens(\\n            _msgSender(),\\n            user,\\n            rootToken,\\n            depositData\\n        );\\n        bytes memory syncData = abi.encode(user, rootToken, depositData);\\n        _stateSender.syncState(\\n            childChainManagerAddress,\\n            abi.encode(DEPOSIT, syncData)\\n        );\\n    }\\n\\n    /**\\n     * @notice exit tokens by providing proof\\n     * @dev This function verifies if the transaction actually happened on child chain\\n     * the transaction log is then sent to token predicate to handle it accordingly\\n     *\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\n     *  3 - blockTime - Reference tx block time\\n     *  4 - txRoot - Transactions root of block\\n     *  5 - receiptRoot - Receipts root of block\\n     *  6 - receipt - Receipt of the reference transaction\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\n     */\\n    function exit(bytes calldata inputData) external override {\\n        RLPReader.RLPItem[] memory inputDataRLPList = inputData\\n            .toRlpItem()\\n            .toList();\\n\\n        // checking if exit has already been processed\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n        bytes32 exitHash = keccak256(\\n            abi.encodePacked(\\n                inputDataRLPList[2].toUint(), // blockNumber\\n                // first 2 nibbles are dropped while generating nibble array\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n                // so converting to nibble array and then hashing it\\n                MerklePatriciaProof._getNibbleArray(inputDataRLPList[8].toBytes()), // branchMask\\n                inputDataRLPList[9].toUint() // receiptLogIndex\\n            )\\n        );\\n        require(\\n            processedExits[exitHash] == false,\\n            \\\"RootChainManager: EXIT_ALREADY_PROCESSED\\\"\\n        );\\n        processedExits[exitHash] = true;\\n\\n        RLPReader.RLPItem[] memory receiptRLPList = inputDataRLPList[6]\\n            .toBytes()\\n            .toRlpItem()\\n            .toList();\\n        RLPReader.RLPItem memory logRLP = receiptRLPList[3]\\n            .toList()[\\n                inputDataRLPList[9].toUint() // receiptLogIndex\\n            ];\\n\\n        address childToken = RLPReader.toAddress(logRLP.toList()[0]); // log emitter address field\\n        // log should be emmited only by the child token\\n        address rootToken = childToRootToken[childToken];\\n        require(\\n            rootToken != address(0),\\n            \\\"RootChainManager: TOKEN_NOT_MAPPED\\\"\\n        );\\n\\n        address predicateAddress = typeToPredicate[\\n            tokenToType[rootToken]\\n        ];\\n\\n        // branch mask can be maximum 32 bits\\n        require(\\n            inputDataRLPList[8].toUint() &\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000 ==\\n                0,\\n            \\\"RootChainManager: INVALID_BRANCH_MASK\\\"\\n        );\\n\\n        // verify receipt inclusion\\n        require(\\n            MerklePatriciaProof.verify(\\n                inputDataRLPList[6].toBytes(), // receipt\\n                inputDataRLPList[8].toBytes(), // branchMask\\n                inputDataRLPList[7].toBytes(), // receiptProof\\n                bytes32(inputDataRLPList[5].toUint()) // receiptRoot\\n            ),\\n            \\\"RootChainManager: INVALID_PROOF\\\"\\n        );\\n\\n        // verify checkpoint inclusion\\n        _checkBlockMembershipInCheckpoint(\\n            inputDataRLPList[2].toUint(), // blockNumber\\n            inputDataRLPList[3].toUint(), // blockTime\\n            bytes32(inputDataRLPList[4].toUint()), // txRoot\\n            bytes32(inputDataRLPList[5].toUint()), // receiptRoot\\n            inputDataRLPList[0].toUint(), // headerNumber\\n            inputDataRLPList[1].toBytes() // blockProof\\n        );\\n\\n        ITokenPredicate(predicateAddress).exitTokens(\\n            _msgSender(),\\n            rootToken,\\n            logRLP.toRlpBytes()\\n        );\\n    }\\n\\n    function _checkBlockMembershipInCheckpoint(\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        bytes32 txRoot,\\n        bytes32 receiptRoot,\\n        uint256 headerNumber,\\n        bytes memory blockProof\\n    ) private view returns (uint256) {\\n        (\\n            bytes32 headerRoot,\\n            uint256 startBlock,\\n            ,\\n            uint256 createdAt,\\n\\n        ) = _checkpointManager.headerBlocks(headerNumber);\\n\\n        require(\\n            keccak256(\\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\\n            )\\n                .checkMembership(\\n                blockNumber.sub(startBlock),\\n                headerRoot,\\n                blockProof\\n            ),\\n            \\\"RootChainManager: INVALID_HEADER\\\"\\n        );\\n        return createdAt;\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/RootChainManager/IRootChainManager.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\ninterface IRootChainManager {\\n    event TokenMapped(\\n        address indexed rootToken,\\n        address indexed childToken,\\n        bytes32 indexed tokenType\\n    );\\n\\n    event PredicateRegistered(\\n        bytes32 indexed tokenType,\\n        address indexed predicateAddress\\n    );\\n\\n    function registerPredicate(bytes32 tokenType, address predicateAddress)\\n        external;\\n\\n    function mapToken(\\n        address rootToken,\\n        address childToken,\\n        bytes32 tokenType\\n    ) external;\\n\\n    function cleanMapToken(\\n        address rootToken,\\n        address childToken\\n    ) external;\\n\\n    function remapToken(\\n        address rootToken,\\n        address childToken,\\n        bytes32 tokenType\\n    ) external;\\n\\n    function depositEtherFor(address user) external payable;\\n\\n    function depositFor(\\n        address user,\\n        address rootToken,\\n        bytes calldata depositData\\n    ) external;\\n\\n    function exit(bytes calldata inputData) external;\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/RootChainManager/RootChainManagerStorage.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {IStateSender} from \\\"../StateSender/IStateSender.sol\\\";\\nimport {ICheckpointManager} from \\\"../ICheckpointManager.sol\\\";\\n\\nabstract contract RootChainManagerStorage {\\n    mapping(bytes32 => address) public typeToPredicate;\\n    mapping(address => address) public rootToChildToken;\\n    mapping(address => address) public childToRootToken;\\n    mapping(address => bytes32) public tokenToType;\\n    mapping(bytes32 => bool) public processedExits;\\n    IStateSender internal _stateSender;\\n    ICheckpointManager internal _checkpointManager;\\n    address public childChainManagerAddress;\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/TokenPredicates/ITokenPredicate.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {RLPReader} from \\\"../../lib/RLPReader.sol\\\";\\n\\n/// @title Token predicate interface for all pos portal predicates\\n/// @notice Abstract interface that defines methods for custom predicates\\ninterface ITokenPredicate {\\n\\n    /**\\n     * @notice Deposit tokens into pos portal\\n     * @dev When `depositor` deposits tokens into pos portal, tokens get locked into predicate contract.\\n     * @param depositor Address who wants to deposit tokens\\n     * @param depositReceiver Address (address) who wants to receive tokens on side chain\\n     * @param rootToken Token which gets deposited\\n     * @param depositData Extra data for deposit (amount for ERC20, token id for ERC721 etc.) [ABI encoded]\\n     */\\n    function lockTokens(\\n        address depositor,\\n        address depositReceiver,\\n        address rootToken,\\n        bytes calldata depositData\\n    ) external;\\n\\n    /**\\n     * @notice Validates and processes exit while withdraw process\\n     * @dev Validates exit log emitted on sidechain. Reverts if validation fails.\\n     * @dev Processes withdraw based on custom logic. Example: transfer ERC20/ERC721, mint ERC721 if mintable withdraw\\n     * @param sender Address\\n     * @param rootToken Token which gets withdrawn\\n     * @param logRLPList Valid sidechain log for data like amount, token id etc.\\n     */\\n    function exitTokens(\\n        address sender,\\n        address rootToken,\\n        bytes calldata logRLPList\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/common/Initializable.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\ncontract Initializable {\\n    bool inited = false;\\n\\n    modifier initializer() {\\n        require(!inited, \\\"already inited\\\");\\n        _;\\n        inited = true;\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/common/NativeMetaTransaction.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {EIP712Base} from \\\"./EIP712Base.sol\\\";\\n\\ncontract NativeMetaTransaction is EIP712Base {\\n    using SafeMath for uint256;\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\n        )\\n    );\\n    event MetaTransactionExecuted(\\n        address userAddress,\\n        address payable relayerAddress,\\n        bytes functionSignature\\n    );\\n    mapping(address => uint256) nonces;\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) public payable returns (bytes memory) {\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: nonces[userAddress],\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n\\n        require(\\n            verify(userAddress, metaTx, sigR, sigS, sigV),\\n            \\\"Signer and signature do not match\\\"\\n        );\\n\\n        // increase nonce for user (to avoid re-use)\\n        nonces[userAddress] = nonces[userAddress].add(1);\\n\\n        emit MetaTransactionExecuted(\\n            userAddress,\\n            msg.sender,\\n            functionSignature\\n        );\\n\\n        // Append userAddress and relayer address at the end to extract it from calling context\\n        (bool success, bytes memory returnData) = address(this).call(\\n            abi.encodePacked(functionSignature, userAddress)\\n        );\\n        require(success, \\\"Function call not successful\\\");\\n\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    META_TRANSACTION_TYPEHASH,\\n                    metaTx.nonce,\\n                    metaTx.from,\\n                    keccak256(metaTx.functionSignature)\\n                )\\n            );\\n    }\\n\\n    function getNonce(address user) public view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(\\n        address signer,\\n        MetaTransaction memory metaTx,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) internal view returns (bool) {\\n        require(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\n        return\\n            signer ==\\n            ecrecover(\\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\\n                sigV,\\n                sigR,\\n                sigS\\n            );\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/common/ContextMixin.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nabstract contract ContextMixin {\\n    function msgSender()\\n        internal\\n        view\\n        returns (address payable sender)\\n    {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n        return sender;\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/common/EIP712Base.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\ncontract EIP712Base is Initializable {\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    string constant public ERC712_VERSION = \\\"1\\\";\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"\\n        )\\n    );\\n    bytes32 internal domainSeperator;\\n\\n    // supposed to be called once while initializing.\\n    // one of the contractsa that inherits this contract follows proxy pattern\\n    // so it is not possible to do this in a constructor\\n    function _initializeEIP712(\\n        string memory name\\n    )\\n        internal\\n        initializer\\n    {\\n        _setDomainSeperator(name);\\n    }\\n\\n    function _setDomainSeperator(string memory name) internal {\\n        domainSeperator = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(ERC712_VERSION)),\\n                address(this),\\n                bytes32(getChainId())\\n            )\\n        );\\n    }\\n\\n    function getDomainSeperator() public view returns (bytes32) {\\n        return domainSeperator;\\n    }\\n\\n    function getChainId() public pure returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /**\\n     * Accept message hash and returns hash message in EIP712 compatible form\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n     * https://eips.ethereum.org/EIPS/eip-712\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n     */\\n    function toTypedMessageHash(bytes32 messageHash)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeperator(), messageHash)\\n            );\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/RootToken/DummyMintableERC721.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {AccessControlMixin} from \\\"../../common/AccessControlMixin.sol\\\";\\nimport {NativeMetaTransaction} from \\\"../../common/NativeMetaTransaction.sol\\\";\\nimport {IMintableERC721} from \\\"./IMintableERC721.sol\\\";\\nimport {ContextMixin} from \\\"../../common/ContextMixin.sol\\\";\\n\\ncontract DummyMintableERC721 is\\n    ERC721,\\n    AccessControlMixin,\\n    NativeMetaTransaction,\\n    IMintableERC721,\\n    ContextMixin\\n{\\n    bytes32 public constant PREDICATE_ROLE = keccak256(\\\"PREDICATE_ROLE\\\");\\n    constructor(string memory name_, string memory symbol_)\\n        public\\n        ERC721(name_, symbol_)\\n    {\\n        _setupContractId(\\\"DummyMintableERC721\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(PREDICATE_ROLE, _msgSender());\\n        _initializeEIP712(name_);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        override\\n        view\\n        returns (address payable sender)\\n    {\\n        return ContextMixin.msgSender();\\n    }\\n\\n    /**\\n     * @dev See {IMintableERC721-mint}.\\n     */\\n    function mint(address user, uint256 tokenId) external override only(PREDICATE_ROLE) {\\n        _mint(user, tokenId);\\n    }\\n\\n    /**\\n     * If you're attempting to bring metadata associated with token\\n     * from L2 to L1, you must implement this method, to be invoked\\n     * when minting token back on L1, during exit\\n     */\\n    function setTokenMetadata(uint256 tokenId, bytes memory data) internal virtual {\\n        // This function should decode metadata obtained from L2\\n        // and attempt to set it for this `tokenId`\\n        //\\n        // Following is just a default implementation, feel\\n        // free to define your own encoding/ decoding scheme\\n        // for L2 -> L1 token metadata transfer\\n        string memory uri = abi.decode(data, (string));\\n\\n        _setTokenURI(tokenId, uri);\\n    }\\n\\n    /**\\n     * @dev See {IMintableERC721-mint}.\\n     * \\n     * If you're attempting to bring metadata associated with token\\n     * from L2 to L1, you must implement this method\\n     */\\n    function mint(address user, uint256 tokenId, bytes calldata metaData) external override only(PREDICATE_ROLE) {\\n        _mint(user, tokenId);\\n\\n        setTokenMetadata(tokenId, metaData);\\n    }\\n\\n\\n    /**\\n     * @dev See {IMintableERC721-exists}.\\n     */\\n    function exists(uint256 tokenId) external view override returns (bool) {\\n        return _exists(tokenId);\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/RootToken/IMintableERC721.sol\": {\n      \"content\": \"import {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\npragma solidity 0.6.6;\\n\\ninterface IMintableERC721 is IERC721 {\\n    /**\\n     * @notice called by predicate contract to mint tokens while withdrawing\\n     * @dev Should be callable only by MintableERC721Predicate\\n     * Make sure minting is done only by this function\\n     * @param user user address for whom token is being minted\\n     * @param tokenId tokenId being minted\\n     */\\n    function mint(address user, uint256 tokenId) external;\\n\\n    /**\\n     * @notice called by predicate contract to mint tokens while withdrawing with metadata from L2\\n     * @dev Should be callable only by MintableERC721Predicate\\n     * Make sure minting is only done either by this function/ 👆\\n     * @param user user address for whom token is being minted\\n     * @param tokenId tokenId being minted\\n     * @param metaData Associated token metadata, to be decoded & set using `setTokenMetadata`\\n     *\\n     * Note : If you're interested in taking token metadata from L2 to L1 during exit, you must\\n     * implement this method\\n     */\\n    function mint(address user, uint256 tokenId, bytes calldata metaData) external;\\n\\n    /**\\n     * @notice check if token already exists, return true if it does exist\\n     * @dev this check will be used by the predicate to determine if the token needs to be minted or transfered\\n     * @param tokenId tokenId being checked\\n     */\\n    function exists(uint256 tokenId) external view returns (bool);\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/TokenPredicates/MintableERC721Predicate.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {AccessControlMixin} from \\\"../../common/AccessControlMixin.sol\\\";\\nimport {RLPReader} from \\\"../../lib/RLPReader.sol\\\";\\nimport {IMintableERC721} from \\\"../RootToken/IMintableERC721.sol\\\";\\nimport {ITokenPredicate} from \\\"./ITokenPredicate.sol\\\";\\nimport {Initializable} from \\\"../../common/Initializable.sol\\\";\\n\\ncontract MintableERC721Predicate is ITokenPredicate, AccessControlMixin, Initializable, IERC721Receiver {\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    // keccak256(\\\"MANAGER_ROLE\\\")\\n    bytes32 public constant MANAGER_ROLE = 0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08;\\n    // keccak256(\\\"MintableERC721\\\")\\n    bytes32 public constant TOKEN_TYPE = 0xd4392723c111fcb98b073fe55873efb447bcd23cd3e49ec9ea2581930cd01ddc;\\n    // keccak256(\\\"Transfer(address,address,uint256)\\\")\\n    bytes32 public constant TRANSFER_EVENT_SIG = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n    // keccak256(\\\"WithdrawnBatch(address,uint256[])\\\")\\n    bytes32 public constant WITHDRAW_BATCH_EVENT_SIG = 0xf871896b17e9cb7a64941c62c188a4f5c621b86800e3d15452ece01ce56073df;\\n    // keccak256(\\\"TransferWithMetadata(address,address,uint256,bytes)\\\")\\n    bytes32 public constant TRANSFER_WITH_METADATA_EVENT_SIG = 0xf94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a14;\\n\\n    // limit batching of tokens due to gas limit restrictions\\n    uint256 public constant BATCH_LIMIT = 20;\\n\\n    event LockedMintableERC721(\\n        address indexed depositor,\\n        address indexed depositReceiver,\\n        address indexed rootToken,\\n        uint256 tokenId\\n    );\\n\\n    event LockedMintableERC721Batch(\\n        address indexed depositor,\\n        address indexed depositReceiver,\\n        address indexed rootToken,\\n        uint256[] tokenIds\\n    );\\n\\n    constructor() public {}\\n\\n    function initialize(address _owner) external initializer {\\n        _setupContractId(\\\"MintableERC721Predicate\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n        _setupRole(MANAGER_ROLE, _owner);\\n    }\\n\\n    /**\\n     * @notice accepts safe ERC721 transfer\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    )\\n        external\\n        override\\n        returns (bytes4)\\n    {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @notice Lock ERC721 token(s) for deposit, callable only by manager\\n     * @param depositor Address who wants to deposit token\\n     * @param depositReceiver Address (address) who wants to receive token on child chain\\n     * @param rootToken Token which gets deposited\\n     * @param depositData ABI encoded tokenId(s). It's possible to deposit batch of tokens.\\n     */\\n    function lockTokens(\\n        address depositor,\\n        address depositReceiver,\\n        address rootToken,\\n        bytes calldata depositData\\n    )\\n        external\\n        override\\n        only(MANAGER_ROLE)\\n    {\\n\\n        // Locking single ERC721 token\\n        if (depositData.length == 32) {\\n\\n            uint256 tokenId = abi.decode(depositData, (uint256));\\n\\n            // Emitting event that single token is getting locked in predicate\\n            emit LockedMintableERC721(depositor, depositReceiver, rootToken, tokenId);\\n\\n            // Transferring token to this address, which will be\\n            // released when attempted to be unlocked\\n            IMintableERC721(rootToken).safeTransferFrom(depositor, address(this), tokenId);\\n\\n        } else {\\n            // Locking a set a ERC721 token(s)\\n\\n            uint256[] memory tokenIds = abi.decode(depositData, (uint256[]));\\n\\n            // Emitting event that a set of ERC721 tokens are getting lockec\\n            // in this predicate contract\\n            emit LockedMintableERC721Batch(depositor, depositReceiver, rootToken, tokenIds);\\n\\n            // These many tokens are attempted to be deposited\\n            // by user\\n            uint256 length = tokenIds.length;\\n            require(length <= BATCH_LIMIT, \\\"MintableERC721Predicate: EXCEEDS_BATCH_LIMIT\\\");\\n\\n            // Iteratively trying to transfer ERC721 token\\n            // to this predicate address\\n            for (uint256 i; i < length; i++) {\\n\\n                IMintableERC721(rootToken).safeTransferFrom(depositor, address(this), tokenIds[i]);\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n    /**\\n     * @notice Validates log signature, from and to address\\n     * then checks if token already exists on root chain\\n     * if token exits then transfers it to withdrawer\\n     * if token doesn't exit then it is minted\\n     * callable only by manager\\n     * @param rootToken Token which gets withdrawn\\n     * @param log Valid ERC721 burn log from child chain\\n     */\\n    function exitTokens(\\n        address,\\n        address rootToken,\\n        bytes memory log\\n    )\\n        public\\n        override\\n        only(MANAGER_ROLE)\\n    {\\n        RLPReader.RLPItem[] memory logRLPList = log.toRlpItem().toList();\\n        RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList(); // topics\\n\\n        // If it's a simple exit ( with out metadata coming from L2 to L1 )\\n        if(bytes32(logTopicRLPList[0].toUint()) == TRANSFER_EVENT_SIG) {\\n\\n            address withdrawer = address(logTopicRLPList[1].toUint()); // topic1 is from address\\n\\n            require(\\n                address(logTopicRLPList[2].toUint()) == address(0), // topic2 is to address\\n                \\\"MintableERC721Predicate: INVALID_RECEIVER\\\"\\n            );\\n\\n            IMintableERC721 token = IMintableERC721(rootToken);\\n\\n            uint256 tokenId = logTopicRLPList[3].toUint(); // topic3 is tokenId field\\n            if (token.exists(tokenId)) {\\n                token.safeTransferFrom(\\n                    address(this),\\n                    withdrawer,\\n                    tokenId\\n                );\\n            } else {\\n                token.mint(withdrawer, tokenId);\\n            }\\n\\n        } else if (bytes32(logTopicRLPList[0].toUint()) == WITHDRAW_BATCH_EVENT_SIG) { // topic0 is event sig\\n            // If it's a simple batch exit, where a set of\\n            // ERC721s were burnt in child chain with event signature\\n            // looking like `WithdrawnBatch(address indexed user, uint256[] tokenIds);`\\n            //\\n            // @note This doesn't allow transfer of metadata cross chain\\n            // For that check below `else if` block\\n\\n            address withdrawer = address(logTopicRLPList[1].toUint()); // topic1 is from address\\n\\n            // RLP encoded tokenId list\\n            bytes memory logData = logRLPList[2].toBytes();\\n\\n            (uint256[] memory tokenIds) = abi.decode(logData, (uint256[]));\\n            uint256 length = tokenIds.length;\\n\\n            IMintableERC721 token = IMintableERC721(rootToken);\\n\\n            for (uint256 i; i < length; i++) {\\n\\n                uint256 tokenId = tokenIds[i];\\n\\n                // Check if token exists or not\\n                //\\n                // If does, transfer token to withdrawer\\n                if (token.exists(tokenId)) {\\n                    token.safeTransferFrom(\\n                        address(this),\\n                        withdrawer,\\n                        tokenId\\n                    );\\n                } else {\\n                    // If token was minted on L2\\n                    // we'll mint it here, on L1, during\\n                    // exiting from L2\\n                    token.mint(withdrawer, tokenId);\\n                }\\n\\n            }\\n\\n        } else if (bytes32(logTopicRLPList[0].toUint()) == TRANSFER_WITH_METADATA_EVENT_SIG) { \\n            // If this is NFT exit with metadata i.e. URI 👆\\n            //\\n            // Note: If your token is only minted in L2, you can exit\\n            // it with metadata. But if it was minted on L1, it'll be\\n            // simply transferred to withdrawer address. And in that case,\\n            // it's lot better to exit with `Transfer(address,address,uint256)`\\n            // i.e. calling `withdraw` method on L2 contract\\n            // event signature proof, which is defined under first `if` clause\\n            //\\n            // If you've called `withdrawWithMetadata`, you should submit\\n            // proof of event signature `TransferWithMetadata(address,address,uint256,bytes)`\\n\\n            address withdrawer = address(logTopicRLPList[1].toUint()); // topic1 is from address\\n\\n            require(\\n                address(logTopicRLPList[2].toUint()) == address(0), // topic2 is to address\\n                \\\"MintableERC721Predicate: INVALID_RECEIVER\\\"\\n            );\\n\\n            IMintableERC721 token = IMintableERC721(rootToken);\\n\\n            uint256 tokenId = logTopicRLPList[3].toUint(); // topic3 is tokenId field\\n            if (token.exists(tokenId)) {\\n                token.safeTransferFrom(\\n                    address(this),\\n                    withdrawer,\\n                    tokenId\\n                );\\n            } else {\\n                // Minting with metadata received from L2 i.e. emitted\\n                // by event `TransferWithMetadata` during burning\\n                bytes memory logData = logRLPList[2].toBytes();\\n                bytes memory metaData = abi.decode(logData, (bytes));\\n                \\n                token.mint(withdrawer, tokenId, metaData);\\n            }\\n\\n        } else {\\n            // Attempting to exit with some event signature from L2, which is\\n            // not ( yet ) supported by L1 exit manager\\n            revert(\\\"MintableERC721Predicate: INVALID_SIGNATURE\\\");\\n        }\\n        \\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/test/ProxyTestImplStorageLayoutChange.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {Initializable} from \\\"../common/Initializable.sol\\\";\\n\\ncontract ProxyTestImplStorageLayoutChange is Initializable {\\n    uint256 public b;\\n    uint256 public a;\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/test/ProxyTestImpl.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {Initializable} from \\\"../common/Initializable.sol\\\";\\n\\ncontract ProxyTestImpl is Initializable {\\n    uint256 public a = 1;\\n    uint256 public b = 2;\\n    uint256 public ctorInit;\\n\\n    constructor() public {\\n        ctorInit = 3;\\n    }\\n\\n    function init() public initializer {\\n        a = 1;\\n        b = 2;\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/TokenPredicates/MintableERC20Predicate.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {IMintableERC20} from \\\"../RootToken/IMintableERC20.sol\\\";\\nimport {AccessControlMixin} from \\\"../../common/AccessControlMixin.sol\\\";\\nimport {RLPReader} from \\\"../../lib/RLPReader.sol\\\";\\nimport {ITokenPredicate} from \\\"./ITokenPredicate.sol\\\";\\nimport {Initializable} from \\\"../../common/Initializable.sol\\\";\\n\\ncontract MintableERC20Predicate is\\n    ITokenPredicate,\\n    AccessControlMixin,\\n    Initializable\\n{\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    bytes32 public constant TOKEN_TYPE = keccak256(\\\"MintableERC20\\\");\\n    bytes32 public constant TRANSFER_EVENT_SIG = keccak256(\\n        \\\"Transfer(address,address,uint256)\\\"\\n    );\\n\\n    event LockedMintableERC20(\\n        address indexed depositor,\\n        address indexed depositReceiver,\\n        address indexed rootToken,\\n        uint256 amount\\n    );\\n\\n    constructor() public {}\\n\\n    function initialize(address _owner) external initializer {\\n        _setupContractId(\\\"MintableERC20Predicate\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n        _setupRole(MANAGER_ROLE, _owner);\\n    }\\n\\n    /**\\n     * @notice Lock ERC20 tokens for deposit, callable only by manager\\n     * @param depositor Address who wants to deposit tokens\\n     * @param depositReceiver Address (address) who wants to receive tokens on child chain\\n     * @param rootToken Token which gets deposited\\n     * @param depositData ABI encoded amount\\n     */\\n    function lockTokens(\\n        address depositor,\\n        address depositReceiver,\\n        address rootToken,\\n        bytes calldata depositData\\n    ) external override only(MANAGER_ROLE) {\\n        uint256 amount = abi.decode(depositData, (uint256));\\n\\n        emit LockedMintableERC20(depositor, depositReceiver, rootToken, amount);\\n        IMintableERC20(rootToken).transferFrom(\\n            depositor,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Validates log signature, from and to address\\n     * then sends the correct amount to withdrawer\\n     * callable only by manager\\n     * @param rootToken Token which gets withdrawn\\n     * @param log Valid ERC20 burn log from child chain\\n     */\\n    function exitTokens(\\n        address,\\n        address rootToken,\\n        bytes memory log\\n    ) public override only(MANAGER_ROLE) {\\n        RLPReader.RLPItem[] memory logRLPList = log.toRlpItem().toList();\\n        RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList(); // topics\\n\\n        require(\\n            bytes32(logTopicRLPList[0].toUint()) == TRANSFER_EVENT_SIG, // topic0 is `Transfer` event sig\\n            \\\"MintableERC20Predicate: INVALID_SIGNATURE\\\"\\n        );\\n\\n        address withdrawer = address(logTopicRLPList[1].toUint()); // topic1 is `from` address\\n\\n        require(\\n            address(logTopicRLPList[2].toUint()) == address(0), // topic2 is `to` address\\n            \\\"MintableERC20Predicate: INVALID_RECEIVER\\\"\\n        );\\n\\n        IMintableERC20 token = IMintableERC20(rootToken);\\n\\n        uint256 tokenBalance = token.balanceOf(address(this));\\n        uint256 amount = logRLPList[2].toUint();\\n\\n        // Checking whether MintableERC20Predicate has enough balance\\n        // to transfer `amount` to withdrawer or not\\n        //\\n        // If no, it'll mint those extra tokens & transfer `amount`\\n        // to withdrawer\\n        if (tokenBalance < amount) {\\n            token.mint(address(this), amount - tokenBalance);\\n        }\\n\\n        token.transfer(withdrawer, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/RootToken/IMintableERC20.sol\": {\n      \"content\": \"import {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\npragma solidity 0.6.6;\\n\\ninterface IMintableERC20 is IERC20 {\\n    /**\\n     * @notice called by predicate contract to mint tokens while withdrawing\\n     * @dev Should be callable only by MintableERC20Predicate\\n     * Make sure minting is done only by this function\\n     * @param user user address for whom token is being minted\\n     * @param amount amount of token being minted\\n     */\\n    function mint(address user, uint256 amount) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/TokenPredicates/MintableERC1155Predicate.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {IMintableERC1155} from \\\"../RootToken/IMintableERC1155.sol\\\";\\nimport {\\n    ERC1155Receiver\\n} from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol\\\";\\nimport {AccessControlMixin} from \\\"../../common/AccessControlMixin.sol\\\";\\nimport {RLPReader} from \\\"../../lib/RLPReader.sol\\\";\\nimport {ITokenPredicate} from \\\"./ITokenPredicate.sol\\\";\\nimport {Initializable} from \\\"../../common/Initializable.sol\\\";\\n\\ncontract MintableERC1155Predicate is\\n    ITokenPredicate,\\n    ERC1155Receiver,\\n    AccessControlMixin,\\n    Initializable\\n{\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    bytes32 public constant TOKEN_TYPE = keccak256(\\\"MintableERC1155\\\");\\n\\n    bytes32 public constant TRANSFER_SINGLE_EVENT_SIG = keccak256(\\n        \\\"TransferSingle(address,address,address,uint256,uint256)\\\"\\n    );\\n    bytes32 public constant TRANSFER_BATCH_EVENT_SIG = keccak256(\\n        \\\"TransferBatch(address,address,address,uint256[],uint256[])\\\"\\n    );\\n\\n    event LockedBatchMintableERC1155(\\n        address indexed depositor,\\n        address indexed depositReceiver,\\n        address indexed rootToken,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n\\n    constructor() public {}\\n\\n    function initialize(address _owner) external initializer {\\n        _setupContractId(\\\"MintableERC1155Predicate\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n        _setupRole(MANAGER_ROLE, _owner);\\n    }\\n\\n    /**\\n     * @notice rejects single transfer\\n     */\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external override returns (bytes4) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice accepts batch transfer\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external override returns (bytes4) {\\n        return ERC1155Receiver(0).onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @notice Lock ERC1155 tokens for deposit, callable only by manager\\n     * @param depositor Address who wants to deposit tokens\\n     * @param depositReceiver Address (address) who wants to receive tokens on child chain\\n     * @param rootToken Token which gets deposited\\n     * @param depositData ABI encoded id array and amount array\\n     */\\n    function lockTokens(\\n        address depositor,\\n        address depositReceiver,\\n        address rootToken,\\n        bytes calldata depositData\\n    ) external override only(MANAGER_ROLE) {\\n        // forcing batch deposit since supporting both single and batch deposit introduces too much complexity\\n        (\\n            uint256[] memory ids,\\n            uint256[] memory amounts,\\n            bytes memory data\\n        ) = abi.decode(depositData, (uint256[], uint256[], bytes));\\n\\n        emit LockedBatchMintableERC1155(\\n            depositor,\\n            depositReceiver,\\n            rootToken,\\n            ids,\\n            amounts\\n        );\\n        IMintableERC1155(rootToken).safeBatchTransferFrom(\\n            depositor,\\n            address(this),\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n    \\n    // Used when attempting to exit with single token, single amount/ id is converted into\\n    // slice of amounts/ ids\\n    // Generally size is going to be `1` i.e. single element array, but it's kept generic\\n    function makeArrayWithValue(uint256 val, uint size) internal pure returns(uint256[] memory) {\\n        require(\\n            size > 0,\\n            \\\"MintableERC1155Predicate: Invalid resulting array length\\\"\\n        );\\n\\n        uint256[] memory vals = new uint256[](size);\\n\\n        for (uint256 i = 0; i < size; i++) {\\n            vals[i] = val;\\n        }\\n\\n        return vals;\\n    }\\n\\n    /**\\n     * @notice Creates an array of `size` by repeating provided address,\\n     * to be required for passing to batch balance checking function of ERC1155 tokens.\\n     * @param addr Address to be repeated `size` times in resulting array\\n     * @param size Size of resulting array\\n     */\\n    function makeArrayWithAddress(address addr, uint256 size)\\n        internal\\n        pure\\n        returns (address[] memory)\\n    {\\n        require(\\n            addr != address(0),\\n            \\\"MintableERC1155Predicate: Invalid address\\\"\\n        );\\n        require(\\n            size > 0,\\n            \\\"MintableERC1155Predicate: Invalid resulting array length\\\"\\n        );\\n\\n        address[] memory addresses = new address[](size);\\n\\n        for (uint256 i = 0; i < size; i++) {\\n            addresses[i] = addr;\\n        }\\n\\n        return addresses;\\n    }\\n\\n    /**\\n     * @notice Calculates amount of tokens to be minted, by subtracting available\\n     * token balances from amount of tokens to be exited\\n     * @param tokenBalances Token balances this contract holds for some ordered token ids\\n     * @param amountsToBeExited Amount of tokens being exited\\n     */\\n    function calculateAmountsToBeMinted(\\n        uint256[] memory tokenBalances,\\n        uint256[] memory amountsToBeExited\\n    ) internal pure returns (uint256[] memory) {\\n        require(\\n            tokenBalances.length == amountsToBeExited.length,\\n            \\\"MintableERC1155Predicate: Array length mismatch found\\\"\\n        );\\n\\n        uint256[] memory toBeMintedAmounts = new uint256[](\\n            tokenBalances.length\\n        );\\n\\n        // Iteratively calculating amounts of token to be minted\\n        //\\n        // Please note, in some cases it can be 0, but that will not\\n        // be a problem, due to implementation of mint logic for ERC1155\\n        for (uint256 i = 0; i < tokenBalances.length; i++) {\\n            if (tokenBalances[i] < amountsToBeExited[i]) {\\n                toBeMintedAmounts[i] = amountsToBeExited[i] - tokenBalances[i];\\n            }\\n        }\\n\\n        return toBeMintedAmounts;\\n    }\\n\\n    /**\\n     * @notice Validates log signature, from and to address\\n     * then sends the correct tokenId, amount to withdrawer\\n     * callable only by manager\\n     * @param rootToken Token which gets withdrawn\\n     * @param log Valid ERC1155 TransferSingle burn or TransferBatch burn log from child chain\\n     */\\n    function exitTokens(\\n        address,\\n        address rootToken,\\n        bytes memory log\\n    ) public override only(MANAGER_ROLE) {\\n        RLPReader.RLPItem[] memory logRLPList = log.toRlpItem().toList();\\n        RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList(); // topics\\n        bytes memory logData = logRLPList[2].toBytes();\\n\\n        address withdrawer = address(logTopicRLPList[2].toUint()); // topic2 is from address\\n\\n        require(\\n            address(logTopicRLPList[3].toUint()) == address(0), // topic3 is to address\\n            \\\"MintableERC1155Predicate: INVALID_RECEIVER\\\"\\n        );\\n\\n        if (bytes32(logTopicRLPList[0].toUint()) == TRANSFER_SINGLE_EVENT_SIG) {\\n            // topic0 is event sig\\n            (uint256 id, uint256 amount) = abi.decode(\\n                logData,\\n                (uint256, uint256)\\n            );\\n\\n            IMintableERC1155 token = IMintableERC1155(rootToken);\\n            // Currently locked tokens for `id` in this contract\\n            uint256 tokenBalance = token.balanceOf(address(this), id);\\n\\n            // Checking whether MintableERC1155 contract has enough\\n            // tokens locked in to transfer to withdrawer, if not\\n            // it'll mint those tokens for this contract and return\\n            // safely transfer those to withdrawer\\n            if (tokenBalance < amount) {\\n                // @notice We could have done `mint`, but that would require\\n                // us implementing `onERC1155Received`, which we avoid intentionally\\n                // for sake of only supporting batch deposit.\\n                //\\n                // Which is why this transfer is wrapped as single element batch minting\\n                token.mintBatch(address(this), \\n                    makeArrayWithValue(id, 1), \\n                    makeArrayWithValue(amount - tokenBalance, 1), \\n                    bytes(\\\"\\\"));\\n            }\\n\\n            token.safeTransferFrom(\\n                address(this),\\n                withdrawer,\\n                id,\\n                amount,\\n                bytes(\\\"\\\")\\n            );\\n        } else if (\\n            bytes32(logTopicRLPList[0].toUint()) == TRANSFER_BATCH_EVENT_SIG\\n        ) {\\n            (uint256[] memory ids, uint256[] memory amounts) = abi.decode(\\n                logData,\\n                (uint256[], uint256[])\\n            );\\n\\n            IMintableERC1155 token = IMintableERC1155(rootToken);\\n\\n            token.mintBatch(\\n                address(this),\\n                ids,\\n                calculateAmountsToBeMinted(\\n                    token.balanceOfBatch(\\n                        makeArrayWithAddress(address(this), ids.length),\\n                        ids\\n                    ),\\n                    amounts\\n                ),\\n                bytes(\\\"\\\")\\n            );\\n\\n            IMintableERC1155(rootToken).safeBatchTransferFrom(\\n                address(this),\\n                withdrawer,\\n                ids,\\n                amounts,\\n                bytes(\\\"\\\")\\n            );\\n        } else {\\n            revert(\\\"MintableERC1155Predicate: INVALID_WITHDRAW_SIG\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/RootToken/IMintableERC1155.sol\": {\n      \"content\": \"import {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\npragma solidity 0.6.6;\\n\\ninterface IMintableERC1155 is IERC1155 {\\n    /**\\n     * @notice Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     * @dev Should be callable only by MintableERC1155Predicate\\n     * Make sure minting is done only by this function\\n     * @param account user address for whom token is being minted\\n     * @param id token which is being minted\\n     * @param amount amount of token being minted\\n     * @param data extra byte data to be accompanied with minted tokens\\n     */\\n    function mint(address account, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @notice Batched version of singular token minting, where\\n     * for each token in `ids` respective amount to be minted from `amounts`\\n     * array, for address `to`.\\n     * @dev Should be callable only by MintableERC1155Predicate\\n     * Make sure minting is done only by this function\\n     * @param to user address for whom token is being minted\\n     * @param ids tokens which are being minted\\n     * @param amounts amount of each token being minted\\n     * @param data extra byte data to be accompanied with minted tokens\\n     */\\n    function mintBatch(address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    constructor() internal {\\n        _registerInterface(\\n            ERC1155Receiver(address(0)).onERC1155Received.selector ^\\n            ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\\n        );\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/test/MerklePatriciaTest.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {MerklePatriciaProof} from \\\"../lib/MerklePatriciaProof.sol\\\";\\nimport {RLPReader} from \\\"../lib/RLPReader.sol\\\";\\n\\ncontract MerklePatriciaTest {\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    function verify(uint receiptRoot, bytes calldata receipt, bytes calldata receiptProof, bytes calldata branchMask) external pure returns(bool) {\\n\\n        return MerklePatriciaProof.verify(\\n            receipt, // receipt\\n            branchMask, // branchMask\\n            receiptProof, // receiptProof\\n            bytes32(receiptRoot) // receiptRoot\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/TokenPredicates/EtherPredicate.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {AccessControlMixin} from \\\"../../common/AccessControlMixin.sol\\\";\\nimport {RLPReader} from \\\"../../lib/RLPReader.sol\\\";\\nimport {ITokenPredicate} from \\\"./ITokenPredicate.sol\\\";\\nimport {Initializable} from \\\"../../common/Initializable.sol\\\";\\n\\ncontract EtherPredicate is ITokenPredicate, AccessControlMixin, Initializable {\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    bytes32 public constant TOKEN_TYPE = keccak256(\\\"Ether\\\");\\n    bytes32 public constant TRANSFER_EVENT_SIG = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    event LockedEther(\\n        address indexed depositor,\\n        address indexed depositReceiver,\\n        uint256 amount\\n    );\\n\\n    event ExitedEther(\\n        address indexed exitor,\\n        uint256 amount\\n    );\\n\\n    constructor() public {}\\n\\n    function initialize(address _owner) external initializer {\\n        _setupContractId(\\\"EtherPredicate\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n        _setupRole(MANAGER_ROLE, _owner);\\n    }\\n\\n    /**\\n     * @notice Receive Ether to lock for deposit, callable only by manager\\n     */\\n    receive() external payable only(MANAGER_ROLE) {}\\n\\n    /**\\n     * @notice handle ether lock, callable only by manager\\n     * @param depositor Address who wants to deposit tokens\\n     * @param depositReceiver Address (address) who wants to receive tokens on child chain\\n     * @param depositData ABI encoded amount\\n     */\\n    function lockTokens(\\n        address depositor,\\n        address depositReceiver,\\n        address,\\n        bytes calldata depositData\\n    )\\n        external\\n        override\\n        only(MANAGER_ROLE)\\n    {\\n        uint256 amount = abi.decode(depositData, (uint256));\\n        emit LockedEther(depositor, depositReceiver, amount);\\n    }\\n\\n    /**\\n     * @notice Validates log signature, from and to address\\n     * then sends the correct amount to withdrawer\\n     * callable only by manager\\n     * @param log Valid ERC20 burn log from child chain\\n     */\\n    function exitTokens(\\n        address,\\n        address,\\n        bytes memory log\\n    )\\n        public\\n        override\\n        only(MANAGER_ROLE)\\n    {\\n        RLPReader.RLPItem[] memory logRLPList = log.toRlpItem().toList();\\n        RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList(); // topics\\n\\n        require(\\n            bytes32(logTopicRLPList[0].toUint()) == TRANSFER_EVENT_SIG, // topic0 is event sig\\n            \\\"EtherPredicate: INVALID_SIGNATURE\\\"\\n        );\\n\\n        address withdrawer = address(logTopicRLPList[1].toUint()); // topic1 is from address\\n\\n        require(\\n            address(logTopicRLPList[2].toUint()) == address(0), // topic2 is to address\\n            \\\"EtherPredicate: INVALID_RECEIVER\\\"\\n        );\\n\\n        emit ExitedEther(withdrawer, logRLPList[2].toUint());\\n\\n        payable(withdrawer).transfer(logRLPList[2].toUint());\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/tunnel/BaseChildTunnel.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\n\\nimport {AccessControlMixin} from \\\"../common/AccessControlMixin.sol\\\";\\n\\n/**\\n* @notice Mock child tunnel contract to receive and send message from L2\\n*/\\nabstract contract BaseChildTunnel is AccessControlMixin {\\n    bytes32 public constant STATE_SYNCER_ROLE = keccak256(\\\"STATE_SYNCER_ROLE\\\");\\n\\n    // MessageTunnel on L1 will get data from this event\\n    event MessageSent(bytes message);\\n\\n    constructor() internal {\\n      _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n      _setupRole(STATE_SYNCER_ROLE, 0x0000000000000000000000000000000000001001);\\n      _setupContractId(\\\"ChildTunnel\\\");\\n    }\\n\\n    /**\\n     * @notice Receive state sync from matic contracts\\n     * @dev This method will be called by Matic chain internally.\\n     * This is executed without transaction using a system call.\\n     */\\n    function onStateReceive(uint256, bytes memory message) public only(STATE_SYNCER_ROLE) {\\n        _processMessageFromRoot(message);\\n    }\\n\\n    /**\\n     * @notice Emit message that can be received on Root Tunnel\\n     * @dev Call the internal function when need to emit message\\n     * @param message bytes message that will be sent to Root Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToRoot(bytes memory message) internal {\\n        emit MessageSent(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Root Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(bytes memory message) virtual internal;\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/tunnel/ChildTunnel.sol\": {\n      \"content\": \"pragma solidity ^0.6.6;\\n\\nimport {BaseChildTunnel} from \\\"./BaseChildTunnel.sol\\\";\\n\\n\\ncontract ChildTunnel is BaseChildTunnel {\\n    function _processMessageFromRoot(bytes memory message) internal override {\\n      // implement your core logic here\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/test/TestChildTunnel.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {BaseChildTunnel} from \\\"../tunnel/BaseChildTunnel.sol\\\";\\n\\ncontract TestChildTunnel is BaseChildTunnel {\\n    uint256 public number;\\n\\n    bytes32 public constant TYPE1 = keccak256(\\\"TYPE1\\\");\\n    bytes32 public constant TYPE2 = keccak256(\\\"TYPE2\\\");\\n\\n    function _processMessageFromRoot(bytes memory message) internal override {\\n        (bytes32 syncType, uint256 n) = abi.decode(\\n            message,\\n            (bytes32, uint256)\\n        );\\n\\n        if (TYPE1 == syncType) {\\n            number = number + n; // add\\n        } else if (TYPE2 == syncType) {\\n            number = number - n; // sub\\n        }\\n    }\\n\\n    function sendMessage(bytes calldata message) external {\\n        _sendMessageToRoot(message);\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/TokenPredicates/ERC721Predicate.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {IRootERC721} from \\\"../RootToken/IRootERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {RLPReader} from \\\"../../lib/RLPReader.sol\\\";\\nimport {ITokenPredicate} from \\\"./ITokenPredicate.sol\\\";\\nimport {Initializable} from \\\"../../common/Initializable.sol\\\";\\nimport {AccessControlMixin} from \\\"../../common/AccessControlMixin.sol\\\";\\n\\ncontract ERC721Predicate is ITokenPredicate, AccessControlMixin, Initializable, IERC721Receiver {\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    bytes32 public constant TOKEN_TYPE = keccak256(\\\"ERC721\\\");\\n    // keccak256(\\\"Transfer(address,address,uint256)\\\")\\n    bytes32 public constant TRANSFER_EVENT_SIG = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n    // keccak256(\\\"WithdrawnBatch(address,uint256[])\\\")\\n    bytes32 public constant WITHDRAW_BATCH_EVENT_SIG = 0xf871896b17e9cb7a64941c62c188a4f5c621b86800e3d15452ece01ce56073df;\\n    // keccak256(\\\"TransferWithMetadata(address,address,uint256,bytes)\\\")\\n    bytes32 public constant TRANSFER_WITH_METADATA_EVENT_SIG = 0xf94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a14;\\n\\n    // limit batching of tokens due to gas limit restrictions\\n    uint256 public constant BATCH_LIMIT = 20;\\n\\n    event LockedERC721(\\n        address indexed depositor,\\n        address indexed depositReceiver,\\n        address indexed rootToken,\\n        uint256 tokenId\\n    );\\n    event LockedERC721Batch(\\n        address indexed depositor,\\n        address indexed depositReceiver,\\n        address indexed rootToken,\\n        uint256[] tokenIds\\n    );\\n\\n    constructor() public {}\\n\\n    function initialize(address _owner) external initializer {\\n        _setupContractId(\\\"ERC721Predicate\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n        _setupRole(MANAGER_ROLE, _owner);\\n    }\\n\\n    /**\\n     * @notice accepts safe ERC721 transfer\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    )\\n        external\\n        override\\n        returns (bytes4)\\n    {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @notice Lock ERC721 tokens for deposit, callable only by manager\\n     * @param depositor Address who wants to deposit token\\n     * @param depositReceiver Address (address) who wants to receive token on child chain\\n     * @param rootToken Token which gets deposited\\n     * @param depositData ABI encoded tokenId\\n     */\\n    function lockTokens(\\n        address depositor,\\n        address depositReceiver,\\n        address rootToken,\\n        bytes calldata depositData\\n    )\\n        external\\n        override\\n        only(MANAGER_ROLE)\\n    {\\n        // deposit single\\n        if (depositData.length == 32) {\\n            uint256 tokenId = abi.decode(depositData, (uint256));\\n            emit LockedERC721(depositor, depositReceiver, rootToken, tokenId);\\n            IRootERC721(rootToken).safeTransferFrom(depositor, address(this), tokenId);\\n\\n        // deposit batch\\n        } else {\\n            uint256[] memory tokenIds = abi.decode(depositData, (uint256[]));\\n            emit LockedERC721Batch(depositor, depositReceiver, rootToken, tokenIds);\\n            uint256 length = tokenIds.length;\\n            require(length <= BATCH_LIMIT, \\\"ERC721Predicate: EXCEEDS_BATCH_LIMIT\\\");\\n            for (uint256 i; i < length; i++) {\\n                IRootERC721(rootToken).safeTransferFrom(depositor, address(this), tokenIds[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Validates log signature, from and to address\\n     * then sends the correct tokenId to withdrawer\\n     * callable only by manager\\n     * @param rootToken Token which gets withdrawn\\n     * @param log Valid ERC721 burn log from child chain\\n     */\\n    function exitTokens(\\n        address,\\n        address rootToken,\\n        bytes memory log\\n    )\\n        public\\n        override\\n        only(MANAGER_ROLE)\\n    {\\n        RLPReader.RLPItem[] memory logRLPList = log.toRlpItem().toList();\\n        RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList(); // topics\\n        address withdrawer = address(logTopicRLPList[1].toUint()); // topic1 is from address\\n\\n        if (bytes32(logTopicRLPList[0].toUint()) == TRANSFER_EVENT_SIG) { // topic0 is event sig\\n            require(\\n                address(logTopicRLPList[2].toUint()) == address(0), // topic2 is to address\\n                \\\"ERC721Predicate: INVALID_RECEIVER\\\"\\n            );\\n\\n            IRootERC721(rootToken).safeTransferFrom(\\n                address(this),\\n                withdrawer,\\n                logTopicRLPList[3].toUint() // topic3 is tokenId field\\n            );\\n\\n        } else if (bytes32(logTopicRLPList[0].toUint()) == WITHDRAW_BATCH_EVENT_SIG) { // topic0 is event sig\\n            bytes memory logData = logRLPList[2].toBytes();\\n            (uint256[] memory tokenIds) = abi.decode(logData, (uint256[])); // data is tokenId list\\n            uint256 length = tokenIds.length;\\n            for (uint256 i; i < length; i++) {\\n                IRootERC721(rootToken).safeTransferFrom(address(this), withdrawer, tokenIds[i]);\\n            }\\n\\n        } else if (bytes32(logTopicRLPList[0].toUint()) == TRANSFER_WITH_METADATA_EVENT_SIG) { \\n            // If this is when NFT exit is done with arbitrary metadata on L2\\n\\n            require(\\n                address(logTopicRLPList[2].toUint()) == address(0), // topic2 is to address\\n                \\\"ERC721Predicate: INVALID_RECEIVER\\\"\\n            );\\n\\n            IRootERC721 token = IRootERC721(rootToken);\\n            uint256 tokenId = logTopicRLPList[3].toUint(); // topic3 is tokenId field\\n\\n            token.safeTransferFrom(address(this), withdrawer, tokenId);\\n            // This function will be invoked for passing arbitrary\\n            // metadata, obtained from event emitted in L2, to\\n            // L1 ERC721, so that it can decode & do further processing\\n            //\\n            // @note Make sure you've implemented this method\\n            // if you're interested in exiting with metadata\\n            bytes memory logData = logRLPList[2].toBytes();\\n            bytes memory metaData = abi.decode(logData, (bytes));\\n\\n            token.setTokenMetadata(tokenId, metaData);\\n\\n        } else {\\n            revert(\\\"ERC721Predicate: INVALID_SIGNATURE\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/RootToken/IRootERC721.sol\": {\n      \"content\": \"import {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\npragma solidity 0.6.6;\\n\\ninterface IRootERC721 is IERC721 {\\n\\n    // Make sure you implement this method is root ERC721\\n    // contract when you're interested in transferring\\n    // metadata from L2 to L1\\n    function setTokenMetadata(uint256 tokenId, bytes calldata data) external;\\n\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/RootToken/DummyERC721.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {AccessControlMixin} from \\\"../../common/AccessControlMixin.sol\\\";\\nimport {NativeMetaTransaction} from \\\"../../common/NativeMetaTransaction.sol\\\";\\nimport {IRootERC721} from \\\"./IRootERC721.sol\\\";\\nimport {ContextMixin} from \\\"../../common/ContextMixin.sol\\\";\\n\\ncontract DummyERC721 is\\n    ERC721,\\n    AccessControlMixin,\\n    NativeMetaTransaction,\\n    IRootERC721,\\n    ContextMixin\\n{\\n    bytes32 public constant PREDICATE_ROLE = keccak256(\\\"PREDICATE_ROLE\\\");\\n    constructor(string memory name_, string memory symbol_)\\n        public\\n        ERC721(name_, symbol_)\\n    {\\n        _setupContractId(\\\"DummyERC721\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(PREDICATE_ROLE, _msgSender());\\n        _initializeEIP712(name_);\\n    }\\n\\n    function mint(uint256 tokenId) public {\\n        _mint(_msgSender(), tokenId);\\n    }\\n\\n    /**\\n     * If you're attempting to bring metadata associated with token\\n     * from L2 to L1, you must implement this method\\n     *\\n     * To be invoked when attempting to exit ERC721 with metadata from L2\\n     *\\n     * `data` is nothing but arbitrary byte array which\\n     * is brought in L1, by event emitted in L2, during withdraw\\n     *\\n     * Make sure this method is always callable by Predicate contract\\n     * who will invoke it when attempting to exit with metadata\\n     */\\n    function setTokenMetadata(uint256 tokenId, bytes calldata data) external override only(PREDICATE_ROLE) {\\n        // This function should decode metadata obtained from L2\\n        // and attempt to set it for this `tokenId`\\n        //\\n        // Following is just a default implementation, feel\\n        // free to define your own encoding/ decoding scheme\\n        // for L2 -> L1 token metadata transfer\\n        string memory uri = abi.decode(data, (string));\\n\\n        _setTokenURI(tokenId, uri);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        override\\n        view\\n        returns (address payable sender)\\n    {\\n        return ContextMixin.msgSender();\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155MetadataURI.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\\n     *\\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    /*\\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor (string memory uri_) public {\\n        _setURI(uri_);\\n\\n        // register the supported interfaces to conform to ERC1155 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155);\\n\\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) external view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][from] = _balances[id][from].sub(amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][to] = _balances[id][to].add(amount);\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            _balances[id][from] = _balances[id][from].sub(\\n                amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            _balances[id][to] = _balances[id][to].add(amount);\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] = _balances[id][account].add(amount);\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        _balances[id][account] = _balances[id][account].sub(\\n            amount,\\n            \\\"ERC1155: burn amount exceeds balance\\\"\\n        );\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\\n                amounts[i],\\n                \\\"ERC1155: burn amount exceeds balance\\\"\\n            );\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/RootToken/DummyMintableERC1155.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {ERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport {IMintableERC1155} from \\\"./IMintableERC1155.sol\\\";\\nimport {NativeMetaTransaction} from \\\"../../common/NativeMetaTransaction.sol\\\";\\nimport {ContextMixin} from \\\"../../common/ContextMixin.sol\\\";\\nimport {AccessControlMixin} from \\\"../../common/AccessControlMixin.sol\\\";\\n\\ncontract DummyMintableERC1155 is\\n    ERC1155,\\n    AccessControlMixin,\\n    NativeMetaTransaction,\\n    ContextMixin,\\n    IMintableERC1155\\n{\\n    bytes32 public constant PREDICATE_ROLE = keccak256(\\\"PREDICATE_ROLE\\\");\\n\\n    constructor(string memory uri_) public ERC1155(uri_) {\\n        _setupContractId(\\\"DummyMintableERC1155\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(PREDICATE_ROLE, _msgSender());\\n\\n        _initializeEIP712(uri_);\\n    }\\n\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external override only(PREDICATE_ROLE) {\\n        _mint(account, id, amount, data);\\n    }\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external override only(PREDICATE_ROLE) {\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        override\\n        view\\n        returns (address payable sender)\\n    {\\n        return ContextMixin.msgSender();\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/RootToken/DummyMintableERC20.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IMintableERC20} from \\\"./IMintableERC20.sol\\\";\\nimport {NativeMetaTransaction} from \\\"../../common/NativeMetaTransaction.sol\\\";\\nimport {ContextMixin} from \\\"../../common/ContextMixin.sol\\\";\\nimport {AccessControlMixin} from \\\"../../common/AccessControlMixin.sol\\\";\\n\\ncontract DummyMintableERC20 is\\n    ERC20,\\n    AccessControlMixin,\\n    NativeMetaTransaction,\\n    ContextMixin,\\n    IMintableERC20\\n{\\n    bytes32 public constant PREDICATE_ROLE = keccak256(\\\"PREDICATE_ROLE\\\");\\n\\n    constructor(string memory name_, string memory symbol_)\\n        public\\n        ERC20(name_, symbol_)\\n    {\\n        _setupContractId(\\\"DummyMintableERC20\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(PREDICATE_ROLE, _msgSender());\\n\\n        _mint(_msgSender(), 10**10 * (10**18));\\n        _initializeEIP712(name_);\\n    }\\n\\n    /**\\n     * @dev See {IMintableERC20-mint}.\\n     */\\n    function mint(address user, uint256 amount) external override only(PREDICATE_ROLE) {\\n        _mint(user, amount);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        override\\n        view\\n        returns (address payable sender)\\n    {\\n        return ContextMixin.msgSender();\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/test/PotatoMigration/RootPotatoMigrator.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../root/StateSender/IStateSender.sol\\\";\\nimport \\\"../../root/RootChainManager/IRootChainManager.sol\\\";\\n\\n// This contract enables deposit and plant deom single tx on ethereum chain\\n// First potatoes are transferred to this contract\\n// Then they are deposited to ChildPotatoMigrator contract\\n// Then a custom state sync is sent to ChildPotatoMigrator, using this the potatoes will be planted on matic chain\\ncontract RootPotatoMigrator {\\n  IStateSender stateSender;\\n  IERC20 potato;\\n  IRootChainManager rootChainManager;\\n  address erc20Predicate;\\n  address childPotatoMigrator;\\n\\n  constructor(\\n    address stateSender_,\\n    address potato_,\\n    address rootChainManager_,\\n    address erc20Predicate_,\\n    address childPotatoMigrator_\\n  ) public {\\n    stateSender = IStateSender(stateSender_);\\n    potato = IERC20(potato_);\\n    rootChainManager = IRootChainManager(rootChainManager_);\\n    erc20Predicate = erc20Predicate_;\\n    childPotatoMigrator = childPotatoMigrator_;\\n  }\\n\\n  function plantOnChildFarm(uint amount) external {\\n    potato.transferFrom(\\n      msg.sender,\\n      address(this),\\n      amount\\n    );\\n\\n    potato.approve(erc20Predicate, amount);\\n\\n    rootChainManager.depositFor(\\n      childPotatoMigrator,\\n      address(potato),\\n      abi.encode(amount)\\n    );\\n\\n    stateSender.syncState(\\n      childPotatoMigrator,\\n      abi.encode(msg.sender, amount)\\n    );\\n  }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/StateSender/DummyStateSender.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {IStateSender} from \\\"../StateSender/IStateSender.sol\\\";\\n\\n/**\\n* @notice Dummy State Sender contract to simulate plasma state sender while testing\\n*/\\ncontract DummyStateSender is IStateSender {\\n    /**\\n     * @notice Event emitted when when syncState is called\\n     * @dev Heimdall bridge listens to this event and sends the data to receiver contract on child chain\\n     * @param id Id of the sync, increamented for each event in case of actual state sender contract\\n     * @param contractAddress the contract receiving data on child chain\\n     * @param data bytes data to be sent\\n     */\\n    event StateSynced(\\n        uint256 indexed id,\\n        address indexed contractAddress,\\n        bytes data\\n    );\\n\\n    /**\\n     * @notice called to send data to child chain\\n     * @dev sender and receiver contracts need to be registered in case of actual state sender contract\\n     * @param receiver the contract receiving data on child chain\\n     * @param data bytes data to be sent\\n     */\\n    function syncState(address receiver, bytes calldata data) external override {\\n        emit StateSynced(1, receiver, data);\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/MockCheckpointManager.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {ICheckpointManager} from \\\"./ICheckpointManager.sol\\\";\\n\\n/**\\n* @notice Mock Checkpoint Manager contract to simulate plasma checkpoints while testing\\n*/\\ncontract MockCheckpointManager is ICheckpointManager {\\n    using SafeMath for uint256;\\n\\n    uint256 public currentCheckpointNumber = 0;\\n\\n    function setCheckpoint(bytes32 rootHash, uint256 start, uint256 end) public {\\n        HeaderBlock memory headerBlock = HeaderBlock({\\n            root: rootHash,\\n            start: start,\\n            end: end,\\n            createdAt: now,\\n            proposer: msg.sender\\n        });\\n\\n        currentCheckpointNumber = currentCheckpointNumber.add(1);\\n        headerBlocks[currentCheckpointNumber] = headerBlock;\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/test/PotatoMigration/ChildPotatoMigrator.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../child/IStateReceiver.sol\\\";\\nimport \\\"./ChildPotatoFarm.sol\\\";\\n\\n// This contract receives the deposit of potatoes from pos bridge\\n// then plants the potatoes for user using custom state sync\\ncontract ChildPotatoMigrator is IStateReceiver {\\n  IERC20 potato;\\n  ChildPotatoFarm farm;\\n  constructor(address potato_, address farm_) public {\\n    potato = IERC20(potato_);\\n    farm = ChildPotatoFarm(farm_);\\n  }\\n\\n  function onStateReceive(uint, bytes calldata data) external override {\\n    (address user, uint amount) = abi.decode(data, (address, uint));\\n    potato.approve(address(farm), amount);\\n    farm.plantFor(user, amount);\\n  }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/child/IStateReceiver.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\ninterface IStateReceiver {\\n    function onStateReceive(uint256 id, bytes calldata data) external;\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/test/PotatoMigration/ChildPotatoFarm.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// This is where potatoes are planted to earn harvest\\ncontract ChildPotatoFarm {\\n  IERC20 potato;\\n  mapping(address => uint) public plantedAmount;\\n\\n  constructor(address potato_) public {\\n    potato = IERC20(potato_);\\n  }\\n\\n  function plantFor(address user, uint amount) external {\\n    plantedAmount[user] += amount;\\n    potato.transferFrom(msg.sender, address(this), amount);\\n  }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/child/ChildChainManager/ChildChainManager.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IChildChainManager} from \\\"./IChildChainManager.sol\\\";\\nimport {IChildToken} from \\\"../ChildToken/IChildToken.sol\\\";\\nimport {Initializable} from \\\"../../common/Initializable.sol\\\";\\nimport {AccessControlMixin} from \\\"../../common/AccessControlMixin.sol\\\";\\nimport {IStateReceiver} from \\\"../IStateReceiver.sol\\\";\\n\\n\\ncontract ChildChainManager is\\n    IChildChainManager,\\n    Initializable,\\n    AccessControlMixin,\\n    IStateReceiver\\n{\\n    bytes32 public constant DEPOSIT = keccak256(\\\"DEPOSIT\\\");\\n    bytes32 public constant MAP_TOKEN = keccak256(\\\"MAP_TOKEN\\\");\\n    bytes32 public constant MAPPER_ROLE = keccak256(\\\"MAPPER_ROLE\\\");\\n    bytes32 public constant STATE_SYNCER_ROLE = keccak256(\\\"STATE_SYNCER_ROLE\\\");\\n\\n    mapping(address => address) public rootToChildToken;\\n    mapping(address => address) public childToRootToken;\\n\\n    function initialize(address _owner) external initializer {\\n        _setupContractId(\\\"ChildChainManager\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n        _setupRole(MAPPER_ROLE, _owner);\\n        _setupRole(STATE_SYNCER_ROLE, _owner);\\n    }\\n\\n    /**\\n     * @notice Map a token to enable its movement via the PoS Portal, callable only by mappers\\n     * Normally mapping should happen automatically using state sync\\n     * This function should be used only while initial deployment when state sync is not registrered or if it fails\\n     * @param rootToken address of token on root chain\\n     * @param childToken address of token on child chain\\n     */\\n    function mapToken(address rootToken, address childToken)\\n        external\\n        override\\n        only(MAPPER_ROLE)\\n    {\\n        _mapToken(rootToken, childToken);\\n    }\\n\\n    /**\\n     * @notice Receive state sync data from root chain, only callable by state syncer\\n     * @dev state syncing mechanism is used for both depositing tokens and mapping them\\n     * @param data bytes data from RootChainManager contract\\n     * `data` is made up of bytes32 `syncType` and bytes `syncData`\\n     * `syncType` determines if it is deposit or token mapping\\n     * in case of token mapping, `syncData` is encoded address `rootToken`, address `childToken` and bytes32 `tokenType`\\n     * in case of deposit, `syncData` is encoded address `user`, address `rootToken` and bytes `depositData`\\n     * `depositData` is token specific data (amount in case of ERC20). It is passed as is to child token\\n     */\\n    function onStateReceive(uint256, bytes calldata data)\\n        external\\n        override\\n        only(STATE_SYNCER_ROLE)\\n    {\\n        (bytes32 syncType, bytes memory syncData) = abi.decode(\\n            data,\\n            (bytes32, bytes)\\n        );\\n\\n        if (syncType == DEPOSIT) {\\n            _syncDeposit(syncData);\\n        } else if (syncType == MAP_TOKEN) {\\n            (address rootToken, address childToken, ) = abi.decode(\\n                syncData,\\n                (address, address, bytes32)\\n            );\\n            _mapToken(rootToken, childToken);\\n        } else {\\n            revert(\\\"ChildChainManager: INVALID_SYNC_TYPE\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Clean polluted token mapping\\n     * @param rootToken address of token on root chain. Since rename token was introduced later stage,\\n     * clean method is used to clean pollulated mapping\\n     */\\n    function cleanMapToken(\\n        address rootToken,\\n        address childToken\\n    ) external override only(MAPPER_ROLE) {\\n        rootToChildToken[rootToken] = address(0);\\n        childToRootToken[childToken] = address(0);\\n\\n        emit TokenMapped(rootToken, childToken);\\n    }\\n\\n    function _mapToken(address rootToken, address childToken) private {\\n        address oldChildToken = rootToChildToken[rootToken];\\n        address oldRootToken = childToRootToken[childToken];\\n\\n        if (rootToChildToken[oldRootToken] != address(0)) {\\n            rootToChildToken[oldRootToken] = address(0);\\n        }\\n\\n        if (childToRootToken[oldChildToken] != address(0)) {\\n            childToRootToken[oldChildToken] = address(0);\\n        }\\n\\n        rootToChildToken[rootToken] = childToken;\\n        childToRootToken[childToken] = rootToken;\\n\\n        emit TokenMapped(rootToken, childToken);\\n    }\\n\\n    function _syncDeposit(bytes memory syncData) private {\\n        (address user, address rootToken, bytes memory depositData) = abi\\n            .decode(syncData, (address, address, bytes));\\n        address childTokenAddress = rootToChildToken[rootToken];\\n        require(\\n            childTokenAddress != address(0x0),\\n            \\\"ChildChainManager: TOKEN_NOT_MAPPED\\\"\\n        );\\n        IChildToken childTokenContract = IChildToken(childTokenAddress);\\n        childTokenContract.deposit(user, depositData);\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/child/ChildChainManager/IChildChainManager.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\ninterface IChildChainManager {\\n    event TokenMapped(address indexed rootToken, address indexed childToken);\\n\\n    function mapToken(address rootToken, address childToken) external;\\n    function cleanMapToken(address rootToken, address childToken) external;\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/child/ChildToken/IChildToken.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\ninterface IChildToken {\\n    function deposit(address user, bytes calldata depositData) external;\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/child/ChildToken/UpgradeableChildERC20/UChildERC20.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {ERC20} from \\\"./ERC20.sol\\\";\\nimport {AccessControlMixin} from \\\"../../../common/AccessControlMixin.sol\\\";\\nimport {IChildToken} from \\\"../IChildToken.sol\\\";\\nimport {NativeMetaTransaction} from \\\"../../../common/NativeMetaTransaction.sol\\\";\\nimport {ContextMixin} from \\\"../../../common/ContextMixin.sol\\\";\\n\\n\\ncontract UChildERC20 is\\n    ERC20,\\n    IChildToken,\\n    AccessControlMixin,\\n    NativeMetaTransaction,\\n    ContextMixin\\n{\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\n\\n    constructor() public ERC20(\\\"\\\", \\\"\\\") {}\\n\\n    /**\\n     * @notice Initialize the contract after it has been proxified\\n     * @dev meant to be called once immediately after deployment\\n     */\\n    function initialize(\\n        string calldata name_,\\n        string calldata symbol_,\\n        uint8 decimals_,\\n        address childChainManager\\n    )\\n        external\\n        initializer\\n    {\\n        setName(name_);\\n        setSymbol(symbol_);\\n        setDecimals(decimals_);\\n        _setupContractId(string(abi.encodePacked(\\\"Child\\\", symbol_)));\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(DEPOSITOR_ROLE, childChainManager);\\n        _initializeEIP712(name_);\\n    }\\n\\n    // This is to support Native meta transactions\\n    // never use msg.sender directly, use _msgSender() instead\\n    function _msgSender()\\n        internal\\n        override\\n        view\\n        returns (address payable sender)\\n    {\\n        return ContextMixin.msgSender();\\n    }\\n\\n    function changeName(string calldata name_) external only(DEFAULT_ADMIN_ROLE) {\\n        setName(name_);\\n        _setDomainSeperator(name_);\\n    }\\n\\n    /**\\n     * @notice called when token is deposited on root chain\\n     * @dev Should be callable only by ChildChainManager\\n     * Should handle deposit by minting the required amount for user\\n     * Make sure minting is done only by this function\\n     * @param user user address for whom deposit is being done\\n     * @param depositData abi encoded amount\\n     */\\n    function deposit(address user, bytes calldata depositData)\\n        external\\n        override\\n        only(DEPOSITOR_ROLE)\\n    {\\n        uint256 amount = abi.decode(depositData, (uint256));\\n        _mint(user, amount);\\n    }\\n\\n    /**\\n     * @notice called when user wants to withdraw tokens back to root chain\\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\n     * @param amount amount of tokens to withdraw\\n     */\\n    function withdraw(uint256 amount) external {\\n        _burn(_msgSender(), amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/child/ChildToken/UpgradeableChildERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * Modified openzeppelin implemtation to add setters for name, symbol and decimals.\\n * This was needed because the variables cannot be set in constructor as the contract is upgradeable.\\n */\\n\\n/**\\n * @dev openzeppelin Implementation of the {IERC20} interface.\\n *\\n * Modified to add setters for name, symbol and decimals. This was needed\\n * because\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function setName(string memory newName) internal {\\n      _name = newName;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function setSymbol(string memory newSymbol) internal {\\n      _symbol = newSymbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function setDecimals(uint8 newDecimals) internal {\\n      _decimals = newDecimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\"\n    },\n    \"contracts/Libraries/matic/test/TestUChildERC20.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {UChildERC20} from \\\"../child/ChildToken/UpgradeableChildERC20/UChildERC20.sol\\\";\\n\\ncontract TestUChildERC20 is UChildERC20 {\\n    function magic() external pure returns (string memory) {\\n      return \\\"magic\\\";\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/TokenPredicates/ERC20Predicate.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {AccessControlMixin} from \\\"../../common/AccessControlMixin.sol\\\";\\nimport {RLPReader} from \\\"../../lib/RLPReader.sol\\\";\\nimport {ITokenPredicate} from \\\"./ITokenPredicate.sol\\\";\\nimport {Initializable} from \\\"../../common/Initializable.sol\\\";\\n\\ncontract ERC20Predicate is ITokenPredicate, AccessControlMixin, Initializable {\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    bytes32 public constant TOKEN_TYPE = keccak256(\\\"ERC20\\\");\\n    bytes32 public constant TRANSFER_EVENT_SIG = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    event LockedERC20(\\n        address indexed depositor,\\n        address indexed depositReceiver,\\n        address indexed rootToken,\\n        uint256 amount\\n    );\\n\\n    constructor() public {}\\n\\n    function initialize(address _owner) external initializer {\\n        _setupContractId(\\\"ERC20Predicate\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n        _setupRole(MANAGER_ROLE, _owner);\\n    }\\n\\n    /**\\n     * @notice Lock ERC20 tokens for deposit, callable only by manager\\n     * @param depositor Address who wants to deposit tokens\\n     * @param depositReceiver Address (address) who wants to receive tokens on child chain\\n     * @param rootToken Token which gets deposited\\n     * @param depositData ABI encoded amount\\n     */\\n    function lockTokens(\\n        address depositor,\\n        address depositReceiver,\\n        address rootToken,\\n        bytes calldata depositData\\n    )\\n        external\\n        override\\n        only(MANAGER_ROLE)\\n    {\\n        uint256 amount = abi.decode(depositData, (uint256));\\n        emit LockedERC20(depositor, depositReceiver, rootToken, amount);\\n        IERC20(rootToken).safeTransferFrom(depositor, address(this), amount);\\n    }\\n\\n    /**\\n     * @notice Validates log signature, from and to address\\n     * then sends the correct amount to withdrawer\\n     * callable only by manager\\n     * @param rootToken Token which gets withdrawn\\n     * @param log Valid ERC20 burn log from child chain\\n     */\\n    function exitTokens(\\n        address,\\n        address rootToken,\\n        bytes memory log\\n    )\\n        public\\n        override\\n        only(MANAGER_ROLE)\\n    {\\n        RLPReader.RLPItem[] memory logRLPList = log.toRlpItem().toList();\\n        RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList(); // topics\\n\\n        require(\\n            bytes32(logTopicRLPList[0].toUint()) == TRANSFER_EVENT_SIG, // topic0 is event sig\\n            \\\"ERC20Predicate: INVALID_SIGNATURE\\\"\\n        );\\n\\n        address withdrawer = address(logTopicRLPList[1].toUint()); // topic1 is from address\\n\\n        require(\\n            address(logTopicRLPList[2].toUint()) == address(0), // topic2 is to address\\n            \\\"ERC20Predicate: INVALID_RECEIVER\\\"\\n        );\\n\\n        IERC20(rootToken).safeTransfer(\\n            withdrawer,\\n            logRLPList[2].toUint() // log data field\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/test/MockLink.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nabstract contract ERC677Receiver {\\n    function onTokenTransfer(\\n        address _sender,\\n        uint256 _value,\\n        bytes memory _data\\n    ) public virtual;\\n}\\n\\ncontract MockLink is ERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\\n\\n    constructor() public ERC20(\\\"MockLink\\\", \\\"LINK\\\") {\\n        _mint(msg.sender, 100 * 10**18);\\n    }\\n\\n    function transferAndCall(\\n        address _to,\\n        uint256 _value,\\n        bytes memory _data\\n    ) public virtual returns (bool success) {\\n        super.transfer(_to, _value);\\n        emit Transfer(msg.sender, _to, _value, _data);\\n        if (isContract(_to)) {\\n            contractFallback(_to, _value, _data);\\n        }\\n        return true;\\n    }\\n\\n    function isContract(address _addr) private view returns (bool hasCode) {\\n        uint256 length;\\n        assembly {\\n            length := extcodesize(_addr)\\n        }\\n        return length > 0;\\n    }\\n\\n    function contractFallback(\\n        address _to,\\n        uint256 _value,\\n        bytes memory _data\\n    ) private {\\n        ERC677Receiver receiver = ERC677Receiver(_to);\\n        receiver.onTokenTransfer(msg.sender, _value, _data);\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/test/PotatoMigration/RootPotatoToken.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n// These are the potatoes on Ethereum chain\\ncontract RootPotatoToken is ERC20 {\\n    constructor() public ERC20(\\\"Potato\\\", \\\"PTT\\\") {}\\n\\n    function mint(uint256 amount) public {\\n        _mint(msg.sender, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/RootToken/DummyERC20.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {NativeMetaTransaction} from \\\"../../common/NativeMetaTransaction.sol\\\";\\nimport {ContextMixin} from \\\"../../common/ContextMixin.sol\\\";\\n\\ncontract DummyERC20 is\\n    ERC20,\\n    NativeMetaTransaction,\\n    ContextMixin\\n{\\n    constructor(string memory name_, string memory symbol_)\\n        public\\n        ERC20(name_, symbol_)\\n    {\\n        uint256 amount = 10**10 * (10**18);\\n        _mint(_msgSender(), amount);\\n        _initializeEIP712(name_);\\n    }\\n\\n    function mint(uint256 amount) public {\\n        _mint(_msgSender(), amount);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        override\\n        view\\n        returns (address payable sender)\\n    {\\n        return ContextMixin.msgSender();\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/child/ChildToken/ChildMintableERC20.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {AccessControlMixin} from \\\"../../common/AccessControlMixin.sol\\\";\\nimport {IChildToken} from \\\"./IChildToken.sol\\\";\\nimport {NativeMetaTransaction} from \\\"../../common/NativeMetaTransaction.sol\\\";\\nimport {ContextMixin} from \\\"../../common/ContextMixin.sol\\\";\\n\\n\\ncontract ChildMintableERC20 is\\n    ERC20,\\n    IChildToken,\\n    AccessControlMixin,\\n    NativeMetaTransaction,\\n    ContextMixin\\n{\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_,\\n        address childChainManager\\n    ) public ERC20(name_, symbol_) {\\n        _setupContractId(\\\"ChildMintableERC20\\\");\\n        _setupDecimals(decimals_);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(DEPOSITOR_ROLE, childChainManager);\\n        _initializeEIP712(name_);\\n    }\\n\\n    // This is to support Native meta transactions\\n    // never use msg.sender directly, use _msgSender() instead\\n    function _msgSender()\\n        internal\\n        override\\n        view\\n        returns (address payable sender)\\n    {\\n        return ContextMixin.msgSender();\\n    }\\n\\n    /**\\n     * @notice called when token is deposited on root chain\\n     * @dev Should be callable only by ChildChainManager\\n     * Should handle deposit by minting the required amount for user\\n     * Make sure minting is done only by this function\\n     * @param user user address for whom deposit is being done\\n     * @param depositData abi encoded amount\\n     */\\n    function deposit(address user, bytes calldata depositData)\\n        external\\n        override\\n        only(DEPOSITOR_ROLE)\\n    {\\n        uint256 amount = abi.decode(depositData, (uint256));\\n        _mint(user, amount);\\n    }\\n\\n    /**\\n     * @notice called when user wants to withdraw tokens back to root chain\\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\n     * @param amount amount of tokens to withdraw\\n     */\\n    function withdraw(uint256 amount) external {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @notice Example function to handle minting tokens on matic chain\\n     * @dev Minting can be done as per requirement,\\n     * This implementation allows only admin to mint tokens but it can be changed as per requirement\\n     * @param user user for whom tokens are being minted\\n     * @param amount amount of token to mint\\n     */\\n    function mint(address user, uint256 amount) public only(DEFAULT_ADMIN_ROLE) {\\n        _mint(user, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/child/ChildToken/ChildERC20.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {AccessControlMixin} from \\\"../../common/AccessControlMixin.sol\\\";\\nimport {IChildToken} from \\\"./IChildToken.sol\\\";\\nimport {NativeMetaTransaction} from \\\"../../common/NativeMetaTransaction.sol\\\";\\nimport {ContextMixin} from \\\"../../common/ContextMixin.sol\\\";\\n\\n\\ncontract ChildERC20 is\\n    ERC20,\\n    IChildToken,\\n    AccessControlMixin,\\n    NativeMetaTransaction,\\n    ContextMixin\\n{\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_,\\n        address childChainManager\\n    ) public ERC20(name_, symbol_) {\\n        _setupContractId(\\\"ChildERC20\\\");\\n        _setupDecimals(decimals_);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(DEPOSITOR_ROLE, childChainManager);\\n        _initializeEIP712(name_);\\n    }\\n\\n    // This is to support Native meta transactions\\n    // never use msg.sender directly, use _msgSender() instead\\n    function _msgSender()\\n        internal\\n        override\\n        view\\n        returns (address payable sender)\\n    {\\n        return ContextMixin.msgSender();\\n    }\\n\\n    /**\\n     * @notice called when token is deposited on root chain\\n     * @dev Should be callable only by ChildChainManager\\n     * Should handle deposit by minting the required amount for user\\n     * Make sure minting is done only by this function\\n     * @param user user address for whom deposit is being done\\n     * @param depositData abi encoded amount\\n     */\\n    function deposit(address user, bytes calldata depositData)\\n        external\\n        override\\n        only(DEPOSITOR_ROLE)\\n    {\\n        uint256 amount = abi.decode(depositData, (uint256));\\n        _mint(user, amount);\\n    }\\n\\n    /**\\n     * @notice called when user wants to withdraw tokens back to root chain\\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\n     * @param amount amount of tokens to withdraw\\n     */\\n    function withdraw(uint256 amount) external {\\n        _burn(_msgSender(), amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/test/PotatoMigration/ChildPotatoToken.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"../../child/ChildToken/ChildERC20.sol\\\";\\n\\n// These are the potatoes on Matic chain\\ncontract ChildPotatoToken is ChildERC20 {\\n  constructor(address childChainManager) public ChildERC20(\\\"Potato\\\", \\\"PTT\\\", 18, childChainManager) {}\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/child/ChildToken/MaticWETH.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {ChildERC20} from \\\"./ChildERC20.sol\\\";\\n\\ncontract MaticWETH is ChildERC20 {\\n    constructor(address childChainManager) public ChildERC20(\\\"Wrapped Ether\\\", \\\"WETH\\\", 18, childChainManager) {}\\n}\\n\"\n    },\n    \"contracts/CryptOrchidERC721/CryptOrchidERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.6 <0.9.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/presets/ERC721PresetMinterPauserAutoId.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"../Libraries/CurrentTime.sol\\\";\\n\\ncontract CryptOrchidERC721 is ERC721PresetMinterPauserAutoId, Ownable, VRFConsumerBase, CurrentTime {\\n    using SafeMathChainlink for uint256;\\n    using Strings for string;\\n    using Counters for Counters.Counter;\\n\\n    struct CryptOrchid {\\n        string species;\\n        uint256 plantedAt;\\n        uint256 waterLevel;\\n    }\\n    mapping(uint256 => CryptOrchid) public cryptorchids;\\n\\n    enum Stage {Unsold, Seed, Flower, Dead}\\n\\n    bool internal saleStarted = false;\\n    bool internal growingStarted = false;\\n\\n    uint256 public constant MAX_CRYPTORCHIDS = 10000;\\n    uint256 public constant GROWTH_CYCLE = 604800; // 7 days\\n    uint256 public constant WATERING_WINDOW = 10800; // 3 hours\\n    uint256 internal constant MAX_TIMESTAMP = 2**256 - 1;\\n    string internal constant GRANUM_IPFS = \\\"QmWd1mn7DuGyx9ByfNeqCsgdSUsJZ1cragitgaygsqDvEm\\\";\\n\\n    uint16[10] private limits = [0, 3074, 6074, 8074, 9074, 9574, 9824, 9924, 9974, 9999];\\n    string[10] private genum = [\\n        \\\"shenzhenica orchidaceae\\\",\\n        \\\"phalaenopsis micholitzii\\\",\\n        \\\"guarianthe aurantiaca\\\",\\n        \\\"vanda coerulea\\\",\\n        \\\"cypripedium calceolus\\\",\\n        \\\"paphiopedilum vietnamense\\\",\\n        \\\"miltonia kayasimae\\\",\\n        \\\"platanthera azorica\\\",\\n        \\\"dendrophylax lindenii\\\",\\n        \\\"paphiopedilum rothschildianum\\\"\\n    ];\\n\\n    string[10] private speciesIPFSConstant = [\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/shenzhenica-orchidaceae.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/phalaenopsis-micholitzii.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/guarianthe-aurantiaca.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/vanda-coerulea.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/cypripedium-calceolus.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/paphiopedilum-vietnamense.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/miltonia-kayasimae.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/platanthera-azorica.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/dendrophylax-lindenii.json\\\",\\n        \\\"QmV7nsQgHNvwyRxbbhP59iH3grqSfq3g7joSPaS1JGRmJa/paphiopedilum-rothschildianum.json\\\"\\n    ];\\n\\n    string[10] private deadSpeciesIPFSConstant = [\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/shenzhenica-orchidaceae.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/phalaenopsis-micholitzii.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/guarianthe-aurantiaca.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/vanda-coerulea.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/cypripedium-calceolus.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/paphiopedilum-vietnamense.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/miltonia-kayasimae.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/platanthera-azorica.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/dendrophylax-lindenii.json\\\",\\n        \\\"QmU8MNznT6FD1v5XdnSeA6cEYqxpj7MgkECpot3aCERerX/paphiopedilum-rothschildianum.json\\\"\\n    ];\\n\\n    Counters.Counter private _tokenIds;\\n\\n    bytes32 internal keyHash;\\n    uint256 internal vrfFee;\\n    uint256 public randomResult;\\n    address public VRFCoordinator;\\n    address public LinkToken;\\n\\n    event RequestedRandomness(bytes32 requestId);\\n    event Planted(uint256 tokenId, string latinSpecies, uint256 timestamp, address tokenOwner);\\n    event Watered(uint256 tokenId, uint256 waterLevel);\\n    event Killed(uint256 tokenId);\\n\\n    mapping(bytes32 => uint256) public requestToToken;\\n    mapping(bytes32 => string) private speciesIPFS;\\n    mapping(bytes32 => string) private deadSpeciesIPFS;\\n\\n    constructor(\\n        address _VRFCoordinator,\\n        address _LinkToken,\\n        bytes32 _keyhash\\n    )\\n        public\\n        payable\\n        VRFConsumerBase(_VRFCoordinator, _LinkToken)\\n        ERC721PresetMinterPauserAutoId(\\\"CryptOrchids\\\", \\\"ORCHD\\\", \\\"ipfs://\\\")\\n    {\\n        VRFCoordinator = _VRFCoordinator;\\n        LinkToken = _LinkToken;\\n        keyHash = _keyhash;\\n        vrfFee = 2000000000000000000; // 2 LINK\\n\\n        for (uint256 index = 0; index < genum.length; index++) {\\n            speciesIPFS[keccak256(abi.encode(genum[index]))] = speciesIPFSConstant[index];\\n            deadSpeciesIPFS[keccak256(abi.encode(genum[index]))] = deadSpeciesIPFSConstant[index];\\n        }\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        (string memory species, , , ) = getTokenMetadata(tokenId);\\n\\n        if (growthStage(tokenId) == Stage.Seed) {\\n            return string(abi.encodePacked(baseURI(), GRANUM_IPFS));\\n        }\\n\\n        if (growthStage(tokenId) == Stage.Flower) {\\n            return string(abi.encodePacked(baseURI(), speciesIPFS[keccak256(abi.encode(species))]));\\n        }\\n\\n        return string(abi.encodePacked(baseURI(), deadSpeciesIPFS[keccak256(abi.encode(species))]));\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        require(address(0) == to || alive(tokenId), \\\"Dead CryptOrchids cannot be transferred\\\");\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function currentPrice() public view returns (uint256 price) {\\n        uint256 currentSupply = totalSupply();\\n        if (currentSupply >= 9900) {\\n            return 1000000000000000000; // 9900+: 1.00 ETH\\n        } else if (currentSupply >= 9500) {\\n            return 640000000000000000; // 9500-9500:  0.64 ETH\\n        } else if (currentSupply >= 7500) {\\n            return 320000000000000000; // 7500-9500:  0.32 ETH\\n        } else if (currentSupply >= 3500) {\\n            return 160000000000000000; // 3500-7500:  0.16 ETH\\n        } else if (currentSupply >= 1500) {\\n            return 80000000000000000; // 1500-3500:  0.08 ETH\\n        } else if (currentSupply >= 500) {\\n            return 60000000000000000; // 500-1500:   0.06 ETH\\n        } else {\\n            return 40000000000000000; // 0 - 500     0.04 ETH\\n        }\\n    }\\n\\n    function startSale() public onlyOwner {\\n        saleStarted = true;\\n    }\\n\\n    function startGrowing() public onlyOwner {\\n        growingStarted = true;\\n    }\\n\\n    /**\\n     * @dev Withdraw ether from this contract (Callable by owner only)\\n     */\\n    function withdraw() public onlyOwner {\\n        uint256 balance = address(this).balance;\\n        msg.sender.transfer(balance);\\n    }\\n\\n    receive() external payable {}\\n\\n    function webMint(uint256 units) public payable {\\n        require(saleStarted, \\\"The Nursery is closed\\\");\\n        require(units <= MAX_CRYPTORCHIDS - totalSupply(), \\\"Not enough bulbs left\\\");\\n        require(totalSupply() < MAX_CRYPTORCHIDS, \\\"Sale has already ended\\\");\\n        require(units > 0 && units <= 20, \\\"You can plant minimum 1, maximum 20 CryptOrchids\\\");\\n        require(SafeMathChainlink.add(totalSupply(), units) <= MAX_CRYPTORCHIDS, \\\"Exceeds MAX_CRYPTORCHIDS\\\");\\n        require(msg.value >= SafeMathChainlink.mul(currentPrice(), units), \\\"Ether value sent is below the price\\\");\\n\\n        for (uint256 i = 0; i < units; i++) {\\n            _tokenIds.increment();\\n            uint256 newItemId = _tokenIds.current();\\n            cryptorchids[newItemId] = CryptOrchid({species: \\\"granum\\\", plantedAt: MAX_TIMESTAMP, waterLevel: 0});\\n            _safeMint(msg.sender, newItemId);\\n        }\\n    }\\n\\n    function germinate(uint256 tokenId, uint256 userProvidedSeed) public {\\n        require(growingStarted, \\\"Germination starts 2021-04-12T16:00:00Z\\\");\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Only the Owner can germinate a CryptOrchid.\\\");\\n        _requestRandom(tokenId, userProvidedSeed);\\n    }\\n\\n    function _requestRandom(uint256 tokenId, uint256 userProvidedSeed) internal returns (bytes32 requestId) {\\n        require(LINK.balanceOf(address(this)) >= vrfFee, \\\"Not enough LINK - germination unavailable\\\");\\n        requestId = requestRandomness(keyHash, vrfFee, userProvidedSeed);\\n        requestToToken[requestId] = tokenId;\\n        emit RequestedRandomness(requestId);\\n    }\\n\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        uint256 tokenId = requestToToken[requestId];\\n        CryptOrchid storage orchid = cryptorchids[tokenId];\\n        string memory species = pickSpecies(SafeMathChainlink.mod(randomness, 10000));\\n        orchid.species = species;\\n        orchid.plantedAt = currentTime();\\n        address tokenOwner = ownerOf(tokenId);\\n        emit Planted(tokenId, species, currentTime(), tokenOwner);\\n    }\\n\\n    function alive(uint256 tokenId) public view returns (bool) {\\n        return growthStage(tokenId) != Stage.Dead;\\n    }\\n\\n    function flowering(uint256 tokenId) public view returns (bool) {\\n        return growthStage(tokenId) == Stage.Flower;\\n    }\\n\\n    function growthStage(uint256 tokenId) public view returns (Stage) {\\n        CryptOrchid memory orchid = cryptorchids[tokenId];\\n        if (orchid.plantedAt == 0) return Stage.Unsold;\\n        if (orchid.plantedAt == MAX_TIMESTAMP) return Stage.Seed;\\n        uint256 currentWaterLevel = orchid.waterLevel;\\n        uint256 elapsed = currentTime() - orchid.plantedAt;\\n        uint256 fullCycles = SafeMathChainlink.div(uint256(elapsed), GROWTH_CYCLE);\\n        uint256 modulo = SafeMathChainlink.mod(elapsed, GROWTH_CYCLE);\\n\\n        if (currentWaterLevel == fullCycles) {\\n            return Stage.Flower;\\n        }\\n\\n        if (SafeMathChainlink.add(currentWaterLevel, 1) == fullCycles && modulo < WATERING_WINDOW) {\\n            return Stage.Flower;\\n        }\\n\\n        return Stage.Dead;\\n    }\\n\\n    function water(uint256 tokenId) public {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Only the Owner can water a CryptOrchid.\\\");\\n\\n        if (!alive(tokenId)) {\\n            emit Killed(tokenId);\\n            return;\\n        }\\n\\n        CryptOrchid storage orchid = cryptorchids[tokenId];\\n\\n        uint256 wateringLevel = orchid.waterLevel;\\n        uint256 elapsed = currentTime() - orchid.plantedAt;\\n        uint256 fullCycles = SafeMathChainlink.div(uint256(elapsed), GROWTH_CYCLE);\\n\\n        if (wateringLevel > fullCycles) {\\n            emit Killed(tokenId);\\n            return;\\n        }\\n\\n        uint256 newWaterLevel = SafeMathChainlink.add(wateringLevel, 1);\\n        orchid.waterLevel = newWaterLevel;\\n\\n        emit Watered(tokenId, newWaterLevel);\\n    }\\n\\n    function compost(uint256 tokenId) public {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Only the Owner can compost a CryptOrchid.\\\");\\n\\n        burn(tokenId);\\n    }\\n\\n    function getTokenMetadata(uint256 tokenId)\\n        public\\n        view\\n        returns (\\n            string memory,\\n            uint256,\\n            uint256,\\n            Stage\\n        )\\n    {\\n        return (\\n            cryptorchids[tokenId].species,\\n            cryptorchids[tokenId].plantedAt,\\n            cryptorchids[tokenId].waterLevel,\\n            growthStage(tokenId)\\n        );\\n    }\\n\\n    function heartbeat(uint256 tokenId) public {\\n        if (growthStage(tokenId) == Stage.Dead) {\\n            emit Killed(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Pick species for random number index\\n     * @param randomIndex uint256\\n     * @return species string\\n     */\\n    function pickSpecies(uint256 randomIndex) private view returns (string memory) {\\n        for (uint256 i = 0; i < 10; i++) {\\n            if (randomIndex <= limits[i]) {\\n                return genum[i];\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/test/CryptorchidsMock.sol\": {\n      \"content\": \"pragma solidity >=0.6.6 <0.9.0;\\n// import \\\"hardhat/console.sol\\\";\\n\\nimport \\\"../CryptOrchidERC721/CryptOrchidERC721.sol\\\";\\n\\ncontract CryptOrchidsMock is CryptOrchidERC721 {\\n    uint256 internal secondsToAdd = 0;\\n\\n    constructor(\\n        address _VRFCoordinator,\\n        address _LinkToken,\\n        bytes32 _keyhash\\n    ) public CryptOrchidERC721(_VRFCoordinator, _LinkToken, _keyhash) {}\\n\\n    function timeTravel(uint256 s) public {\\n        secondsToAdd = s;\\n    }\\n\\n    function currentTime() internal view virtual override returns (uint256) {\\n        return block.timestamp + secondsToAdd;\\n    }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/tests/VRFCoordinatorMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\n\\nimport \\\"../interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"../VRFConsumerBase.sol\\\";\\n\\ncontract VRFCoordinatorMock {\\n\\n    LinkTokenInterface public LINK;\\n\\n    event RandomnessRequest(address indexed sender, bytes32 indexed keyHash, uint256 indexed seed);\\n\\n    constructor(address linkAddress) public {\\n        LINK = LinkTokenInterface(linkAddress);\\n    }\\n\\n    function onTokenTransfer(address sender, uint256 fee, bytes memory _data)\\n        public\\n        onlyLINK\\n    {\\n        (bytes32 keyHash, uint256 seed) = abi.decode(_data, (bytes32, uint256));\\n        emit RandomnessRequest(sender, keyHash, seed);\\n    }\\n\\n    function callBackWithRandomness(\\n        bytes32 requestId,\\n        uint256 randomness,\\n        address consumerContract\\n    ) public {\\n        VRFConsumerBase v;\\n        bytes memory resp = abi.encodeWithSelector(v.rawFulfillRandomness.selector, requestId, randomness);\\n        uint256 b = 206000;\\n        require(gasleft() >= b, \\\"not enough gas for consumer\\\");\\n        (bool success,) = consumerContract.call(resp);\\n    }\\n\\n    modifier onlyLINK() {\\n        require(msg.sender == address(LINK), \\\"Must use LINK token\\\");\\n        _;\\n    }\\n}\"\n    },\n    \"contracts/test/VRFCoordinatorMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.6/tests/VRFCoordinatorMock.sol\\\";\\n\"\n    },\n    \"contracts/Libraries/matic/child/ChildToken/DappTokens/UChildDAI.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {UChildERC20} from \\\"../UpgradeableChildERC20/UChildERC20.sol\\\";\\n\\ncontract UChildDAI is UChildERC20 {\\n    // bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\\n\\n    // --- Alias ---\\n    function push(address usr, uint wad) external {\\n        transferFrom(msg.sender, usr, wad);\\n    }\\n    function pull(address usr, uint wad) external {\\n        transferFrom(usr, msg.sender, wad);\\n    }\\n    function move(address src, address dst, uint wad) external {\\n        transferFrom(src, dst, wad);\\n    }\\n\\n    // --- Approve by signature ---\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                getDomainSeperator(),\\n                keccak256(\\n                    abi.encode(\\n                        PERMIT_TYPEHASH,\\n                        holder,\\n                        spender,\\n                        nonce,\\n                        expiry,\\n                        allowed\\n                    )\\n                )\\n        ));\\n\\n        require(holder == ecrecover(digest, v, r, s), \\\"UChildDAI: INVALID-PERMIT\\\");\\n        require(expiry == 0 || now <= expiry, \\\"UChildDAI: PERMIT-EXPIRED\\\");\\n        require(nonce == nonces[holder]++, \\\"UChildDAI: INVALID-NONCE\\\");\\n        require(msg.sender != address(this), \\\"UChildDAI: PERMIT_META_TX_DISABLED\\\");\\n        uint wad = allowed ? uint(-1) : 0;\\n        _approve(holder, spender, wad);\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/child/ChildToken/ChildMintableERC721.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {AccessControlMixin} from \\\"../../common/AccessControlMixin.sol\\\";\\nimport {IChildToken} from \\\"./IChildToken.sol\\\";\\nimport {NativeMetaTransaction} from \\\"../../common/NativeMetaTransaction.sol\\\";\\nimport {ContextMixin} from \\\"../../common/ContextMixin.sol\\\";\\n\\n\\ncontract ChildMintableERC721 is\\n    ERC721,\\n    IChildToken,\\n    AccessControlMixin,\\n    NativeMetaTransaction,\\n    ContextMixin\\n{\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\n    mapping (uint256 => bool) public withdrawnTokens;\\n\\n    // limit batching of tokens due to gas limit restrictions\\n    uint256 public constant BATCH_LIMIT = 20;\\n\\n    event WithdrawnBatch(address indexed user, uint256[] tokenIds);\\n    event TransferWithMetadata(address indexed from, address indexed to, uint256 indexed tokenId, bytes metaData);\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address childChainManager\\n    ) public ERC721(name_, symbol_) {\\n        _setupContractId(\\\"ChildMintableERC721\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(DEPOSITOR_ROLE, childChainManager);\\n        _initializeEIP712(name_);\\n    }\\n\\n    // This is to support Native meta transactions\\n    // never use msg.sender directly, use _msgSender() instead\\n    function _msgSender()\\n        internal\\n        override\\n        view\\n        returns (address payable sender)\\n    {\\n        return ContextMixin.msgSender();\\n    }\\n\\n    /**\\n     * @notice called when token is deposited on root chain\\n     * @dev Should be callable only by ChildChainManager\\n     * Should handle deposit by minting the required tokenId(s) for user\\n     * Should set `withdrawnTokens` mapping to `false` for the tokenId being deposited\\n     * Minting can also be done by other functions\\n     * @param user user address for whom deposit is being done\\n     * @param depositData abi encoded tokenIds. Batch deposit also supported.\\n     */\\n    function deposit(address user, bytes calldata depositData)\\n        external\\n        override\\n        only(DEPOSITOR_ROLE)\\n    {\\n\\n        // deposit single\\n        if (depositData.length == 32) {\\n            uint256 tokenId = abi.decode(depositData, (uint256));\\n            withdrawnTokens[tokenId] = false;\\n            _mint(user, tokenId);\\n\\n        // deposit batch\\n        } else {\\n            uint256[] memory tokenIds = abi.decode(depositData, (uint256[]));\\n            uint256 length = tokenIds.length;\\n            for (uint256 i; i < length; i++) {\\n                withdrawnTokens[tokenIds[i]] = false;\\n                _mint(user, tokenIds[i]);\\n            }\\n        }\\n\\n    }\\n\\n    /**\\n     * @notice called when user wants to withdraw token back to root chain\\n     * @dev Should handle withraw by burning user's token.\\n     * Should set `withdrawnTokens` mapping to `true` for the tokenId being withdrawn\\n     * This transaction will be verified when exiting on root chain\\n     * @param tokenId tokenId to withdraw\\n     */\\n    function withdraw(uint256 tokenId) external {\\n        require(_msgSender() == ownerOf(tokenId), \\\"ChildMintableERC721: INVALID_TOKEN_OWNER\\\");\\n        withdrawnTokens[tokenId] = true;\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @notice called when user wants to withdraw multiple tokens back to root chain\\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\n     * @param tokenIds tokenId list to withdraw\\n     */\\n    function withdrawBatch(uint256[] calldata tokenIds) external {\\n\\n        uint256 length = tokenIds.length;\\n        require(length <= BATCH_LIMIT, \\\"ChildMintableERC721: EXCEEDS_BATCH_LIMIT\\\");\\n\\n        // Iteratively burn ERC721 tokens, for performing\\n        // batch withdraw\\n        for (uint256 i; i < length; i++) {\\n\\n            uint256 tokenId = tokenIds[i];\\n\\n            require(_msgSender() == ownerOf(tokenId), string(abi.encodePacked(\\\"ChildMintableERC721: INVALID_TOKEN_OWNER \\\", tokenId)));\\n            withdrawnTokens[tokenId] = true;\\n            _burn(tokenId);\\n\\n        }\\n\\n        // At last emit this event, which will be used\\n        // in MintableERC721 predicate contract on L1\\n        // while verifying burn proof\\n        emit WithdrawnBatch(_msgSender(), tokenIds);\\n\\n    }\\n\\n    /**\\n     * @notice called when user wants to withdraw token back to root chain with token URI\\n     * @dev Should handle withraw by burning user's token.\\n     * Should set `withdrawnTokens` mapping to `true` for the tokenId being withdrawn\\n     * This transaction will be verified when exiting on root chain\\n     *\\n     * @param tokenId tokenId to withdraw\\n     */\\n    function withdrawWithMetadata(uint256 tokenId) external {\\n\\n        require(_msgSender() == ownerOf(tokenId), \\\"ChildMintableERC721: INVALID_TOKEN_OWNER\\\");\\n        withdrawnTokens[tokenId] = true;\\n\\n        // Encoding metadata associated with tokenId & emitting event\\n        emit TransferWithMetadata(ownerOf(tokenId), address(0), tokenId, this.encodeTokenMetadata(tokenId));\\n\\n        _burn(tokenId);\\n\\n    }\\n\\n    /**\\n     * @notice This method is supposed to be called by client when withdrawing token with metadata\\n     * and pass return value of this function as second paramter of `withdrawWithMetadata` method\\n     *\\n     * It can be overridden by clients to encode data in a different form, which needs to\\n     * be decoded back by them correctly during exiting\\n     *\\n     * @param tokenId Token for which URI to be fetched\\n     */\\n    function encodeTokenMetadata(uint256 tokenId) external view virtual returns (bytes memory) {\\n\\n        // You're always free to change this default implementation\\n        // and pack more data in byte array which can be decoded back\\n        // in L1\\n        return abi.encode(tokenURI(tokenId));\\n\\n    }\\n\\n    /**\\n     * @notice Example function to handle minting tokens on matic chain\\n     * @dev Minting can be done as per requirement,\\n     * This implementation allows only admin to mint tokens but it can be changed as per requirement\\n     * Should verify if token is withdrawn by checking `withdrawnTokens` mapping\\n     * @param user user for whom tokens are being minted\\n     * @param tokenId tokenId to mint\\n     */\\n    function mint(address user, uint256 tokenId) public only(DEFAULT_ADMIN_ROLE) {\\n        require(!withdrawnTokens[tokenId], \\\"ChildMintableERC721: TOKEN_EXISTS_ON_ROOT_CHAIN\\\");\\n        _mint(user, tokenId);\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/child/ChildToken/ChildMintableERC1155.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {ERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport {AccessControlMixin} from \\\"../../common/AccessControlMixin.sol\\\";\\nimport {IChildToken} from \\\"./IChildToken.sol\\\";\\nimport {NativeMetaTransaction} from \\\"../../common/NativeMetaTransaction.sol\\\";\\nimport {ContextMixin} from \\\"../../common/ContextMixin.sol\\\";\\n\\ncontract ChildMintableERC1155 is\\n    ERC1155,\\n    IChildToken,\\n    AccessControlMixin,\\n    NativeMetaTransaction,\\n    ContextMixin\\n{\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\n\\n    constructor(string memory uri_, address childChainManager)\\n        public\\n        ERC1155(uri_)\\n    {\\n        _setupContractId(\\\"ChildMintableERC1155\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(DEPOSITOR_ROLE, childChainManager);\\n        _initializeEIP712(uri_);\\n    }\\n\\n    // This is to support Native meta transactions\\n    // never use msg.sender directly, use _msgSender() instead\\n    function _msgSender()\\n        internal\\n        override\\n        view\\n        returns (address payable sender)\\n    {\\n        return ContextMixin.msgSender();\\n    }\\n\\n    /**\\n     * @notice called when tokens are deposited on root chain\\n     * @dev Should be callable only by ChildChainManager\\n     * Should handle deposit by minting the required tokens for user\\n     * Make sure minting is done only by this function\\n     * @param user user address for whom deposit is being done\\n     * @param depositData abi encoded ids array and amounts array\\n     */\\n    function deposit(address user, bytes calldata depositData)\\n        external\\n        override\\n        only(DEPOSITOR_ROLE)\\n    {\\n        (\\n            uint256[] memory ids,\\n            uint256[] memory amounts,\\n            bytes memory data\\n        ) = abi.decode(depositData, (uint256[], uint256[], bytes));\\n\\n        require(\\n            user != address(0),\\n            \\\"ChildMintableERC1155: INVALID_DEPOSIT_USER\\\"\\n        );\\n\\n        _mintBatch(user, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @notice called when user wants to withdraw single token back to root chain\\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\n     * @param id id to withdraw\\n     * @param amount amount to withdraw\\n     */\\n    function withdrawSingle(uint256 id, uint256 amount) external {\\n        _burn(_msgSender(), id, amount);\\n    }\\n\\n    /**\\n     * @notice called when user wants to batch withdraw tokens back to root chain\\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\n     * @param ids ids to withdraw\\n     * @param amounts amounts to withdraw\\n     */\\n    function withdrawBatch(uint256[] calldata ids, uint256[] calldata amounts)\\n        external\\n    {\\n        _burnBatch(_msgSender(), ids, amounts);\\n    }\\n\\n    /**\\n     * @notice See definition of `_mint` in ERC1155 contract\\n     * @dev This implementation only allows admins to mint tokens\\n     * but can be changed as per requirement\\n     */\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external only(DEFAULT_ADMIN_ROLE) {\\n        _mint(account, id, amount, data);\\n    }\\n\\n    /**\\n     * @notice See definition of `_mintBatch` in ERC1155 contract\\n     * @dev This implementation only allows admins to mint tokens\\n     * but can be changed as per requirement\\n     */\\n    function mintBatch(\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external only(DEFAULT_ADMIN_ROLE) {\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/child/ChildToken/ChildERC721.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {AccessControlMixin} from \\\"../../common/AccessControlMixin.sol\\\";\\nimport {IChildToken} from \\\"./IChildToken.sol\\\";\\nimport {NativeMetaTransaction} from \\\"../../common/NativeMetaTransaction.sol\\\";\\nimport {ContextMixin} from \\\"../../common/ContextMixin.sol\\\";\\n\\ncontract ChildERC721 is\\n    ERC721,\\n    IChildToken,\\n    AccessControlMixin,\\n    NativeMetaTransaction,\\n    ContextMixin\\n{\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\n\\n    // limit batching of tokens due to gas limit restrictions\\n    uint256 public constant BATCH_LIMIT = 20;\\n\\n    event WithdrawnBatch(address indexed user, uint256[] tokenIds);\\n    event TransferWithMetadata(address indexed from, address indexed to, uint256 indexed tokenId, bytes metaData);\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address childChainManager\\n    ) public ERC721(name_, symbol_) {\\n        _setupContractId(\\\"ChildERC721\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(DEPOSITOR_ROLE, childChainManager);\\n        _initializeEIP712(name_);\\n    }\\n\\n    // This is to support Native meta transactions\\n    // never use msg.sender directly, use _msgSender() instead\\n    function _msgSender()\\n        internal\\n        override\\n        view\\n        returns (address payable sender)\\n    {\\n        return ContextMixin.msgSender();\\n    }\\n\\n    /**\\n     * @notice called when token is deposited on root chain\\n     * @dev Should be callable only by ChildChainManager\\n     * Should handle deposit by minting the required tokenId for user\\n     * Make sure minting is done only by this function\\n     * @param user user address for whom deposit is being done\\n     * @param depositData abi encoded tokenId\\n     */\\n    function deposit(address user, bytes calldata depositData)\\n        external\\n        override\\n        only(DEPOSITOR_ROLE)\\n    {\\n        // deposit single\\n        if (depositData.length == 32) {\\n            uint256 tokenId = abi.decode(depositData, (uint256));\\n            _mint(user, tokenId);\\n\\n        // deposit batch\\n        } else {\\n            uint256[] memory tokenIds = abi.decode(depositData, (uint256[]));\\n            uint256 length = tokenIds.length;\\n            for (uint256 i; i < length; i++) {\\n                _mint(user, tokenIds[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice called when user wants to withdraw token back to root chain\\n     * @dev Should burn user's token. This transaction will be verified when exiting on root chain\\n     * @param tokenId tokenId to withdraw\\n     */\\n    function withdraw(uint256 tokenId) external {\\n        require(_msgSender() == ownerOf(tokenId), \\\"ChildERC721: INVALID_TOKEN_OWNER\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @notice called when user wants to withdraw multiple tokens back to root chain\\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\n     * @param tokenIds tokenId list to withdraw\\n     */\\n    function withdrawBatch(uint256[] calldata tokenIds) external {\\n        uint256 length = tokenIds.length;\\n        require(length <= BATCH_LIMIT, \\\"ChildERC721: EXCEEDS_BATCH_LIMIT\\\");\\n        for (uint256 i; i < length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            require(_msgSender() == ownerOf(tokenId), string(abi.encodePacked(\\\"ChildERC721: INVALID_TOKEN_OWNER \\\", tokenId)));\\n            _burn(tokenId);\\n        }\\n        emit WithdrawnBatch(_msgSender(), tokenIds);\\n    }\\n\\n    /**\\n     * @notice called when user wants to withdraw token back to root chain with arbitrary metadata\\n     * @dev Should handle withraw by burning user's token.\\n     * \\n     * This transaction will be verified when exiting on root chain\\n     *\\n     * @param tokenId tokenId to withdraw\\n     */\\n    function withdrawWithMetadata(uint256 tokenId) external {\\n\\n        require(_msgSender() == ownerOf(tokenId), \\\"ChildERC721: INVALID_TOKEN_OWNER\\\");\\n\\n        // Encoding metadata associated with tokenId & emitting event\\n        emit TransferWithMetadata(_msgSender(), address(0), tokenId, this.encodeTokenMetadata(tokenId));\\n\\n        _burn(tokenId);\\n\\n    }\\n\\n    /**\\n     * @notice This method is supposed to be called by client when withdrawing token with metadata\\n     * and pass return value of this function as second paramter of `withdrawWithMetadata` method\\n     *\\n     * It can be overridden by clients to encode data in a different form, which needs to\\n     * be decoded back by them correctly during exiting\\n     *\\n     * @param tokenId Token for which URI to be fetched\\n     */\\n    function encodeTokenMetadata(uint256 tokenId) external view virtual returns (bytes memory) {\\n\\n        // You're always free to change this default implementation\\n        // and pack more data in byte array which can be decoded back\\n        // in L1\\n        return abi.encode(tokenURI(tokenId));\\n\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/child/ChildToken/ChildERC1155.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {ERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport {AccessControlMixin} from \\\"../../common/AccessControlMixin.sol\\\";\\nimport {IChildToken} from \\\"./IChildToken.sol\\\";\\nimport {NativeMetaTransaction} from \\\"../../common/NativeMetaTransaction.sol\\\";\\nimport {ContextMixin} from \\\"../../common/ContextMixin.sol\\\";\\n\\ncontract ChildERC1155 is\\n    ERC1155,\\n    IChildToken,\\n    AccessControlMixin,\\n    NativeMetaTransaction,\\n    ContextMixin\\n{\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\n\\n    constructor(string memory uri_, address childChainManager)\\n        public\\n        ERC1155(uri_)\\n    {\\n        _setupContractId(\\\"ChildERC1155\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(DEPOSITOR_ROLE, childChainManager);\\n        _initializeEIP712(uri_);\\n    }\\n\\n    // This is to support Native meta transactions\\n    // never use msg.sender directly, use _msgSender() instead\\n    function _msgSender()\\n        internal\\n        override\\n        view\\n        returns (address payable sender)\\n    {\\n        return ContextMixin.msgSender();\\n    }\\n\\n    /**\\n     * @notice called when tokens are deposited on root chain\\n     * @dev Should be callable only by ChildChainManager\\n     * Should handle deposit by minting the required tokens for user\\n     * Make sure minting is done only by this function\\n     * @param user user address for whom deposit is being done\\n     * @param depositData abi encoded ids array and amounts array\\n     */\\n    function deposit(address user, bytes calldata depositData)\\n        external\\n        override\\n        only(DEPOSITOR_ROLE)\\n    {\\n        (\\n            uint256[] memory ids,\\n            uint256[] memory amounts,\\n            bytes memory data\\n        ) = abi.decode(depositData, (uint256[], uint256[], bytes));\\n        require(user != address(0x0), \\\"ChildERC1155: INVALID_DEPOSIT_USER\\\");\\n        _mintBatch(user, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @notice called when user wants to withdraw single token back to root chain\\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\n     * @param id id to withdraw\\n     * @param amount amount to withdraw\\n     */\\n    function withdrawSingle(uint256 id, uint256 amount) external {\\n        _burn(_msgSender(), id, amount);\\n    }\\n\\n    /**\\n     * @notice called when user wants to batch withdraw tokens back to root chain\\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\n     * @param ids ids to withdraw\\n     * @param amounts amounts to withdraw\\n     */\\n    function withdrawBatch(uint256[] calldata ids, uint256[] calldata amounts)\\n        external\\n    {\\n        _burnBatch(_msgSender(), ids, amounts);\\n    }\\n}\\n\"\n    },\n    \"contracts/CryptOrchidERC721Child/CryptOrchidERC721Child.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.6 <0.9.0;\\n\\nimport {CryptOrchidGoerli} from \\\"../CryptOrchidGoerli/CryptOrchidGoerli.sol\\\";\\nimport {AccessControlMixin} from \\\"../Libraries/matic/common/AccessControlMixin.sol\\\";\\nimport {IChildToken} from \\\"../Libraries/matic/child/ChildToken/IChildToken.sol\\\";\\nimport {NativeMetaTransaction} from \\\"../Libraries/matic/common/NativeMetaTransaction.sol\\\";\\nimport {ContextMixin} from \\\"../Libraries/matic/common/ContextMixin.sol\\\";\\nimport {FxBaseChildTunnel} from \\\"../Libraries/tunnel/FxBaseChildTunnel.sol\\\";\\n\\ncontract CryptOrchidERC721Child is\\n    CryptOrchidGoerli,\\n    IChildToken,\\n    AccessControlMixin,\\n    NativeMetaTransaction,\\n    ContextMixin,\\n    FxBaseChildTunnel\\n{\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\n\\n    // limit batching of tokens due to gas limit restrictions\\n    uint256 public constant BATCH_LIMIT = 20;\\n\\n    event WithdrawnBatch(address indexed user, uint256[] tokenIds);\\n    event TransferWithMetadata(address indexed from, address indexed to, uint256 indexed tokenId, bytes metaData);\\n\\n    constructor(address childChainManager, address _fxChild) public CryptOrchidGoerli() FxBaseChildTunnel(_fxChild) {\\n        _setupContractId(\\\"CryptOrchidERC721Child\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(DEPOSITOR_ROLE, childChainManager);\\n        _initializeEIP712(\\\"CryptOrchids\\\");\\n    }\\n\\n    // This is to support Native meta transactions\\n    // never use msg.sender directly, use _msgSender() instead\\n    function _msgSender() internal view override returns (address payable sender) {\\n        return ContextMixin.msgSender();\\n    }\\n\\n    /**\\n     * @notice called when token is deposited on root chain\\n     * @dev Should be callable only by ChildChainManager\\n     * Should handle deposit by minting the required tokenId for user\\n     * Make sure minting is done only by this function\\n     * @param user user address for whom deposit is being done\\n     * @param depositData abi encoded tokenId\\n     */\\n    function deposit(address user, bytes calldata depositData) external override only(DEPOSITOR_ROLE) {\\n        // deposit single\\n        if (depositData.length == 32) {\\n            uint256 tokenId = abi.decode(depositData, (uint256));\\n            _mint(user, tokenId);\\n\\n            // deposit batch\\n        } else {\\n            uint256[] memory tokenIds = abi.decode(depositData, (uint256[]));\\n            uint256 length = tokenIds.length;\\n            for (uint256 i; i < length; i++) {\\n                _mint(user, tokenIds[i]);\\n            }\\n        }\\n    }\\n\\n    function _processMessageFromRoot(\\n        uint256 stateId,\\n        address sender,\\n        bytes memory data\\n    ) internal override validateSender(sender) {\\n        (string memory species, uint256 plantedAt, uint256 waterLevel, uint256 tokenId) = abi.decode(\\n            data,\\n            (string, uint256, uint256, uint256)\\n        );\\n\\n        require(cryptorchids[tokenId].plantedAt == 0, \\\"Metdata already transferred\\\");\\n\\n        cryptorchids[tokenId] = CryptOrchid({species: species, plantedAt: plantedAt, waterLevel: waterLevel});\\n    }\\n\\n    function sendMessageToRoot(bytes memory message) public {\\n        _sendMessageToRoot(message);\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/tunnel/FxBaseChildTunnel.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6 <0.9.0;\\n\\n// IFxMessageProcessor represents interface to process message\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/**\\n * @notice Mock child tunnel contract to receive and send message from L2\\n */\\nabstract contract FxBaseChildTunnel is IFxMessageProcessor {\\n    // MessageTunnel on L1 will get data from this event\\n    event MessageSent(bytes message);\\n\\n    // fx child\\n    address public fxChild;\\n\\n    // fx root tunnel\\n    address public fxRootTunnel;\\n\\n    constructor(address _fxChild) internal {\\n        fxChild = _fxChild;\\n    }\\n\\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\\n    modifier validateSender(address sender) {\\n        require(sender == fxRootTunnel, \\\"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\\\");\\n        _;\\n    }\\n\\n    // set fxRootTunnel if not set already\\n    function setFxRootTunnel(address _fxRootTunnel) public {\\n        require(fxRootTunnel == address(0x0), \\\"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\\\");\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes memory data\\n    ) public override {\\n        require(msg.sender == fxChild, \\\"FxBaseChildTunnel: INVALID_SENDER\\\");\\n        _processMessageFromRoot(stateId, rootMessageSender, data);\\n    }\\n\\n    /**\\n     * @notice Emit message that can be received on Root Tunnel\\n     * @dev Call the internal function when need to emit message\\n     * @param message bytes message that will be sent to Root Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToRoot(bytes memory message) internal {\\n        emit MessageSent(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Root Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param stateId unique state id\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(\\n        uint256 stateId,\\n        address sender,\\n        bytes memory message\\n    ) internal virtual;\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/RootToken/DummyERC1155.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {ERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport {NativeMetaTransaction} from \\\"../../common/NativeMetaTransaction.sol\\\";\\nimport {ContextMixin} from \\\"../../common/ContextMixin.sol\\\";\\n\\ncontract DummyERC1155 is\\n    ERC1155,\\n    NativeMetaTransaction,\\n    ContextMixin\\n{\\n    constructor(string memory uri_)\\n        public\\n        ERC1155(uri_)\\n    {\\n        _initializeEIP712(uri_);\\n    }\\n\\n    function mint(address account, uint256 id, uint256 amount) public {\\n        _mint(account, id, amount, bytes(\\\"\\\"));\\n    }\\n\\n    function _msgSender()\\n        internal\\n        override\\n        view\\n        returns (address payable sender)\\n    {\\n        return ContextMixin.msgSender();\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/root/TokenPredicates/ERC1155Predicate.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {ERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol\\\";\\nimport {AccessControlMixin} from \\\"../../common/AccessControlMixin.sol\\\";\\nimport {RLPReader} from \\\"../../lib/RLPReader.sol\\\";\\nimport {ITokenPredicate} from \\\"./ITokenPredicate.sol\\\";\\nimport {Initializable} from \\\"../../common/Initializable.sol\\\";\\n\\ncontract ERC1155Predicate is ITokenPredicate, ERC1155Receiver, AccessControlMixin, Initializable {\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    bytes32 public constant TOKEN_TYPE = keccak256(\\\"ERC1155\\\");\\n\\n    // keccak256(\\\"TransferSingle(address,address,address,uint256,uint256)\\\")\\n    bytes32 public constant TRANSFER_SINGLE_EVENT_SIG = 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62;\\n    // keccak256(\\\"TransferBatch(address,address,address,uint256[],uint256[])\\\")\\n    bytes32 public constant TRANSFER_BATCH_EVENT_SIG = 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb;\\n\\n    event LockedBatchERC1155(\\n        address indexed depositor,\\n        address indexed depositReceiver,\\n        address indexed rootToken,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n\\n    constructor() public {}\\n\\n    function initialize(address _owner) external initializer {\\n        _setupContractId(\\\"ERC1155Predicate\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n        _setupRole(MANAGER_ROLE, _owner);\\n    }\\n\\n    /**\\n     * @notice rejects single transfer\\n     */\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external override returns (bytes4) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice accepts batch transfer\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external override returns (bytes4) {\\n        return ERC1155Receiver(0).onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @notice Lock ERC1155 tokens for deposit, callable only by manager\\n     * @param depositor Address who wants to deposit tokens\\n     * @param depositReceiver Address (address) who wants to receive tokens on child chain\\n     * @param rootToken Token which gets deposited\\n     * @param depositData ABI encoded id array and amount array\\n     */\\n    function lockTokens(\\n        address depositor,\\n        address depositReceiver,\\n        address rootToken,\\n        bytes calldata depositData\\n    )\\n        external\\n        override\\n        only(MANAGER_ROLE)\\n    {\\n        // forcing batch deposit since supporting both single and batch deposit introduces too much complexity\\n        (\\n            uint256[] memory ids,\\n            uint256[] memory amounts,\\n            bytes memory data\\n        ) = abi.decode(depositData, (uint256[], uint256[], bytes));\\n        emit LockedBatchERC1155(\\n            depositor,\\n            depositReceiver,\\n            rootToken,\\n            ids,\\n            amounts\\n        );\\n        IERC1155(rootToken).safeBatchTransferFrom(\\n            depositor,\\n            address(this),\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice Validates log signature, from and to address\\n     * then sends the correct tokenId, amount to withdrawer\\n     * callable only by manager\\n     * @param rootToken Token which gets withdrawn\\n     * @param log Valid ERC1155 TransferSingle burn or TransferBatch burn log from child chain\\n     */\\n    function exitTokens(\\n        address,\\n        address rootToken,\\n        bytes memory log\\n    )\\n        public\\n        override\\n        only(MANAGER_ROLE)\\n    {\\n        RLPReader.RLPItem[] memory logRLPList = log.toRlpItem().toList();\\n        RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList(); // topics\\n        bytes memory logData = logRLPList[2].toBytes();\\n\\n        address withdrawer = address(logTopicRLPList[2].toUint()); // topic2 is from address\\n\\n        require(\\n            address(logTopicRLPList[3].toUint()) == address(0), // topic3 is to address\\n            \\\"ERC1155Predicate: INVALID_RECEIVER\\\"\\n        );\\n\\n        if (bytes32(logTopicRLPList[0].toUint()) == TRANSFER_SINGLE_EVENT_SIG) { // topic0 is event sig\\n            (uint256 id, uint256 amount) = abi.decode(\\n                logData,\\n                (uint256, uint256)\\n            );\\n            IERC1155(rootToken).safeTransferFrom(\\n                address(this),\\n                withdrawer,\\n                id,\\n                amount,\\n                bytes(\\\"\\\")\\n            );\\n        } else if (bytes32(logTopicRLPList[0].toUint()) == TRANSFER_BATCH_EVENT_SIG) {\\n            (uint256[] memory ids, uint256[] memory amounts) = abi.decode(\\n                logData,\\n                (uint256[], uint256[])\\n            );\\n            IERC1155(rootToken).safeBatchTransferFrom(\\n                address(this),\\n                withdrawer,\\n                ids,\\n                amounts,\\n                bytes(\\\"\\\")\\n            );\\n        } else {\\n            revert(\\\"ERC1155Predicate: INVALID_WITHDRAW_SIG\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/Libraries/matic/test/TestRootTunnel.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {BaseRootTunnel} from \\\"../tunnel/BaseRootTunnel.sol\\\";\\n\\ncontract TestRootTunnel is BaseRootTunnel {\\n    uint256 public receivedNumber;\\n\\n    event MessageReceivedFromChild(uint256);\\n\\n    function _processMessageFromChild(bytes memory message) internal override {\\n        (uint256 n) = abi.decode(message, (uint256));\\n        emit MessageReceivedFromChild(n);\\n        receivedNumber = n;\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "961814ba080324d595a4e1c93377123d",
      "transactionHash": "0x672ca51797c5781ac3c933f16b056bb1b500d77b0d0e08d4946f4cb88c480a09",
      "args": []
    },
    "decoded": {
      "from": "0x0090720FeD7Fed66eD658118b7B3BB0189D3A495",
      "gasPrice": "500000000000",
      "gasLimit": "7888628",
      "to": null,
      "value": "0",
      "nonce": 125,
      "data": "0x600f805461ffff191690556101c060405260006080908152610c0260a0526117ba60c052611f8a60e0526123726101005261256661012052612660610140526126c4610160526126f66101805261270f6101a0526200006390601090600a62000b0c565b506040805161018081018252601761014082019081527f7368656e7a68656e696361206f72636869646163656165000000000000000000610160830152815281518083018352601881527f7068616c61656e6f70736973206d6963686f6c69747a69690000000000000000602082810191909152808301919091528251808401845260158082527f6775617269616e74686520617572616e74696163610000000000000000000000828401528385019190915283518085018552600e81526d76616e646120636f6572756c656160901b818401526060840152835180850185528181527f637970726970656469756d2063616c63656f6c7573000000000000000000000081840152608084015283518085018552601981527f70617068696f706564696c756d20766965746e616d656e7365000000000000008184015260a08401528351808501855260128152716d696c746f6e6961206b61796173696d616560701b8184015260c084015283518085018552601381527f706c6174616e746865726120617a6f72696361000000000000000000000000008184015260e0840152835180850185529081527f64656e64726f7068796c6178206c696e64656e69690000000000000000000000818301526101008301528251808401909352601d83527f70617068696f706564696c756d20726f7468736368696c6469616e756d000000908301526101208101919091526200028390601190600a62000ba9565b50604080516101c08101909152604b610140820181815282916200505f61016084013981526020016040518060800160405280604c815260200162004ef5604c9139815260200160405180608001604052806049815260200162005183604991398152602001604051806080016040528060428152602001620050f060429139815260200160405180608001604052806049815260200162004eac6049913981526020016040518060800160405280604d815260200162004fc9604d91398152602001604051806080016040528060468152602001620050aa604691398152602001604051806080016040528060478152602001620052f96047913981526020016040518060800160405280604981526020016200521960499139815260200160405180608001604052806051815260200162004e14605191399052620003cf90601b90600a62000ba9565b50604080516101c08101909152604b61014082018181528291620052ae61016084013981526020016040518060800160405280604c815260200162005262604c913981526020016040518060800160405280604981526020016200501660499139815260200160405180608001604052806042815260200162004f4160429139815260200160405180608001604052806049815260200162004d826049913981526020016040518060800160405280604d8152602001620051cc604d9139815260200160405180608001604052806046815260200162004f8360469139815260200160405180608001604052806047815260200162004e6560479139815260200160405180608001604052806049815260200162004dcb604991398152602001604051806080016040528060518152602001620051326051913990526200051b90602590600a62000ba9565b506040518060400160405280600c81526020016b43727970744f72636869647360a01b8152506040518060400160405280600581526020016413d490d21160da1b81525060405180604001604052806007815260200166697066733a2f2f60c81b8152508282620005996301ffc9a760e01b6200093660201b60201c565b8151620005ae90600790602085019062000bfc565b508051620005c490600890602084019062000bfc565b50620005e06380ac58cd60e01b6001600160e01b036200093616565b620005fb635b5e139f60e01b6001600160e01b036200093616565b6200061663780e9d6360e01b6001600160e01b036200093616565b5050600b805460ff191690556200064a60006200063b6001600160e01b03620009be16565b6001600160e01b03620009c316565b604080516a4d494e5445525f524f4c4560a81b8152905190819003600b01902062000682906200063b6001600160e01b03620009be16565b604080516a5041555345525f524f4c4560a81b8152905190819003600b019020620006ba906200063b6001600160e01b03620009be16565b620006ce816001600160e01b03620009dc16565b5050506000620006e3620009be60201b60201c565b600d80546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060005b600a8110156200092f57601b81600a81106200074c57fe5b0160316000601184600a81106200075f57fe5b6040805160208082019081529290930180546002600182161561010002600019019091160491840182905292829160609091019084908015620007e65780601f10620007ba57610100808354040283529160200191620007e6565b820191906000526020600020905b815481529060010190602001808311620007c857829003601f168201915b50509250505060405160208183030381529060405280519060200120815260200190815260200160002090805460018160011615610100020316600290046200083192919062000c7d565b50602581600a81106200084057fe5b0160326000601184600a81106200085357fe5b6040805160208082019081529290930180546002600182161561010002600019019091160491840182905292829160609091019084908015620008da5780601f10620008ae57610100808354040283529160200191620008da565b820191906000526020600020905b815481529060010190602001808311620008bc57829003601f168201915b50509250505060405160208183030381529060405280519060200120815260200190815260200160002090805460018160011615610100020316600290046200092592919062000c7d565b5060010162000734565b5062000da9565b6001600160e01b0319808216141562000996576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b335b90565b620009d882826001600160e01b03620009f116565b5050565b8051620009d890600a90602084019062000bfc565b60008281526020818152604090912062000a1691839062002f9962000a73821b17901c565b15620009d85762000a2f6001600160e01b03620009be16565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000a93836001600160a01b0384166001600160e01b0362000a9c16565b90505b92915050565b600062000ab383836001600160e01b0362000af416565b62000aeb5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000a96565b50600062000a96565b60009081526001919091016020526040902054151590565b60018301918390821562000b975791602002820160005b8382111562000b6557835183826101000a81548161ffff021916908361ffff160217905550926020019260020160208160010104928301926001030262000b23565b801562000b955782816101000a81549061ffff021916905560020160208160010104928301926001030262000b65565b505b5062000ba592915062000cf7565b5090565b82600a810192821562000bee579160200282015b8281111562000bee578251805162000bdd91849160209091019062000bfc565b509160200191906001019062000bbd565b5062000ba592915062000d19565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000c3f57805160ff191683800117855562000c6f565b8280016001018555821562000c6f579182015b8281111562000c6f57825182559160200191906001019062000c52565b5062000ba592915062000d41565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000cb8578054855562000c6f565b8280016001018555821562000c6f57600052602060002091601f016020900482015b8281111562000c6f57825482559160010191906001019062000cda565b620009c091905b8082111562000ba557805461ffff1916815560010162000cfe565b620009c091905b8082111562000ba557600062000d37828262000d5e565b5060010162000d20565b620009c091905b8082111562000ba5576000815560010162000d48565b50805460018160011615610100020316600290046000825580601f1062000d86575062000da6565b601f01602090049060005260206000209081019062000da6919062000d41565b50565b613fc98062000db96000396000f3fe6080604052600436106102e85760003560e01c80636c0360eb11610190578063a7eec44b116100dc578063cac21c8f11610095578063e63ab1e91161006f578063e63ab1e914610ca4578063e985e9c514610cb9578063f2fde38b14610cf4578063ffee200c14610d27576102ef565b8063cac21c8f14610ba6578063d539139314610c56578063d547741f14610c6b576102ef565b8063a7eec44b146109f2578063b66a0e5d14610a1c578063b7aaba2014610a31578063b88d4fde14610a7f578063c87b56dd14610b52578063ca15c87314610b7c576102ef565b80639010d07c116101495780639981d4a1116101235780639981d4a1146109705780639d1b464a1461098d578063a217fddf146109a2578063a22cb465146109b7576102ef565b80639010d07c146108f257806391d148541461092257806395d89b411461095b576102ef565b80636c0360eb1461083b57806370a0823114610850578063715018a6146108835780637fd8d953146108985780638456cb59146108c85780638da5cb5b146108dd576102ef565b806336568abe1161024f5780635c975abb116102085780636352211e116101e25780636352211e1461079f5780636573c787146107c95780636a627842146107f35780636b0c004d14610826576102ef565b80635c975abb1461069b57806360316801146106b057806362ff09d614610775576102ef565b806336568abe146105a15780633ccfd60b146105da5780633f4ba83a146105ef57806342842e0e1461060457806342966c68146106475780634f6ccce714610671576102ef565b8063182199cd116102a1578063182199cd1461048357806323b872dd146104ad578063248a9ca3146104f0578063277dec921461051a5780632f2ff15d1461052f5780632f745c5914610568576102ef565b806301ffc9a7146102f457806306fdde031461033c578063081812fc146103c6578063095ea7b31461040c578063179f0b0a1461044757806318160ddd1461046e576102ef565b366102ef57005b600080fd5b34801561030057600080fd5b506103286004803603602081101561031757600080fd5b50356001600160e01b031916610d3c565b604080519115158252519081900360200190f35b34801561034857600080fd5b50610351610d5f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561038b578181015183820152602001610373565b50505050905090810190601f1680156103b85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103d257600080fd5b506103f0600480360360208110156103e957600080fd5b5035610df6565b604080516001600160a01b039092168252519081900360200190f35b34801561041857600080fd5b506104456004803603604081101561042f57600080fd5b506001600160a01b038135169060200135610e58565b005b34801561045357600080fd5b5061045c610f33565b60408051918252519081900360200190f35b34801561047a57600080fd5b5061045c610f3a565b34801561048f57600080fd5b50610328600480360360208110156104a657600080fd5b5035610f4b565b3480156104b957600080fd5b50610445600480360360608110156104d057600080fd5b506001600160a01b03813581169160208101359091169060400135610f6a565b3480156104fc57600080fd5b5061045c6004803603602081101561051357600080fd5b5035610fc1565b34801561052657600080fd5b50610445610fd6565b34801561053b57600080fd5b506104456004803603604081101561055257600080fd5b50803590602001356001600160a01b0316611049565b34801561057457600080fd5b5061045c6004803603604081101561058b57600080fd5b506001600160a01b0381351690602001356110b5565b3480156105ad57600080fd5b50610445600480360360408110156105c457600080fd5b50803590602001356001600160a01b03166110e6565b3480156105e657600080fd5b50610445611147565b3480156105fb57600080fd5b506104456111d8565b34801561061057600080fd5b506104456004803603606081101561062757600080fd5b506001600160a01b03813581169160208101359091169060400135611249565b34801561065357600080fd5b506104456004803603602081101561066a57600080fd5b5035611264565b34801561067d57600080fd5b5061045c6004803603602081101561069457600080fd5b50356112b6565b3480156106a757600080fd5b506103286112d2565b3480156106bc57600080fd5b506106da600480360360208110156106d357600080fd5b50356112db565b60405180806020018581526020018481526020018360038111156106fa57fe5b60ff168152602001828103825286818151815260200191508051906020019080838360005b8381101561073757818101518382015260200161071f565b50505050905090810190601f1680156107645780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561078157600080fd5b5061045c6004803603602081101561079857600080fd5b50356113a0565b3480156107ab57600080fd5b506103f0600480360360208110156107c257600080fd5b50356113b2565b3480156107d557600080fd5b50610328600480360360208110156107ec57600080fd5b50356113e0565b3480156107ff57600080fd5b506104456004803603602081101561081657600080fd5b50356001600160a01b0316611400565b34801561083257600080fd5b5061045c611484565b34801561084757600080fd5b5061035161148a565b34801561085c57600080fd5b5061045c6004803603602081101561087357600080fd5b50356001600160a01b03166114eb565b34801561088f57600080fd5b50610445611553565b3480156108a457600080fd5b50610445600480360360408110156108bb57600080fd5b50803590602001356115ff565b3480156108d457600080fd5b5061044561169b565b3480156108e957600080fd5b506103f061170a565b3480156108fe57600080fd5b506103f06004803603604081101561091557600080fd5b5080359060200135611719565b34801561092e57600080fd5b506103286004803603604081101561094557600080fd5b50803590602001356001600160a01b0316611737565b34801561096757600080fd5b50610351611755565b6104456004803603602081101561098657600080fd5b50356117b6565b34801561099957600080fd5b5061045c611a5c565b3480156109ae57600080fd5b5061045c611b18565b3480156109c357600080fd5b50610445600480360360408110156109da57600080fd5b506001600160a01b0381351690602001351515611b1d565b3480156109fe57600080fd5b5061044560048036036020811015610a1557600080fd5b5035611c22565b348015610a2857600080fd5b50610445611ce0565b348015610a3d57600080fd5b50610a5b60048036036020811015610a5457600080fd5b5035611d51565b60405180826003811115610a6b57fe5b60ff16815260200191505060405180910390f35b348015610a8b57600080fd5b5061044560048036036080811015610aa257600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135640100000000811115610add57600080fd5b820183602082011115610aef57600080fd5b80359060200191846001830284011164010000000083111715610b1157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611ed1945050505050565b348015610b5e57600080fd5b5061035160048036036020811015610b7557600080fd5b5035611f29565b348015610b8857600080fd5b5061045c60048036036020811015610b9f57600080fd5b5035612327565b348015610bb257600080fd5b50610bd060048036036020811015610bc957600080fd5b503561233e565b6040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610c19578181015183820152602001610c01565b50505050905090810190601f168015610c465780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b348015610c6257600080fd5b5061045c6123eb565b348015610c7757600080fd5b5061044560048036036040811015610c8e57600080fd5b50803590602001356001600160a01b031661240e565b348015610cb057600080fd5b5061045c612467565b348015610cc557600080fd5b5061032860048036036040811015610cdc57600080fd5b506001600160a01b038135811691602001351661248a565b348015610d0057600080fd5b5061044560048036036020811015610d1757600080fd5b50356001600160a01b03166124b8565b348015610d3357600080fd5b5061045c6125bb565b6001600160e01b0319811660009081526001602052604090205460ff165b919050565b60078054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610deb5780601f10610dc057610100808354040283529160200191610deb565b820191906000526020600020905b815481529060010190602001808311610dce57829003601f168201915b505050505090505b90565b6000610e01826125c1565b610e3c5760405162461bcd60e51b815260040180806020018281038252602c815260200180613d6f602c913960400191505060405180910390fd5b506000908152600560205260409020546001600160a01b031690565b6000610e63826113b2565b9050806001600160a01b0316836001600160a01b03161415610eb65760405162461bcd60e51b8152600401808060200182810382526021815260200180613e146021913960400191505060405180910390fd5b806001600160a01b0316610ec86125d4565b6001600160a01b03161480610ee95750610ee981610ee46125d4565b61248a565b610f245760405162461bcd60e51b8152600401808060200182810382526038815260200180613c7e6038913960400191505060405180910390fd5b610f2e83836125d8565b505050565b62093a8081565b6000610f466003612646565b905090565b60006002610f5883611d51565b6003811115610f6357fe5b1492915050565b610f7b610f756125d4565b82612651565b610fb65760405162461bcd60e51b8152600401808060200182810382526031815260200180613e5c6031913960400191505060405180910390fd5b610f2e8383836126f5565b60009081526020819052604090206002015490565b610fde6125d4565b6001600160a01b0316610fef61170a565b6001600160a01b031614611038576040805162461bcd60e51b81526020600482018190526024820152600080516020613d9b833981519152604482015290519081900360640190fd5b600f805461ff001916610100179055565b60008281526020819052604090206002015461106c906110676125d4565b611737565b6110a75760405162461bcd60e51b815260040180806020018281038252602f815260200180613a97602f913960400191505060405180910390fd5b6110b18282612853565b5050565b6001600160a01b03821660009081526002602052604081206110dd908363ffffffff6128c216565b90505b92915050565b6110ee6125d4565b6001600160a01b0316816001600160a01b03161461113d5760405162461bcd60e51b815260040180806020018281038252602f815260200180613f65602f913960400191505060405180910390fd5b6110b182826128ce565b61114f6125d4565b6001600160a01b031661116061170a565b6001600160a01b0316146111a9576040805162461bcd60e51b81526020600482018190526024820152600080516020613d9b833981519152604482015290519081900360640190fd5b6040514790339082156108fc029083906000818181858888f193505050501580156110b1573d6000803e3d6000fd5b604080516a5041555345525f524f4c4560a81b8152905190819003600b019020611204906110676125d4565b61123f5760405162461bcd60e51b8152600401808060200182810382526040815260200180613f256040913960400191505060405180910390fd5b61124761293d565b565b610f2e83838360405180602001604052806000815250611ed1565b61126f610f756125d4565b6112aa5760405162461bcd60e51b8152600401808060200182810382526030815260200180613ef56030913960400191505060405180910390fd5b6112b3816129dd565b50565b6000806112ca60038463ffffffff612ab616565b509392505050565b600b5460ff1690565b6000818152600e6020526040812060018101546002820154606093928392839261130488611d51565b8354604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815291869183018282801561138a5780601f1061135f5761010080835404028352916020019161138a565b820191906000526020600020905b81548152906001019060200180831161136d57829003601f168201915b5050505050935093509350935093509193509193565b60306020526000908152604090205481565b60006110e082604051806060016040528060298152602001613ce0602991396003919063ffffffff612ad216565b600060036113ed83611d51565b60038111156113f857fe5b141592915050565b604080516a4d494e5445525f524f4c4560a81b8152905190819003600b01902061142c906110676125d4565b6114675760405162461bcd60e51b815260040180806020018281038252603d815260200180613eb8603d913960400191505060405180910390fd5b61147a81611475600c612ae9565b612aed565b6112b3600c612c27565b61271081565b600a8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610deb5780601f10610dc057610100808354040283529160200191610deb565b60006001600160a01b0382166115325760405162461bcd60e51b815260040180806020018281038252602a815260200180613cb6602a913960400191505060405180910390fd5b6001600160a01b03821660009081526002602052604090206110e090612646565b61155b6125d4565b6001600160a01b031661156c61170a565b6001600160a01b0316146115b5576040805162461bcd60e51b81526020600482018190526024820152600080516020613d9b833981519152604482015290519081900360640190fd5b600d546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600d80546001600160a01b0319169055565b600f54610100900460ff166116455760405162461bcd60e51b8152600401808060200182810382526027815260200180613b4c6027913960400191505060405180910390fd5b6116566116506125d4565b83612651565b6116915760405162461bcd60e51b815260040180806020018281038252602b815260200180613e8d602b913960400191505060405180910390fd5b610f2e8282612c30565b604080516a5041555345525f524f4c4560a81b8152905190819003600b0190206116c7906110676125d4565b6117025760405162461bcd60e51b815260040180806020018281038252603e815260200180613b73603e913960400191505060405180910390fd5b611247612c76565b600d546001600160a01b031690565b60008281526020819052604081206110dd908363ffffffff6128c216565b60008281526020819052604081206110dd908363ffffffff612cf916565b60088054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610deb5780601f10610dc057610100808354040283529160200191610deb565b600f5460ff16611805576040805162461bcd60e51b8152602060048201526015602482015274151a1948139d5c9cd95c9e481a5cc818db1bdcd959605a1b604482015290519081900360640190fd5b61180d610f3a565b6127100381111561185d576040805162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da08189d5b189cc81b19599d605a1b604482015290519081900360640190fd5b612710611868610f3a565b106118b3576040805162461bcd60e51b815260206004820152601660248201527514d85b19481a185cc8185b1c9958591e48195b99195960521b604482015290519081900360640190fd5b6000811180156118c4575060148111155b6118ff5760405162461bcd60e51b8152600401808060200182810382526030815260200180613de46030913960400191505060405180910390fd5b61271061191361190d610f3a565b83612d0e565b1115611966576040805162461bcd60e51b815260206004820152601860248201527f45786365656473204d41585f43525950544f5243484944530000000000000000604482015290519081900360640190fd5b611977611971611a5c565b82612d68565b3410156119b55760405162461bcd60e51b8152600401808060200182810382526023815260200180613d096023913960400191505060405180910390fd5b60005b818110156110b1576119ca602f612c27565b60006119d6602f612ae9565b6040805160a081018252600660608201908152656772616e756d60d01b608083015281526000196020808301919091526000828401819052848152600e8252929092208151805194955091939092611a32928492910190613954565b5060208201516001820155604090910151600290910155611a533382612dc1565b506001016119b8565b600080611a67610f3a565b90506126ac8110611a8357670de0b6b3a7640000915050610df3565b61251c8110611a9d576708e1bc9bf0400000915050610df3565b611d4c8110611ab757670470de4df8200000915050610df3565b610dac8110611ad1576702386f26fc100000915050610df3565b6105dc8110611aeb5767011c37937e080000915050610df3565b6101f48110611b045766d529ae9e860000915050610df3565b668e1bc9bf040000915050610df3565b5090565b600081565b611b256125d4565b6001600160a01b0316826001600160a01b03161415611b8b576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b8060066000611b986125d4565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611bdc6125d4565b60408051841515815290516001600160a01b0392909216917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319181900360200190a35050565b611c2d610f756125d4565b611c685760405162461bcd60e51b8152600401808060200182810382526027815260200180613bfb6027913960400191505060405180910390fd5b611c71816113e0565b611c7a576112b3565b6000818152600e602052604081206002810154600182015491929091611c9e612ddb565b0390506000611cb08262093a80612ddf565b905080831115611cc357505050506112b3565b6000611cd0846001612d0e565b6002909501949094555050505050565b611ce86125d4565b6001600160a01b0316611cf961170a565b6001600160a01b031614611d42576040805162461bcd60e51b81526020600482018190526024820152600080516020613d9b833981519152604482015290519081900360640190fd5b600f805460ff19166001179055565b6000611d5b6139ce565b6000838152600e60209081526040918290208251815460026001821615610100026000190190911604601f81018490049093028101608090810190945260608101838152909391928492849190840182828015611df95780601f10611dce57610100808354040283529160200191611df9565b820191906000526020600020905b815481529060010190602001808311611ddc57829003601f168201915b50505050508152602001600182015481526020016002820154815250509050806020015160001415611e2f576000915050610d5a565b60001981602001511415611e47576001915050610d5a565b60408101516020820151600090611e5c612ddb565b0390506000611e6e8262093a80612ddf565b90506000611e7f8362093a80612e46565b905081841415611e9757600295505050505050610d5a565b81611ea3856001612d0e565b148015611eb15750612a3081105b15611ec457600295505050505050610d5a565b5060039695505050505050565b611edc6116506125d4565b611f175760405162461bcd60e51b8152600401808060200182810382526031815260200180613e5c6031913960400191505060405180910390fd5b611f2384848484612ead565b50505050565b606080611f35836112db565b5091925060019150611f449050565b611f4d84611d51565b6003811115611f5857fe5b141561203657611f6661148a565b6040518060600160405280602e8152602001613b1e602e91396040516020018083805190602001908083835b60208310611fb15780518252601f199092019160209182019101611f92565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310611ff95780518252601f199092019160209182019101611fda565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050610d5a565b600261204184611d51565b600381111561204c57fe5b14156121bd5761205a61148a565b60316000836040516020018080602001828103825283818151815260200191508051906020019080838360005b8381101561209f578181015183820152602001612087565b50505050905090810190601f1680156120cc5780820380516001836020036101000a031916815260200191505b50925050506040516020818303038152906040528051906020012081526020019081526020016000206040516020018083805190602001908083835b602083106121275780518252601f199092019160209182019101612108565b6001836020036101000a038019825116818451168082178552505050505050905001828054600181600116156101000203166002900480156121a05780601f1061217e5761010080835404028352918201916121a0565b820191906000526020600020905b81548152906001019060200180831161218c575b505092505050604051602081830303815290604052915050610d5a565b6121c561148a565b60326000836040516020018080602001828103825283818151815260200191508051906020019080838360005b8381101561220a5781810151838201526020016121f2565b50505050905090810190601f1680156122375780820380516001836020036101000a031916815260200191505b50925050506040516020818303038152906040528051906020012081526020019081526020016000206040516020018083805190602001908083835b602083106122925780518252601f199092019160209182019101612273565b6001836020036101000a0380198251168184511680821785525050505050509050018280546001816001161561010002031660029004801561230b5780601f106122e957610100808354040283529182019161230b565b820191906000526020600020905b8154815290600101906020018083116122f7575b505060408051601f198184030181529190529695505050505050565b60008181526020819052604081206110e090612646565b600e6020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529092918391908301828280156123d55780601f106123aa576101008083540402835291602001916123d5565b820191906000526020600020905b8154815290600101906020018083116123b857829003601f168201915b5050505050908060010154908060020154905083565b604080516a4d494e5445525f524f4c4560a81b8152905190819003600b01902081565b60008281526020819052604090206002015461242c906110676125d4565b61113d5760405162461bcd60e51b8152600401808060200182810382526030815260200180613c4e6030913960400191505060405180910390fd5b604080516a5041555345525f524f4c4560a81b8152905190819003600b01902081565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6124c06125d4565b6001600160a01b03166124d161170a565b6001600160a01b03161461251a576040805162461bcd60e51b81526020600482018190526024820152600080516020613d9b833981519152604482015290519081900360640190fd5b6001600160a01b03811661255f5760405162461bcd60e51b8152600401808060200182810382526026815260200180613af86026913960400191505060405180910390fd5b600d546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600d80546001600160a01b0319166001600160a01b0392909216919091179055565b612a3081565b60006110e060038363ffffffff612eff16565b3390565b600081815260056020526040902080546001600160a01b0319166001600160a01b038416908117909155819061260d826113b2565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006110e082612ae9565b600061265c826125c1565b6126975760405162461bcd60e51b815260040180806020018281038252602c815260200180613c22602c913960400191505060405180910390fd5b60006126a2836113b2565b9050806001600160a01b0316846001600160a01b031614806126dd5750836001600160a01b03166126d284610df6565b6001600160a01b0316145b806126ed57506126ed818561248a565b949350505050565b826001600160a01b0316612708826113b2565b6001600160a01b03161461274d5760405162461bcd60e51b8152600401808060200182810382526029815260200180613dbb6029913960400191505060405180910390fd5b6001600160a01b0382166127925760405162461bcd60e51b8152600401808060200182810382526024815260200180613bb16024913960400191505060405180910390fd5b61279d838383612f0b565b6127a86000826125d8565b6001600160a01b03831660009081526002602052604090206127d0908263ffffffff612f6b16565b506001600160a01b03821660009081526002602052604090206127f9908263ffffffff612f7716565b5061280c6003828463ffffffff612f8316565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000828152602081905260409020612871908263ffffffff612f9916565b156110b15761287e6125d4565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006110dd8383612fae565b60008281526020819052604090206128ec908263ffffffff61301216565b156110b1576128f96125d4565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6129456112d2565b61298d576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b600b805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6129c06125d4565b604080516001600160a01b039092168252519081900360200190a1565b60006129e8826113b2565b90506129f681600084612f0b565b612a016000836125d8565b6000828152600960205260409020546002600019610100600184161502019091160415612a3f576000828152600960205260408120612a3f916139ef565b6001600160a01b0381166000908152600260205260409020612a67908363ffffffff612f6b16565b50612a7960038363ffffffff61302716565b5060405182906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000808080612ac58686613033565b9097909650945050505050565b6000612adf8484846130ae565b90505b9392505050565b5490565b6001600160a01b038216612b48576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b612b51816125c1565b15612ba3576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b612baf60008383612f0b565b6001600160a01b0382166000908152600260205260409020612bd7908263ffffffff612f7716565b50612bea6003828463ffffffff612f8316565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80546001019055565b6040805142602080830191909152448284015260608083018590528351808403909101815260809092019092528051910120600090612c6f8482613178565b5092915050565b612c7e6112d2565b15612cc3576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b600b805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586129c06125d4565b60006110dd836001600160a01b0384166131d2565b6000828201838110156110dd576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082612d77575060006110e0565b82820282848281612d8457fe5b04146110dd5760405162461bcd60e51b8152600401808060200182810382526021815260200180613d4e6021913960400191505060405180910390fd5b6110b18282604051806020016040528060008152506131ea565b4290565b6000808211612e35576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612e3e57fe5b049392505050565b6000808211612e9c576040805162461bcd60e51b815260206004820152601860248201527f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000604482015290519081900360640190fd5b818381612ea557fe5b069392505050565b612eb88484846126f5565b612ec48484848461323c565b611f235760405162461bcd60e51b8152600401808060200182810382526032815260200180613ac66032913960400191505060405180910390fd5b60006110dd83836131d2565b6001600160a01b0382161580612f255750612f25816113e0565b612f605760405162461bcd60e51b8152600401808060200182810382526027815260200180613e356027913960400191505060405180910390fd5b610f2e8383836133bc565b60006110dd83836133c7565b60006110dd838361348d565b6000612adf84846001600160a01b0385166134d7565b60006110dd836001600160a01b03841661348d565b81546000908210612ff05760405162461bcd60e51b8152600401808060200182810382526022815260200180613a4a6022913960400191505060405180910390fd5b826000018281548110612fff57fe5b9060005260206000200154905092915050565b60006110dd836001600160a01b0384166133c7565b60006110dd838361356e565b8154600090819083106130775760405162461bcd60e51b8152600401808060200182810382526022815260200180613d2c6022913960400191505060405180910390fd5b600084600001848154811061308857fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816131495760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561310e5781810151838201526020016130f6565b50505050905090810190601f16801561313b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061315c57fe5b9060005260206000209060020201600101549150509392505050565b6000828152600e60205260409020606061319c61319784612710612e46565b613642565b80519091506131b19083906020840190613954565b506131ba612ddb565b600183015560006131ca856113b2565b505050505050565b60009081526001919091016020526040902054151590565b6131f48383612aed565b613201600084848461323c565b610f2e5760405162461bcd60e51b8152600401808060200182810382526032815260200180613ac66032913960400191505060405180910390fd5b6000613250846001600160a01b031661372e565b61325c575060016126ed565b6060613382630a85bd0160e11b6132716125d4565b88878760405160240180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156132ea5781810151838201526020016132d2565b50505050905090810190601f1680156133175780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001613ac6603291396001600160a01b038816919063ffffffff61373416565b9050600081806020019051602081101561339b57600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b610f2e838383613743565b6000818152600183016020526040812054801561348357835460001980830191908101906000908790839081106133fa57fe5b906000526020600020015490508087600001848154811061341757fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061344757fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506110e0565b60009150506110e0565b600061349983836131d2565b6134cf575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556110e0565b5060006110e0565b60008281526001840160205260408120548061353c575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055612ae2565b8285600001600183038154811061354f57fe5b9060005260206000209060020201600101819055506000915050612ae2565b6000818152600183016020526040812054801561348357835460001980830191908101906000908790839081106135a157fe5b90600052602060002090600202019050808760000184815481106135c157fe5b60009182526020808320845460029093020191825560019384015491840191909155835482528983019052604090209084019055865487908061360057fe5b60008281526020808220600260001990940193840201828155600190810183905592909355888152898201909252604082209190915594506110e09350505050565b606060005b600a81101561372857601081600a811061365d57fe5b601091828204019190066002029054906101000a900461ffff1661ffff16831161372057601181600a811061368e57fe5b01805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156137135780601f106136e857610100808354040283529160200191613713565b820191906000526020600020905b8154815290600101906020018083116136f657829003601f168201915b5050505050915050610d5a565b600101613647565b50919050565b3b151590565b6060612adf8484600085613792565b61374e838383610f2e565b6137566112d2565b15610f2e5760405162461bcd60e51b815260040180806020018281038252602b815260200180613a6c602b913960400191505060405180910390fd5b6060824710156137d35760405162461bcd60e51b8152600401808060200182810382526026815260200180613bd56026913960400191505060405180910390fd5b6137dc8561372e565b61382d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061386c5780518252601f19909201916020918201910161384d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146138ce576040519150601f19603f3d011682016040523d82523d6000602084013e6138d3565b606091505b50915091506138e38282866138ee565b979650505050505050565b606083156138fd575081612ae2565b82511561390d5782518084602001fd5b60405162461bcd60e51b815260206004820181815284516024840152845185939192839260440191908501908083836000831561310e5781810151838201526020016130f6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061399557805160ff19168380011785556139c2565b828001600101855582156139c2579182015b828111156139c25782518255916020019190600101906139a7565b50611b14929150613a2f565b60405180606001604052806060815260200160008152602001600081525090565b50805460018160011615610100020316600290046000825580601f10613a1557506112b3565b601f0160209004906000526020600020908101906112b391905b610df391905b80821115611b145760008155600101613a3556fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732315061757361626c653a20746f6b656e207472616e73666572207768696c6520706175736564416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373516d5764316d6e374475477978394279664e6571437367645355734a5a316372616769746761796773714476456d4765726d696e6174696f6e2073746172747320323032312d30342d31325431363a30303a30305a4552433732315072657365744d696e7465725061757365724175746f49643a206d75737420686176652070617573657220726f6c6520746f2070617573654552433732313a207472616e7366657220746f20746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4f6e6c7920746865204f776e65722063616e20776174657220612043727970744f72636869642e4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b654552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e45746865722076616c75652073656e742069732062656c6f7720746865207072696365456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e6473536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e596f752063616e20706c616e74206d696e696d756d20312c206d6178696d756d2032302043727970744f7263686964734552433732313a20617070726f76616c20746f2063757272656e74206f776e6572446561642043727970744f7263686964732063616e6e6f74206265207472616e736665727265644552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644f6e6c7920746865204f776e65722063616e206765726d696e61746520612043727970744f72636869642e4552433732315072657365744d696e7465725061757365724175746f49643a206d7573742068617665206d696e74657220726f6c6520746f206d696e744552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644552433732315072657365744d696e7465725061757365724175746f49643a206d75737420686176652070617573657220726f6c6520746f20756e7061757365416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220669084c037e9e2730b31d45e8cd7d87fcb21b2d1237df1dee094b97b3922927264736f6c63430006060033516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f637970726970656469756d2d63616c63656f6c75732e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f64656e64726f7068796c61782d6c696e64656e69692e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f70617068696f706564696c756d2d726f7468736368696c6469616e756d2e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f706c6174616e74686572612d617a6f726963612e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f637970726970656469756d2d63616c63656f6c75732e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f7068616c61656e6f707369732d6d6963686f6c69747a69692e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f76616e64612d636f6572756c65612e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f6d696c746f6e69612d6b61796173696d61652e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f70617068696f706564696c756d2d766965746e616d656e73652e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f6775617269616e7468652d617572616e74696163612e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f7368656e7a68656e6963612d6f726368696461636561652e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f6d696c746f6e69612d6b61796173696d61652e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f76616e64612d636f6572756c65612e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f70617068696f706564696c756d2d726f7468736368696c6469616e756d2e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f6775617269616e7468652d617572616e74696163612e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f70617068696f706564696c756d2d766965746e616d656e73652e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f64656e64726f7068796c61782d6c696e64656e69692e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f7068616c61656e6f707369732d6d6963686f6c69747a69692e6a736f6e516d55384d4e7a6e5436464431763558646e536541366345597178706a374d676b4543706f7433614345526572582f7368656e7a68656e6963612d6f726368696461636561652e6a736f6e516d56376e735167484e76777952786262685035396948336772715366713367376a6f53506153314a47526d4a612f706c6174616e74686572612d617a6f726963612e6a736f6e",
      "r": "0xb64534e81219df3b0b8562afe43d8be769b9f4c6edd9f0061655652d1dc623a1",
      "s": "0x60b91e2ce4c847ce7c1b0794f4002c76feef4e06fa8950ef5e2536f00f63b633",
      "v": 46,
      "chainId": 5
    }
  }
}